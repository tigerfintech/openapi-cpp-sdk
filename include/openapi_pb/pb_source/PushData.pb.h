// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PushData.proto

#ifndef PROTOBUF_PushData_2eproto__INCLUDED
#define PROTOBUF_PushData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "SocketCommon.pb.h"  // IWYU pragma: export
#include "OrderStatusData.pb.h"  // IWYU pragma: export
#include "PositionData.pb.h"  // IWYU pragma: export
#include "AssetData.pb.h"  // IWYU pragma: export
#include "QuoteData.pb.h"  // IWYU pragma: export
#include "QuoteDepthData.pb.h"  // IWYU pragma: export
#include "TradeTickData.pb.h"  // IWYU pragma: export
#include "OrderTransactionData.pb.h"  // IWYU pragma: export
#include "StockTopData.pb.h"  // IWYU pragma: export
#include "OptionTopData.pb.h"  // IWYU pragma: export
#include "KlineData.pb.h"  // IWYU pragma: export
#include "TickData.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace tigeropen {
namespace push {
namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_PushData_2eproto();
void protobuf_InitDefaults_PushData_2eproto();
void protobuf_AssignDesc_PushData_2eproto();
void protobuf_ShutdownFile_PushData_2eproto();

class PushData;

// ===================================================================

class PushData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tigeropen.push.pb.PushData) */ {
 public:
  PushData();
  virtual ~PushData();

  PushData(const PushData& from);

  inline PushData& operator=(const PushData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushData& default_instance();

  enum BodyCase {
    kQuoteData = 2,
    kQuoteDepthData = 3,
    kTradeTickData = 4,
    kPositionData = 5,
    kAssetData = 6,
    kOrderStatusData = 7,
    kOrderTransactionData = 8,
    kStockTopData = 9,
    kOptionTopData = 10,
    kKlineData = 11,
    kTickData = 12,
    BODY_NOT_SET = 0,
  };

  static const PushData* internal_default_instance();

  void Swap(PushData* other);

  // implements Message ----------------------------------------------

  inline PushData* New() const { return New(NULL); }

  PushData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushData& from);
  void MergeFrom(const PushData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PushData* other);
  void UnsafeMergeFrom(const PushData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tigeropen.push.pb.SocketCommon.DataType dataType = 1;
  void clear_datatype();
  static const int kDataTypeFieldNumber = 1;
  ::tigeropen::push::pb::SocketCommon_DataType datatype() const;
  void set_datatype(::tigeropen::push::pb::SocketCommon_DataType value);

  // optional .tigeropen.push.pb.QuoteData quoteData = 2;
  bool has_quotedata() const;
  void clear_quotedata();
  static const int kQuoteDataFieldNumber = 2;
  const ::tigeropen::push::pb::QuoteData& quotedata() const;
  ::tigeropen::push::pb::QuoteData* mutable_quotedata();
  ::tigeropen::push::pb::QuoteData* release_quotedata();
  void set_allocated_quotedata(::tigeropen::push::pb::QuoteData* quotedata);

  // optional .tigeropen.push.pb.QuoteDepthData quoteDepthData = 3;
  bool has_quotedepthdata() const;
  void clear_quotedepthdata();
  static const int kQuoteDepthDataFieldNumber = 3;
  const ::tigeropen::push::pb::QuoteDepthData& quotedepthdata() const;
  ::tigeropen::push::pb::QuoteDepthData* mutable_quotedepthdata();
  ::tigeropen::push::pb::QuoteDepthData* release_quotedepthdata();
  void set_allocated_quotedepthdata(::tigeropen::push::pb::QuoteDepthData* quotedepthdata);

  // optional .tigeropen.push.pb.TradeTickData tradeTickData = 4;
  bool has_tradetickdata() const;
  void clear_tradetickdata();
  static const int kTradeTickDataFieldNumber = 4;
  const ::tigeropen::push::pb::TradeTickData& tradetickdata() const;
  ::tigeropen::push::pb::TradeTickData* mutable_tradetickdata();
  ::tigeropen::push::pb::TradeTickData* release_tradetickdata();
  void set_allocated_tradetickdata(::tigeropen::push::pb::TradeTickData* tradetickdata);

  // optional .tigeropen.push.pb.PositionData positionData = 5;
  bool has_positiondata() const;
  void clear_positiondata();
  static const int kPositionDataFieldNumber = 5;
  const ::tigeropen::push::pb::PositionData& positiondata() const;
  ::tigeropen::push::pb::PositionData* mutable_positiondata();
  ::tigeropen::push::pb::PositionData* release_positiondata();
  void set_allocated_positiondata(::tigeropen::push::pb::PositionData* positiondata);

  // optional .tigeropen.push.pb.AssetData assetData = 6;
  bool has_assetdata() const;
  void clear_assetdata();
  static const int kAssetDataFieldNumber = 6;
  const ::tigeropen::push::pb::AssetData& assetdata() const;
  ::tigeropen::push::pb::AssetData* mutable_assetdata();
  ::tigeropen::push::pb::AssetData* release_assetdata();
  void set_allocated_assetdata(::tigeropen::push::pb::AssetData* assetdata);

  // optional .tigeropen.push.pb.OrderStatusData orderStatusData = 7;
  bool has_orderstatusdata() const;
  void clear_orderstatusdata();
  static const int kOrderStatusDataFieldNumber = 7;
  const ::tigeropen::push::pb::OrderStatusData& orderstatusdata() const;
  ::tigeropen::push::pb::OrderStatusData* mutable_orderstatusdata();
  ::tigeropen::push::pb::OrderStatusData* release_orderstatusdata();
  void set_allocated_orderstatusdata(::tigeropen::push::pb::OrderStatusData* orderstatusdata);

  // optional .tigeropen.push.pb.OrderTransactionData orderTransactionData = 8;
  bool has_ordertransactiondata() const;
  void clear_ordertransactiondata();
  static const int kOrderTransactionDataFieldNumber = 8;
  const ::tigeropen::push::pb::OrderTransactionData& ordertransactiondata() const;
  ::tigeropen::push::pb::OrderTransactionData* mutable_ordertransactiondata();
  ::tigeropen::push::pb::OrderTransactionData* release_ordertransactiondata();
  void set_allocated_ordertransactiondata(::tigeropen::push::pb::OrderTransactionData* ordertransactiondata);

  // optional .tigeropen.push.pb.StockTopData stockTopData = 9;
  bool has_stocktopdata() const;
  void clear_stocktopdata();
  static const int kStockTopDataFieldNumber = 9;
  const ::tigeropen::push::pb::StockTopData& stocktopdata() const;
  ::tigeropen::push::pb::StockTopData* mutable_stocktopdata();
  ::tigeropen::push::pb::StockTopData* release_stocktopdata();
  void set_allocated_stocktopdata(::tigeropen::push::pb::StockTopData* stocktopdata);

  // optional .tigeropen.push.pb.OptionTopData optionTopData = 10;
  bool has_optiontopdata() const;
  void clear_optiontopdata();
  static const int kOptionTopDataFieldNumber = 10;
  const ::tigeropen::push::pb::OptionTopData& optiontopdata() const;
  ::tigeropen::push::pb::OptionTopData* mutable_optiontopdata();
  ::tigeropen::push::pb::OptionTopData* release_optiontopdata();
  void set_allocated_optiontopdata(::tigeropen::push::pb::OptionTopData* optiontopdata);

  // optional .tigeropen.push.pb.KlineData klineData = 11;
  bool has_klinedata() const;
  void clear_klinedata();
  static const int kKlineDataFieldNumber = 11;
  const ::tigeropen::push::pb::KlineData& klinedata() const;
  ::tigeropen::push::pb::KlineData* mutable_klinedata();
  ::tigeropen::push::pb::KlineData* release_klinedata();
  void set_allocated_klinedata(::tigeropen::push::pb::KlineData* klinedata);

  // optional .tigeropen.push.pb.TickData tickData = 12;
  bool has_tickdata() const;
  void clear_tickdata();
  static const int kTickDataFieldNumber = 12;
  const ::tigeropen::push::pb::TickData& tickdata() const;
  ::tigeropen::push::pb::TickData* mutable_tickdata();
  ::tigeropen::push::pb::TickData* release_tickdata();
  void set_allocated_tickdata(::tigeropen::push::pb::TickData* tickdata);

  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:tigeropen.push.pb.PushData)
 private:
  inline void set_has_quotedata();
  inline void set_has_quotedepthdata();
  inline void set_has_tradetickdata();
  inline void set_has_positiondata();
  inline void set_has_assetdata();
  inline void set_has_orderstatusdata();
  inline void set_has_ordertransactiondata();
  inline void set_has_stocktopdata();
  inline void set_has_optiontopdata();
  inline void set_has_klinedata();
  inline void set_has_tickdata();

  inline bool has_body() const;
  void clear_body();
  inline void clear_has_body();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int datatype_;
  union BodyUnion {
    BodyUnion() {}
    ::tigeropen::push::pb::QuoteData* quotedata_;
    ::tigeropen::push::pb::QuoteDepthData* quotedepthdata_;
    ::tigeropen::push::pb::TradeTickData* tradetickdata_;
    ::tigeropen::push::pb::PositionData* positiondata_;
    ::tigeropen::push::pb::AssetData* assetdata_;
    ::tigeropen::push::pb::OrderStatusData* orderstatusdata_;
    ::tigeropen::push::pb::OrderTransactionData* ordertransactiondata_;
    ::tigeropen::push::pb::StockTopData* stocktopdata_;
    ::tigeropen::push::pb::OptionTopData* optiontopdata_;
    ::tigeropen::push::pb::KlineData* klinedata_;
    ::tigeropen::push::pb::TickData* tickdata_;
  } body_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_PushData_2eproto_impl();
  friend void  protobuf_AddDesc_PushData_2eproto_impl();
  friend void protobuf_AssignDesc_PushData_2eproto();
  friend void protobuf_ShutdownFile_PushData_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PushData> PushData_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PushData

// optional .tigeropen.push.pb.SocketCommon.DataType dataType = 1;
inline void PushData::clear_datatype() {
  datatype_ = 0;
}
inline ::tigeropen::push::pb::SocketCommon_DataType PushData::datatype() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.dataType)
  return static_cast< ::tigeropen::push::pb::SocketCommon_DataType >(datatype_);
}
inline void PushData::set_datatype(::tigeropen::push::pb::SocketCommon_DataType value) {
  
  datatype_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.PushData.dataType)
}

// optional .tigeropen.push.pb.QuoteData quoteData = 2;
inline bool PushData::has_quotedata() const {
  return body_case() == kQuoteData;
}
inline void PushData::set_has_quotedata() {
  _oneof_case_[0] = kQuoteData;
}
inline void PushData::clear_quotedata() {
  if (has_quotedata()) {
    delete body_.quotedata_;
    clear_has_body();
  }
}
inline  const ::tigeropen::push::pb::QuoteData& PushData::quotedata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.quoteData)
  return has_quotedata()
      ? *body_.quotedata_
      : ::tigeropen::push::pb::QuoteData::default_instance();
}
inline ::tigeropen::push::pb::QuoteData* PushData::mutable_quotedata() {
  if (!has_quotedata()) {
    clear_body();
    set_has_quotedata();
    body_.quotedata_ = new ::tigeropen::push::pb::QuoteData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.quoteData)
  return body_.quotedata_;
}
inline ::tigeropen::push::pb::QuoteData* PushData::release_quotedata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.quoteData)
  if (has_quotedata()) {
    clear_has_body();
    ::tigeropen::push::pb::QuoteData* temp = body_.quotedata_;
    body_.quotedata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PushData::set_allocated_quotedata(::tigeropen::push::pb::QuoteData* quotedata) {
  clear_body();
  if (quotedata) {
    set_has_quotedata();
    body_.quotedata_ = quotedata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.quoteData)
}

// optional .tigeropen.push.pb.QuoteDepthData quoteDepthData = 3;
inline bool PushData::has_quotedepthdata() const {
  return body_case() == kQuoteDepthData;
}
inline void PushData::set_has_quotedepthdata() {
  _oneof_case_[0] = kQuoteDepthData;
}
inline void PushData::clear_quotedepthdata() {
  if (has_quotedepthdata()) {
    delete body_.quotedepthdata_;
    clear_has_body();
  }
}
inline  const ::tigeropen::push::pb::QuoteDepthData& PushData::quotedepthdata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.quoteDepthData)
  return has_quotedepthdata()
      ? *body_.quotedepthdata_
      : ::tigeropen::push::pb::QuoteDepthData::default_instance();
}
inline ::tigeropen::push::pb::QuoteDepthData* PushData::mutable_quotedepthdata() {
  if (!has_quotedepthdata()) {
    clear_body();
    set_has_quotedepthdata();
    body_.quotedepthdata_ = new ::tigeropen::push::pb::QuoteDepthData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.quoteDepthData)
  return body_.quotedepthdata_;
}
inline ::tigeropen::push::pb::QuoteDepthData* PushData::release_quotedepthdata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.quoteDepthData)
  if (has_quotedepthdata()) {
    clear_has_body();
    ::tigeropen::push::pb::QuoteDepthData* temp = body_.quotedepthdata_;
    body_.quotedepthdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PushData::set_allocated_quotedepthdata(::tigeropen::push::pb::QuoteDepthData* quotedepthdata) {
  clear_body();
  if (quotedepthdata) {
    set_has_quotedepthdata();
    body_.quotedepthdata_ = quotedepthdata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.quoteDepthData)
}

// optional .tigeropen.push.pb.TradeTickData tradeTickData = 4;
inline bool PushData::has_tradetickdata() const {
  return body_case() == kTradeTickData;
}
inline void PushData::set_has_tradetickdata() {
  _oneof_case_[0] = kTradeTickData;
}
inline void PushData::clear_tradetickdata() {
  if (has_tradetickdata()) {
    delete body_.tradetickdata_;
    clear_has_body();
  }
}
inline  const ::tigeropen::push::pb::TradeTickData& PushData::tradetickdata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.tradeTickData)
  return has_tradetickdata()
      ? *body_.tradetickdata_
      : ::tigeropen::push::pb::TradeTickData::default_instance();
}
inline ::tigeropen::push::pb::TradeTickData* PushData::mutable_tradetickdata() {
  if (!has_tradetickdata()) {
    clear_body();
    set_has_tradetickdata();
    body_.tradetickdata_ = new ::tigeropen::push::pb::TradeTickData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.tradeTickData)
  return body_.tradetickdata_;
}
inline ::tigeropen::push::pb::TradeTickData* PushData::release_tradetickdata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.tradeTickData)
  if (has_tradetickdata()) {
    clear_has_body();
    ::tigeropen::push::pb::TradeTickData* temp = body_.tradetickdata_;
    body_.tradetickdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PushData::set_allocated_tradetickdata(::tigeropen::push::pb::TradeTickData* tradetickdata) {
  clear_body();
  if (tradetickdata) {
    set_has_tradetickdata();
    body_.tradetickdata_ = tradetickdata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.tradeTickData)
}

// optional .tigeropen.push.pb.PositionData positionData = 5;
inline bool PushData::has_positiondata() const {
  return body_case() == kPositionData;
}
inline void PushData::set_has_positiondata() {
  _oneof_case_[0] = kPositionData;
}
inline void PushData::clear_positiondata() {
  if (has_positiondata()) {
    delete body_.positiondata_;
    clear_has_body();
  }
}
inline  const ::tigeropen::push::pb::PositionData& PushData::positiondata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.positionData)
  return has_positiondata()
      ? *body_.positiondata_
      : ::tigeropen::push::pb::PositionData::default_instance();
}
inline ::tigeropen::push::pb::PositionData* PushData::mutable_positiondata() {
  if (!has_positiondata()) {
    clear_body();
    set_has_positiondata();
    body_.positiondata_ = new ::tigeropen::push::pb::PositionData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.positionData)
  return body_.positiondata_;
}
inline ::tigeropen::push::pb::PositionData* PushData::release_positiondata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.positionData)
  if (has_positiondata()) {
    clear_has_body();
    ::tigeropen::push::pb::PositionData* temp = body_.positiondata_;
    body_.positiondata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PushData::set_allocated_positiondata(::tigeropen::push::pb::PositionData* positiondata) {
  clear_body();
  if (positiondata) {
    set_has_positiondata();
    body_.positiondata_ = positiondata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.positionData)
}

// optional .tigeropen.push.pb.AssetData assetData = 6;
inline bool PushData::has_assetdata() const {
  return body_case() == kAssetData;
}
inline void PushData::set_has_assetdata() {
  _oneof_case_[0] = kAssetData;
}
inline void PushData::clear_assetdata() {
  if (has_assetdata()) {
    delete body_.assetdata_;
    clear_has_body();
  }
}
inline  const ::tigeropen::push::pb::AssetData& PushData::assetdata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.assetData)
  return has_assetdata()
      ? *body_.assetdata_
      : ::tigeropen::push::pb::AssetData::default_instance();
}
inline ::tigeropen::push::pb::AssetData* PushData::mutable_assetdata() {
  if (!has_assetdata()) {
    clear_body();
    set_has_assetdata();
    body_.assetdata_ = new ::tigeropen::push::pb::AssetData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.assetData)
  return body_.assetdata_;
}
inline ::tigeropen::push::pb::AssetData* PushData::release_assetdata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.assetData)
  if (has_assetdata()) {
    clear_has_body();
    ::tigeropen::push::pb::AssetData* temp = body_.assetdata_;
    body_.assetdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PushData::set_allocated_assetdata(::tigeropen::push::pb::AssetData* assetdata) {
  clear_body();
  if (assetdata) {
    set_has_assetdata();
    body_.assetdata_ = assetdata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.assetData)
}

// optional .tigeropen.push.pb.OrderStatusData orderStatusData = 7;
inline bool PushData::has_orderstatusdata() const {
  return body_case() == kOrderStatusData;
}
inline void PushData::set_has_orderstatusdata() {
  _oneof_case_[0] = kOrderStatusData;
}
inline void PushData::clear_orderstatusdata() {
  if (has_orderstatusdata()) {
    delete body_.orderstatusdata_;
    clear_has_body();
  }
}
inline  const ::tigeropen::push::pb::OrderStatusData& PushData::orderstatusdata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.orderStatusData)
  return has_orderstatusdata()
      ? *body_.orderstatusdata_
      : ::tigeropen::push::pb::OrderStatusData::default_instance();
}
inline ::tigeropen::push::pb::OrderStatusData* PushData::mutable_orderstatusdata() {
  if (!has_orderstatusdata()) {
    clear_body();
    set_has_orderstatusdata();
    body_.orderstatusdata_ = new ::tigeropen::push::pb::OrderStatusData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.orderStatusData)
  return body_.orderstatusdata_;
}
inline ::tigeropen::push::pb::OrderStatusData* PushData::release_orderstatusdata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.orderStatusData)
  if (has_orderstatusdata()) {
    clear_has_body();
    ::tigeropen::push::pb::OrderStatusData* temp = body_.orderstatusdata_;
    body_.orderstatusdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PushData::set_allocated_orderstatusdata(::tigeropen::push::pb::OrderStatusData* orderstatusdata) {
  clear_body();
  if (orderstatusdata) {
    set_has_orderstatusdata();
    body_.orderstatusdata_ = orderstatusdata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.orderStatusData)
}

// optional .tigeropen.push.pb.OrderTransactionData orderTransactionData = 8;
inline bool PushData::has_ordertransactiondata() const {
  return body_case() == kOrderTransactionData;
}
inline void PushData::set_has_ordertransactiondata() {
  _oneof_case_[0] = kOrderTransactionData;
}
inline void PushData::clear_ordertransactiondata() {
  if (has_ordertransactiondata()) {
    delete body_.ordertransactiondata_;
    clear_has_body();
  }
}
inline  const ::tigeropen::push::pb::OrderTransactionData& PushData::ordertransactiondata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.orderTransactionData)
  return has_ordertransactiondata()
      ? *body_.ordertransactiondata_
      : ::tigeropen::push::pb::OrderTransactionData::default_instance();
}
inline ::tigeropen::push::pb::OrderTransactionData* PushData::mutable_ordertransactiondata() {
  if (!has_ordertransactiondata()) {
    clear_body();
    set_has_ordertransactiondata();
    body_.ordertransactiondata_ = new ::tigeropen::push::pb::OrderTransactionData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.orderTransactionData)
  return body_.ordertransactiondata_;
}
inline ::tigeropen::push::pb::OrderTransactionData* PushData::release_ordertransactiondata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.orderTransactionData)
  if (has_ordertransactiondata()) {
    clear_has_body();
    ::tigeropen::push::pb::OrderTransactionData* temp = body_.ordertransactiondata_;
    body_.ordertransactiondata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PushData::set_allocated_ordertransactiondata(::tigeropen::push::pb::OrderTransactionData* ordertransactiondata) {
  clear_body();
  if (ordertransactiondata) {
    set_has_ordertransactiondata();
    body_.ordertransactiondata_ = ordertransactiondata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.orderTransactionData)
}

// optional .tigeropen.push.pb.StockTopData stockTopData = 9;
inline bool PushData::has_stocktopdata() const {
  return body_case() == kStockTopData;
}
inline void PushData::set_has_stocktopdata() {
  _oneof_case_[0] = kStockTopData;
}
inline void PushData::clear_stocktopdata() {
  if (has_stocktopdata()) {
    delete body_.stocktopdata_;
    clear_has_body();
  }
}
inline  const ::tigeropen::push::pb::StockTopData& PushData::stocktopdata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.stockTopData)
  return has_stocktopdata()
      ? *body_.stocktopdata_
      : ::tigeropen::push::pb::StockTopData::default_instance();
}
inline ::tigeropen::push::pb::StockTopData* PushData::mutable_stocktopdata() {
  if (!has_stocktopdata()) {
    clear_body();
    set_has_stocktopdata();
    body_.stocktopdata_ = new ::tigeropen::push::pb::StockTopData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.stockTopData)
  return body_.stocktopdata_;
}
inline ::tigeropen::push::pb::StockTopData* PushData::release_stocktopdata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.stockTopData)
  if (has_stocktopdata()) {
    clear_has_body();
    ::tigeropen::push::pb::StockTopData* temp = body_.stocktopdata_;
    body_.stocktopdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PushData::set_allocated_stocktopdata(::tigeropen::push::pb::StockTopData* stocktopdata) {
  clear_body();
  if (stocktopdata) {
    set_has_stocktopdata();
    body_.stocktopdata_ = stocktopdata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.stockTopData)
}

// optional .tigeropen.push.pb.OptionTopData optionTopData = 10;
inline bool PushData::has_optiontopdata() const {
  return body_case() == kOptionTopData;
}
inline void PushData::set_has_optiontopdata() {
  _oneof_case_[0] = kOptionTopData;
}
inline void PushData::clear_optiontopdata() {
  if (has_optiontopdata()) {
    delete body_.optiontopdata_;
    clear_has_body();
  }
}
inline  const ::tigeropen::push::pb::OptionTopData& PushData::optiontopdata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.optionTopData)
  return has_optiontopdata()
      ? *body_.optiontopdata_
      : ::tigeropen::push::pb::OptionTopData::default_instance();
}
inline ::tigeropen::push::pb::OptionTopData* PushData::mutable_optiontopdata() {
  if (!has_optiontopdata()) {
    clear_body();
    set_has_optiontopdata();
    body_.optiontopdata_ = new ::tigeropen::push::pb::OptionTopData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.optionTopData)
  return body_.optiontopdata_;
}
inline ::tigeropen::push::pb::OptionTopData* PushData::release_optiontopdata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.optionTopData)
  if (has_optiontopdata()) {
    clear_has_body();
    ::tigeropen::push::pb::OptionTopData* temp = body_.optiontopdata_;
    body_.optiontopdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PushData::set_allocated_optiontopdata(::tigeropen::push::pb::OptionTopData* optiontopdata) {
  clear_body();
  if (optiontopdata) {
    set_has_optiontopdata();
    body_.optiontopdata_ = optiontopdata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.optionTopData)
}

// optional .tigeropen.push.pb.KlineData klineData = 11;
inline bool PushData::has_klinedata() const {
  return body_case() == kKlineData;
}
inline void PushData::set_has_klinedata() {
  _oneof_case_[0] = kKlineData;
}
inline void PushData::clear_klinedata() {
  if (has_klinedata()) {
    delete body_.klinedata_;
    clear_has_body();
  }
}
inline  const ::tigeropen::push::pb::KlineData& PushData::klinedata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.klineData)
  return has_klinedata()
      ? *body_.klinedata_
      : ::tigeropen::push::pb::KlineData::default_instance();
}
inline ::tigeropen::push::pb::KlineData* PushData::mutable_klinedata() {
  if (!has_klinedata()) {
    clear_body();
    set_has_klinedata();
    body_.klinedata_ = new ::tigeropen::push::pb::KlineData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.klineData)
  return body_.klinedata_;
}
inline ::tigeropen::push::pb::KlineData* PushData::release_klinedata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.klineData)
  if (has_klinedata()) {
    clear_has_body();
    ::tigeropen::push::pb::KlineData* temp = body_.klinedata_;
    body_.klinedata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PushData::set_allocated_klinedata(::tigeropen::push::pb::KlineData* klinedata) {
  clear_body();
  if (klinedata) {
    set_has_klinedata();
    body_.klinedata_ = klinedata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.klineData)
}

// optional .tigeropen.push.pb.TickData tickData = 12;
inline bool PushData::has_tickdata() const {
  return body_case() == kTickData;
}
inline void PushData::set_has_tickdata() {
  _oneof_case_[0] = kTickData;
}
inline void PushData::clear_tickdata() {
  if (has_tickdata()) {
    delete body_.tickdata_;
    clear_has_body();
  }
}
inline  const ::tigeropen::push::pb::TickData& PushData::tickdata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.tickData)
  return has_tickdata()
      ? *body_.tickdata_
      : ::tigeropen::push::pb::TickData::default_instance();
}
inline ::tigeropen::push::pb::TickData* PushData::mutable_tickdata() {
  if (!has_tickdata()) {
    clear_body();
    set_has_tickdata();
    body_.tickdata_ = new ::tigeropen::push::pb::TickData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.tickData)
  return body_.tickdata_;
}
inline ::tigeropen::push::pb::TickData* PushData::release_tickdata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.tickData)
  if (has_tickdata()) {
    clear_has_body();
    ::tigeropen::push::pb::TickData* temp = body_.tickdata_;
    body_.tickdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PushData::set_allocated_tickdata(::tigeropen::push::pb::TickData* tickdata) {
  clear_body();
  if (tickdata) {
    set_has_tickdata();
    body_.tickdata_ = tickdata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.tickData)
}

inline bool PushData::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void PushData::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline PushData::BodyCase PushData::body_case() const {
  return PushData::BodyCase(_oneof_case_[0]);
}
inline const PushData* PushData::internal_default_instance() {
  return &PushData_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace push
}  // namespace tigeropen

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PushData_2eproto__INCLUDED
