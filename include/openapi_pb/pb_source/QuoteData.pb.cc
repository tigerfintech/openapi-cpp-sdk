// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QuoteData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "QuoteData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tigeropen {
namespace push {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* QuoteData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuoteData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuoteData_Minute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuoteData_Minute_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_QuoteData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_QuoteData_2eproto() {
  protobuf_AddDesc_QuoteData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "QuoteData.proto");
  GOOGLE_CHECK(file != NULL);
  QuoteData_descriptor_ = file->message_type(0);
  static const int QuoteData_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, servertimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, avgprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, latestprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, latestpricetimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, latesttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, preclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, hourtradingtag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, marketstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, asksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, asktimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, bidsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, bidtimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, openint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, tradetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, presettlement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, mintick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, mi_),
  };
  QuoteData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuoteData_descriptor_,
      QuoteData::internal_default_instance(),
      QuoteData_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuoteData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData, _internal_metadata_));
  QuoteData_Minute_descriptor_ = QuoteData_descriptor_->nested_type(0);
  static const int QuoteData_Minute_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData_Minute, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData_Minute, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData_Minute, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData_Minute, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData_Minute, o_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData_Minute, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData_Minute, l_),
  };
  QuoteData_Minute_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuoteData_Minute_descriptor_,
      QuoteData_Minute::internal_default_instance(),
      QuoteData_Minute_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuoteData_Minute),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteData_Minute, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_QuoteData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuoteData_descriptor_, QuoteData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuoteData_Minute_descriptor_, QuoteData_Minute::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_QuoteData_2eproto() {
  QuoteData_default_instance_.Shutdown();
  delete QuoteData_reflection_;
  QuoteData_Minute_default_instance_.Shutdown();
  delete QuoteData_Minute_reflection_;
}

void protobuf_InitDefaults_QuoteData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tigeropen::push::pb::protobuf_InitDefaults_SocketCommon_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  QuoteData_default_instance_.DefaultConstruct();
  QuoteData_Minute_default_instance_.DefaultConstruct();
  QuoteData_default_instance_.get_mutable()->InitAsDefaultInstance();
  QuoteData_Minute_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_QuoteData_2eproto_once_);
void protobuf_InitDefaults_QuoteData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_QuoteData_2eproto_once_,
                 &protobuf_InitDefaults_QuoteData_2eproto_impl);
}
void protobuf_AddDesc_QuoteData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_QuoteData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017QuoteData.proto\022\021tigeropen.push.pb\032\022So"
    "cketCommon.proto\"\274\005\n\tQuoteData\022\016\n\006symbol"
    "\030\001 \001(\t\0227\n\004type\030\002 \001(\0162).tigeropen.push.pb"
    ".SocketCommon.QuoteType\022\021\n\ttimestamp\030\003 \001"
    "(\004\022\027\n\017serverTimestamp\030\004 \001(\004\022\020\n\010avgPrice\030"
    "\005 \001(\001\022\023\n\013latestPrice\030\006 \001(\001\022\034\n\024latestPric"
    "eTimestamp\030\007 \001(\004\022\022\n\nlatestTime\030\010 \001(\t\022\020\n\010"
    "preClose\030\t \001(\001\022\016\n\006volume\030\n \001(\022\022\016\n\006amount"
    "\030\013 \001(\001\022\014\n\004open\030\014 \001(\001\022\014\n\004high\030\r \001(\001\022\013\n\003lo"
    "w\030\016 \001(\001\022\026\n\016hourTradingTag\030\017 \001(\t\022\024\n\014marke"
    "tStatus\030\020 \001(\t\022\020\n\010askPrice\030\021 \001(\001\022\017\n\007askSi"
    "ze\030\022 \001(\022\022\024\n\014askTimestamp\030\023 \001(\004\022\020\n\010bidPri"
    "ce\030\024 \001(\001\022\017\n\007bidSize\030\025 \001(\022\022\024\n\014bidTimestam"
    "p\030\026 \001(\004\022\022\n\nidentifier\030\027 \001(\t\022\017\n\007openInt\030\030"
    " \001(\022\022\021\n\ttradeTime\030\031 \001(\004\022\025\n\rpreSettlement"
    "\030\032 \001(\001\022\017\n\007minTick\030\033 \001(\002\022/\n\002mi\030\034 \001(\0132#.ti"
    "geropen.push.pb.QuoteData.Minute\032U\n\006Minu"
    "te\022\t\n\001p\030\001 \001(\001\022\t\n\001a\030\002 \001(\001\022\t\n\001t\030\003 \001(\004\022\t\n\001v"
    "\030\004 \001(\022\022\t\n\001o\030\005 \001(\001\022\t\n\001h\030\006 \001(\001\022\t\n\001l\030\007 \001(\001b"
    "\006proto3", 767);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "QuoteData.proto", &protobuf_RegisterTypes);
  ::tigeropen::push::pb::protobuf_AddDesc_SocketCommon_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_QuoteData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_QuoteData_2eproto_once_);
void protobuf_AddDesc_QuoteData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_QuoteData_2eproto_once_,
                 &protobuf_AddDesc_QuoteData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_QuoteData_2eproto {
  StaticDescriptorInitializer_QuoteData_2eproto() {
    protobuf_AddDesc_QuoteData_2eproto();
  }
} static_descriptor_initializer_QuoteData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuoteData_Minute::kPFieldNumber;
const int QuoteData_Minute::kAFieldNumber;
const int QuoteData_Minute::kTFieldNumber;
const int QuoteData_Minute::kVFieldNumber;
const int QuoteData_Minute::kOFieldNumber;
const int QuoteData_Minute::kHFieldNumber;
const int QuoteData_Minute::kLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuoteData_Minute::QuoteData_Minute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_QuoteData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.QuoteData.Minute)
}

void QuoteData_Minute::InitAsDefaultInstance() {
}

QuoteData_Minute::QuoteData_Minute(const QuoteData_Minute& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.QuoteData.Minute)
}

void QuoteData_Minute::SharedCtor() {
  ::memset(&p_, 0, reinterpret_cast<char*>(&l_) -
    reinterpret_cast<char*>(&p_) + sizeof(l_));
  _cached_size_ = 0;
}

QuoteData_Minute::~QuoteData_Minute() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.QuoteData.Minute)
  SharedDtor();
}

void QuoteData_Minute::SharedDtor() {
}

void QuoteData_Minute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuoteData_Minute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuoteData_Minute_descriptor_;
}

const QuoteData_Minute& QuoteData_Minute::default_instance() {
  protobuf_InitDefaults_QuoteData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QuoteData_Minute> QuoteData_Minute_default_instance_;

QuoteData_Minute* QuoteData_Minute::New(::google::protobuf::Arena* arena) const {
  QuoteData_Minute* n = new QuoteData_Minute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuoteData_Minute::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.QuoteData.Minute)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QuoteData_Minute, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QuoteData_Minute*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(p_, l_);

#undef ZR_HELPER_
#undef ZR_

}

bool QuoteData_Minute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.QuoteData.Minute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double p = 1;
      case 1: {
        if (tag == 9) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_a;
        break;
      }

      // optional double a = 2;
      case 2: {
        if (tag == 17) {
         parse_a:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_t;
        break;
      }

      // optional uint64 t = 3;
      case 3: {
        if (tag == 24) {
         parse_t:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_v;
        break;
      }

      // optional sint64 v = 4;
      case 4: {
        if (tag == 32) {
         parse_v:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_o;
        break;
      }

      // optional double o = 5;
      case 5: {
        if (tag == 41) {
         parse_o:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &o_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_h;
        break;
      }

      // optional double h = 6;
      case 6: {
        if (tag == 49) {
         parse_h:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_l;
        break;
      }

      // optional double l = 7;
      case 7: {
        if (tag == 57) {
         parse_l:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.QuoteData.Minute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.QuoteData.Minute)
  return false;
#undef DO_
}

void QuoteData_Minute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.QuoteData.Minute)
  // optional double p = 1;
  if (this->p() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->p(), output);
  }

  // optional double a = 2;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->a(), output);
  }

  // optional uint64 t = 3;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->t(), output);
  }

  // optional sint64 v = 4;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->v(), output);
  }

  // optional double o = 5;
  if (this->o() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->o(), output);
  }

  // optional double h = 6;
  if (this->h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->h(), output);
  }

  // optional double l = 7;
  if (this->l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->l(), output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.QuoteData.Minute)
}

::google::protobuf::uint8* QuoteData_Minute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.QuoteData.Minute)
  // optional double p = 1;
  if (this->p() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->p(), target);
  }

  // optional double a = 2;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->a(), target);
  }

  // optional uint64 t = 3;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->t(), target);
  }

  // optional sint64 v = 4;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->v(), target);
  }

  // optional double o = 5;
  if (this->o() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->o(), target);
  }

  // optional double h = 6;
  if (this->h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->h(), target);
  }

  // optional double l = 7;
  if (this->l() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->l(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.QuoteData.Minute)
  return target;
}

size_t QuoteData_Minute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.QuoteData.Minute)
  size_t total_size = 0;

  // optional double p = 1;
  if (this->p() != 0) {
    total_size += 1 + 8;
  }

  // optional double a = 2;
  if (this->a() != 0) {
    total_size += 1 + 8;
  }

  // optional uint64 t = 3;
  if (this->t() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->t());
  }

  // optional sint64 v = 4;
  if (this->v() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->v());
  }

  // optional double o = 5;
  if (this->o() != 0) {
    total_size += 1 + 8;
  }

  // optional double h = 6;
  if (this->h() != 0) {
    total_size += 1 + 8;
  }

  // optional double l = 7;
  if (this->l() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuoteData_Minute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.QuoteData.Minute)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuoteData_Minute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuoteData_Minute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.QuoteData.Minute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.QuoteData.Minute)
    UnsafeMergeFrom(*source);
  }
}

void QuoteData_Minute::MergeFrom(const QuoteData_Minute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.QuoteData.Minute)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QuoteData_Minute::UnsafeMergeFrom(const QuoteData_Minute& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.p() != 0) {
    set_p(from.p());
  }
  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.t() != 0) {
    set_t(from.t());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.o() != 0) {
    set_o(from.o());
  }
  if (from.h() != 0) {
    set_h(from.h());
  }
  if (from.l() != 0) {
    set_l(from.l());
  }
}

void QuoteData_Minute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.QuoteData.Minute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuoteData_Minute::CopyFrom(const QuoteData_Minute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.QuoteData.Minute)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QuoteData_Minute::IsInitialized() const {

  return true;
}

void QuoteData_Minute::Swap(QuoteData_Minute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuoteData_Minute::InternalSwap(QuoteData_Minute* other) {
  std::swap(p_, other->p_);
  std::swap(a_, other->a_);
  std::swap(t_, other->t_);
  std::swap(v_, other->v_);
  std::swap(o_, other->o_);
  std::swap(h_, other->h_);
  std::swap(l_, other->l_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuoteData_Minute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuoteData_Minute_descriptor_;
  metadata.reflection = QuoteData_Minute_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuoteData::kSymbolFieldNumber;
const int QuoteData::kTypeFieldNumber;
const int QuoteData::kTimestampFieldNumber;
const int QuoteData::kServerTimestampFieldNumber;
const int QuoteData::kAvgPriceFieldNumber;
const int QuoteData::kLatestPriceFieldNumber;
const int QuoteData::kLatestPriceTimestampFieldNumber;
const int QuoteData::kLatestTimeFieldNumber;
const int QuoteData::kPreCloseFieldNumber;
const int QuoteData::kVolumeFieldNumber;
const int QuoteData::kAmountFieldNumber;
const int QuoteData::kOpenFieldNumber;
const int QuoteData::kHighFieldNumber;
const int QuoteData::kLowFieldNumber;
const int QuoteData::kHourTradingTagFieldNumber;
const int QuoteData::kMarketStatusFieldNumber;
const int QuoteData::kAskPriceFieldNumber;
const int QuoteData::kAskSizeFieldNumber;
const int QuoteData::kAskTimestampFieldNumber;
const int QuoteData::kBidPriceFieldNumber;
const int QuoteData::kBidSizeFieldNumber;
const int QuoteData::kBidTimestampFieldNumber;
const int QuoteData::kIdentifierFieldNumber;
const int QuoteData::kOpenIntFieldNumber;
const int QuoteData::kTradeTimeFieldNumber;
const int QuoteData::kPreSettlementFieldNumber;
const int QuoteData::kMinTickFieldNumber;
const int QuoteData::kMiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuoteData::QuoteData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_QuoteData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.QuoteData)
}

void QuoteData::InitAsDefaultInstance() {
  mi_ = const_cast< ::tigeropen::push::pb::QuoteData_Minute*>(
      ::tigeropen::push::pb::QuoteData_Minute::internal_default_instance());
}

QuoteData::QuoteData(const QuoteData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.QuoteData)
}

void QuoteData::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latesttime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hourtradingtag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketstatus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mi_ = NULL;
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&presettlement_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(presettlement_));
  _cached_size_ = 0;
}

QuoteData::~QuoteData() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.QuoteData)
  SharedDtor();
}

void QuoteData::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latesttime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hourtradingtag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketstatus_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &QuoteData_default_instance_.get()) {
    delete mi_;
  }
}

void QuoteData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuoteData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuoteData_descriptor_;
}

const QuoteData& QuoteData::default_instance() {
  protobuf_InitDefaults_QuoteData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QuoteData> QuoteData_default_instance_;

QuoteData* QuoteData::New(::google::protobuf::Arena* arena) const {
  QuoteData* n = new QuoteData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuoteData::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.QuoteData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QuoteData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QuoteData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_, latestpricetimestamp_);
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  latesttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(preclose_, low_);
  hourtradingtag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(askprice_, openint_);
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(tradetime_, presettlement_);
  mintick_ = 0;
  if (GetArenaNoVirtual() == NULL && mi_ != NULL) delete mi_;
  mi_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool QuoteData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.QuoteData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.QuoteData.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::tigeropen::push::pb::SocketCommon_QuoteType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_serverTimestamp;
        break;
      }

      // optional uint64 serverTimestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_serverTimestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &servertimestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_avgPrice;
        break;
      }

      // optional double avgPrice = 5;
      case 5: {
        if (tag == 41) {
         parse_avgPrice:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avgprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_latestPrice;
        break;
      }

      // optional double latestPrice = 6;
      case 6: {
        if (tag == 49) {
         parse_latestPrice:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latestprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_latestPriceTimestamp;
        break;
      }

      // optional uint64 latestPriceTimestamp = 7;
      case 7: {
        if (tag == 56) {
         parse_latestPriceTimestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &latestpricetimestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_latestTime;
        break;
      }

      // optional string latestTime = 8;
      case 8: {
        if (tag == 66) {
         parse_latestTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latesttime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->latesttime().data(), this->latesttime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.QuoteData.latestTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_preClose;
        break;
      }

      // optional double preClose = 9;
      case 9: {
        if (tag == 73) {
         parse_preClose:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preclose_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_volume;
        break;
      }

      // optional sint64 volume = 10;
      case 10: {
        if (tag == 80) {
         parse_volume:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_amount;
        break;
      }

      // optional double amount = 11;
      case 11: {
        if (tag == 89) {
         parse_amount:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_open;
        break;
      }

      // optional double open = 12;
      case 12: {
        if (tag == 97) {
         parse_open:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_high;
        break;
      }

      // optional double high = 13;
      case 13: {
        if (tag == 105) {
         parse_high:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_low;
        break;
      }

      // optional double low = 14;
      case 14: {
        if (tag == 113) {
         parse_low:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_hourTradingTag;
        break;
      }

      // optional string hourTradingTag = 15;
      case 15: {
        if (tag == 122) {
         parse_hourTradingTag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hourtradingtag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hourtradingtag().data(), this->hourtradingtag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.QuoteData.hourTradingTag"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_marketStatus;
        break;
      }

      // optional string marketStatus = 16;
      case 16: {
        if (tag == 130) {
         parse_marketStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketstatus()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketstatus().data(), this->marketstatus().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.QuoteData.marketStatus"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_askPrice;
        break;
      }

      // optional double askPrice = 17;
      case 17: {
        if (tag == 137) {
         parse_askPrice:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_askSize;
        break;
      }

      // optional sint64 askSize = 18;
      case 18: {
        if (tag == 144) {
         parse_askSize:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &asksize_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_askTimestamp;
        break;
      }

      // optional uint64 askTimestamp = 19;
      case 19: {
        if (tag == 152) {
         parse_askTimestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &asktimestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_bidPrice;
        break;
      }

      // optional double bidPrice = 20;
      case 20: {
        if (tag == 161) {
         parse_bidPrice:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_bidSize;
        break;
      }

      // optional sint64 bidSize = 21;
      case 21: {
        if (tag == 168) {
         parse_bidSize:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &bidsize_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_bidTimestamp;
        break;
      }

      // optional uint64 bidTimestamp = 22;
      case 22: {
        if (tag == 176) {
         parse_bidTimestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bidtimestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_identifier;
        break;
      }

      // optional string identifier = 23;
      case 23: {
        if (tag == 186) {
         parse_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.QuoteData.identifier"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_openInt;
        break;
      }

      // optional sint64 openInt = 24;
      case 24: {
        if (tag == 192) {
         parse_openInt:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &openint_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_tradeTime;
        break;
      }

      // optional uint64 tradeTime = 25;
      case 25: {
        if (tag == 200) {
         parse_tradeTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tradetime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_preSettlement;
        break;
      }

      // optional double preSettlement = 26;
      case 26: {
        if (tag == 209) {
         parse_preSettlement:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &presettlement_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_minTick;
        break;
      }

      // optional float minTick = 27;
      case 27: {
        if (tag == 221) {
         parse_minTick:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mintick_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_mi;
        break;
      }

      // optional .tigeropen.push.pb.QuoteData.Minute mi = 28;
      case 28: {
        if (tag == 226) {
         parse_mi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.QuoteData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.QuoteData)
  return false;
#undef DO_
}

void QuoteData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.QuoteData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteData.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // optional uint64 serverTimestamp = 4;
  if (this->servertimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->servertimestamp(), output);
  }

  // optional double avgPrice = 5;
  if (this->avgprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->avgprice(), output);
  }

  // optional double latestPrice = 6;
  if (this->latestprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->latestprice(), output);
  }

  // optional uint64 latestPriceTimestamp = 7;
  if (this->latestpricetimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->latestpricetimestamp(), output);
  }

  // optional string latestTime = 8;
  if (this->latesttime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->latesttime().data(), this->latesttime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteData.latestTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->latesttime(), output);
  }

  // optional double preClose = 9;
  if (this->preclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->preclose(), output);
  }

  // optional sint64 volume = 10;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(10, this->volume(), output);
  }

  // optional double amount = 11;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->amount(), output);
  }

  // optional double open = 12;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->open(), output);
  }

  // optional double high = 13;
  if (this->high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->high(), output);
  }

  // optional double low = 14;
  if (this->low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->low(), output);
  }

  // optional string hourTradingTag = 15;
  if (this->hourtradingtag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hourtradingtag().data(), this->hourtradingtag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteData.hourTradingTag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->hourtradingtag(), output);
  }

  // optional string marketStatus = 16;
  if (this->marketstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketstatus().data(), this->marketstatus().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteData.marketStatus");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->marketstatus(), output);
  }

  // optional double askPrice = 17;
  if (this->askprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->askprice(), output);
  }

  // optional sint64 askSize = 18;
  if (this->asksize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(18, this->asksize(), output);
  }

  // optional uint64 askTimestamp = 19;
  if (this->asktimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->asktimestamp(), output);
  }

  // optional double bidPrice = 20;
  if (this->bidprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->bidprice(), output);
  }

  // optional sint64 bidSize = 21;
  if (this->bidsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(21, this->bidsize(), output);
  }

  // optional uint64 bidTimestamp = 22;
  if (this->bidtimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->bidtimestamp(), output);
  }

  // optional string identifier = 23;
  if (this->identifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteData.identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->identifier(), output);
  }

  // optional sint64 openInt = 24;
  if (this->openint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(24, this->openint(), output);
  }

  // optional uint64 tradeTime = 25;
  if (this->tradetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->tradetime(), output);
  }

  // optional double preSettlement = 26;
  if (this->presettlement() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->presettlement(), output);
  }

  // optional float minTick = 27;
  if (this->mintick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->mintick(), output);
  }

  // optional .tigeropen.push.pb.QuoteData.Minute mi = 28;
  if (this->has_mi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->mi_, output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.QuoteData)
}

::google::protobuf::uint8* QuoteData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.QuoteData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteData.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // optional uint64 serverTimestamp = 4;
  if (this->servertimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->servertimestamp(), target);
  }

  // optional double avgPrice = 5;
  if (this->avgprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->avgprice(), target);
  }

  // optional double latestPrice = 6;
  if (this->latestprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->latestprice(), target);
  }

  // optional uint64 latestPriceTimestamp = 7;
  if (this->latestpricetimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->latestpricetimestamp(), target);
  }

  // optional string latestTime = 8;
  if (this->latesttime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->latesttime().data(), this->latesttime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteData.latestTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->latesttime(), target);
  }

  // optional double preClose = 9;
  if (this->preclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->preclose(), target);
  }

  // optional sint64 volume = 10;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(10, this->volume(), target);
  }

  // optional double amount = 11;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->amount(), target);
  }

  // optional double open = 12;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->open(), target);
  }

  // optional double high = 13;
  if (this->high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->high(), target);
  }

  // optional double low = 14;
  if (this->low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->low(), target);
  }

  // optional string hourTradingTag = 15;
  if (this->hourtradingtag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hourtradingtag().data(), this->hourtradingtag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteData.hourTradingTag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->hourtradingtag(), target);
  }

  // optional string marketStatus = 16;
  if (this->marketstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketstatus().data(), this->marketstatus().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteData.marketStatus");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->marketstatus(), target);
  }

  // optional double askPrice = 17;
  if (this->askprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->askprice(), target);
  }

  // optional sint64 askSize = 18;
  if (this->asksize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(18, this->asksize(), target);
  }

  // optional uint64 askTimestamp = 19;
  if (this->asktimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->asktimestamp(), target);
  }

  // optional double bidPrice = 20;
  if (this->bidprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->bidprice(), target);
  }

  // optional sint64 bidSize = 21;
  if (this->bidsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(21, this->bidsize(), target);
  }

  // optional uint64 bidTimestamp = 22;
  if (this->bidtimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->bidtimestamp(), target);
  }

  // optional string identifier = 23;
  if (this->identifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteData.identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->identifier(), target);
  }

  // optional sint64 openInt = 24;
  if (this->openint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(24, this->openint(), target);
  }

  // optional uint64 tradeTime = 25;
  if (this->tradetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->tradetime(), target);
  }

  // optional double preSettlement = 26;
  if (this->presettlement() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->presettlement(), target);
  }

  // optional float minTick = 27;
  if (this->mintick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->mintick(), target);
  }

  // optional .tigeropen.push.pb.QuoteData.Minute mi = 28;
  if (this->has_mi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->mi_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.QuoteData)
  return target;
}

size_t QuoteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.QuoteData)
  size_t total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // optional uint64 serverTimestamp = 4;
  if (this->servertimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->servertimestamp());
  }

  // optional double avgPrice = 5;
  if (this->avgprice() != 0) {
    total_size += 1 + 8;
  }

  // optional double latestPrice = 6;
  if (this->latestprice() != 0) {
    total_size += 1 + 8;
  }

  // optional uint64 latestPriceTimestamp = 7;
  if (this->latestpricetimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->latestpricetimestamp());
  }

  // optional string latestTime = 8;
  if (this->latesttime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->latesttime());
  }

  // optional double preClose = 9;
  if (this->preclose() != 0) {
    total_size += 1 + 8;
  }

  // optional sint64 volume = 10;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->volume());
  }

  // optional double amount = 11;
  if (this->amount() != 0) {
    total_size += 1 + 8;
  }

  // optional double open = 12;
  if (this->open() != 0) {
    total_size += 1 + 8;
  }

  // optional double high = 13;
  if (this->high() != 0) {
    total_size += 1 + 8;
  }

  // optional double low = 14;
  if (this->low() != 0) {
    total_size += 1 + 8;
  }

  // optional string hourTradingTag = 15;
  if (this->hourtradingtag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hourtradingtag());
  }

  // optional string marketStatus = 16;
  if (this->marketstatus().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketstatus());
  }

  // optional double askPrice = 17;
  if (this->askprice() != 0) {
    total_size += 2 + 8;
  }

  // optional sint64 askSize = 18;
  if (this->asksize() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->asksize());
  }

  // optional uint64 askTimestamp = 19;
  if (this->asktimestamp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->asktimestamp());
  }

  // optional double bidPrice = 20;
  if (this->bidprice() != 0) {
    total_size += 2 + 8;
  }

  // optional sint64 bidSize = 21;
  if (this->bidsize() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->bidsize());
  }

  // optional uint64 bidTimestamp = 22;
  if (this->bidtimestamp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bidtimestamp());
  }

  // optional string identifier = 23;
  if (this->identifier().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identifier());
  }

  // optional sint64 openInt = 24;
  if (this->openint() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->openint());
  }

  // optional uint64 tradeTime = 25;
  if (this->tradetime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tradetime());
  }

  // optional double preSettlement = 26;
  if (this->presettlement() != 0) {
    total_size += 2 + 8;
  }

  // optional float minTick = 27;
  if (this->mintick() != 0) {
    total_size += 2 + 4;
  }

  // optional .tigeropen.push.pb.QuoteData.Minute mi = 28;
  if (this->has_mi()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mi_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuoteData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.QuoteData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuoteData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuoteData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.QuoteData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.QuoteData)
    UnsafeMergeFrom(*source);
  }
}

void QuoteData::MergeFrom(const QuoteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.QuoteData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QuoteData::UnsafeMergeFrom(const QuoteData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.servertimestamp() != 0) {
    set_servertimestamp(from.servertimestamp());
  }
  if (from.avgprice() != 0) {
    set_avgprice(from.avgprice());
  }
  if (from.latestprice() != 0) {
    set_latestprice(from.latestprice());
  }
  if (from.latestpricetimestamp() != 0) {
    set_latestpricetimestamp(from.latestpricetimestamp());
  }
  if (from.latesttime().size() > 0) {

    latesttime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latesttime_);
  }
  if (from.preclose() != 0) {
    set_preclose(from.preclose());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.open() != 0) {
    set_open(from.open());
  }
  if (from.high() != 0) {
    set_high(from.high());
  }
  if (from.low() != 0) {
    set_low(from.low());
  }
  if (from.hourtradingtag().size() > 0) {

    hourtradingtag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hourtradingtag_);
  }
  if (from.marketstatus().size() > 0) {

    marketstatus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketstatus_);
  }
  if (from.askprice() != 0) {
    set_askprice(from.askprice());
  }
  if (from.asksize() != 0) {
    set_asksize(from.asksize());
  }
  if (from.asktimestamp() != 0) {
    set_asktimestamp(from.asktimestamp());
  }
  if (from.bidprice() != 0) {
    set_bidprice(from.bidprice());
  }
  if (from.bidsize() != 0) {
    set_bidsize(from.bidsize());
  }
  if (from.bidtimestamp() != 0) {
    set_bidtimestamp(from.bidtimestamp());
  }
  if (from.identifier().size() > 0) {

    identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifier_);
  }
  if (from.openint() != 0) {
    set_openint(from.openint());
  }
  if (from.tradetime() != 0) {
    set_tradetime(from.tradetime());
  }
  if (from.presettlement() != 0) {
    set_presettlement(from.presettlement());
  }
  if (from.mintick() != 0) {
    set_mintick(from.mintick());
  }
  if (from.has_mi()) {
    mutable_mi()->::tigeropen::push::pb::QuoteData_Minute::MergeFrom(from.mi());
  }
}

void QuoteData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.QuoteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuoteData::CopyFrom(const QuoteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.QuoteData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QuoteData::IsInitialized() const {

  return true;
}

void QuoteData::Swap(QuoteData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuoteData::InternalSwap(QuoteData* other) {
  symbol_.Swap(&other->symbol_);
  std::swap(type_, other->type_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(servertimestamp_, other->servertimestamp_);
  std::swap(avgprice_, other->avgprice_);
  std::swap(latestprice_, other->latestprice_);
  std::swap(latestpricetimestamp_, other->latestpricetimestamp_);
  latesttime_.Swap(&other->latesttime_);
  std::swap(preclose_, other->preclose_);
  std::swap(volume_, other->volume_);
  std::swap(amount_, other->amount_);
  std::swap(open_, other->open_);
  std::swap(high_, other->high_);
  std::swap(low_, other->low_);
  hourtradingtag_.Swap(&other->hourtradingtag_);
  marketstatus_.Swap(&other->marketstatus_);
  std::swap(askprice_, other->askprice_);
  std::swap(asksize_, other->asksize_);
  std::swap(asktimestamp_, other->asktimestamp_);
  std::swap(bidprice_, other->bidprice_);
  std::swap(bidsize_, other->bidsize_);
  std::swap(bidtimestamp_, other->bidtimestamp_);
  identifier_.Swap(&other->identifier_);
  std::swap(openint_, other->openint_);
  std::swap(tradetime_, other->tradetime_);
  std::swap(presettlement_, other->presettlement_);
  std::swap(mintick_, other->mintick_);
  std::swap(mi_, other->mi_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuoteData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuoteData_descriptor_;
  metadata.reflection = QuoteData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuoteData_Minute

// optional double p = 1;
void QuoteData_Minute::clear_p() {
  p_ = 0;
}
double QuoteData_Minute::p() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.Minute.p)
  return p_;
}
void QuoteData_Minute::set_p(double value) {
  
  p_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.Minute.p)
}

// optional double a = 2;
void QuoteData_Minute::clear_a() {
  a_ = 0;
}
double QuoteData_Minute::a() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.Minute.a)
  return a_;
}
void QuoteData_Minute::set_a(double value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.Minute.a)
}

// optional uint64 t = 3;
void QuoteData_Minute::clear_t() {
  t_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 QuoteData_Minute::t() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.Minute.t)
  return t_;
}
void QuoteData_Minute::set_t(::google::protobuf::uint64 value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.Minute.t)
}

// optional sint64 v = 4;
void QuoteData_Minute::clear_v() {
  v_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QuoteData_Minute::v() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.Minute.v)
  return v_;
}
void QuoteData_Minute::set_v(::google::protobuf::int64 value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.Minute.v)
}

// optional double o = 5;
void QuoteData_Minute::clear_o() {
  o_ = 0;
}
double QuoteData_Minute::o() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.Minute.o)
  return o_;
}
void QuoteData_Minute::set_o(double value) {
  
  o_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.Minute.o)
}

// optional double h = 6;
void QuoteData_Minute::clear_h() {
  h_ = 0;
}
double QuoteData_Minute::h() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.Minute.h)
  return h_;
}
void QuoteData_Minute::set_h(double value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.Minute.h)
}

// optional double l = 7;
void QuoteData_Minute::clear_l() {
  l_ = 0;
}
double QuoteData_Minute::l() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.Minute.l)
  return l_;
}
void QuoteData_Minute::set_l(double value) {
  
  l_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.Minute.l)
}

inline const QuoteData_Minute* QuoteData_Minute::internal_default_instance() {
  return &QuoteData_Minute_default_instance_.get();
}
// -------------------------------------------------------------------

// QuoteData

// optional string symbol = 1;
void QuoteData::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuoteData::symbol() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteData::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.symbol)
}
void QuoteData::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteData.symbol)
}
void QuoteData::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteData.symbol)
}
::std::string* QuoteData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteData.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuoteData::release_symbol() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteData.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteData.symbol)
}

// optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
void QuoteData::clear_type() {
  type_ = 0;
}
::tigeropen::push::pb::SocketCommon_QuoteType QuoteData::type() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.type)
  return static_cast< ::tigeropen::push::pb::SocketCommon_QuoteType >(type_);
}
void QuoteData::set_type(::tigeropen::push::pb::SocketCommon_QuoteType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.type)
}

// optional uint64 timestamp = 3;
void QuoteData::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 QuoteData::timestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.timestamp)
  return timestamp_;
}
void QuoteData::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.timestamp)
}

// optional uint64 serverTimestamp = 4;
void QuoteData::clear_servertimestamp() {
  servertimestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 QuoteData::servertimestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.serverTimestamp)
  return servertimestamp_;
}
void QuoteData::set_servertimestamp(::google::protobuf::uint64 value) {
  
  servertimestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.serverTimestamp)
}

// optional double avgPrice = 5;
void QuoteData::clear_avgprice() {
  avgprice_ = 0;
}
double QuoteData::avgprice() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.avgPrice)
  return avgprice_;
}
void QuoteData::set_avgprice(double value) {
  
  avgprice_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.avgPrice)
}

// optional double latestPrice = 6;
void QuoteData::clear_latestprice() {
  latestprice_ = 0;
}
double QuoteData::latestprice() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.latestPrice)
  return latestprice_;
}
void QuoteData::set_latestprice(double value) {
  
  latestprice_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.latestPrice)
}

// optional uint64 latestPriceTimestamp = 7;
void QuoteData::clear_latestpricetimestamp() {
  latestpricetimestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 QuoteData::latestpricetimestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.latestPriceTimestamp)
  return latestpricetimestamp_;
}
void QuoteData::set_latestpricetimestamp(::google::protobuf::uint64 value) {
  
  latestpricetimestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.latestPriceTimestamp)
}

// optional string latestTime = 8;
void QuoteData::clear_latesttime() {
  latesttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuoteData::latesttime() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.latestTime)
  return latesttime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteData::set_latesttime(const ::std::string& value) {
  
  latesttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.latestTime)
}
void QuoteData::set_latesttime(const char* value) {
  
  latesttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteData.latestTime)
}
void QuoteData::set_latesttime(const char* value, size_t size) {
  
  latesttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteData.latestTime)
}
::std::string* QuoteData::mutable_latesttime() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteData.latestTime)
  return latesttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuoteData::release_latesttime() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteData.latestTime)
  
  return latesttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteData::set_allocated_latesttime(::std::string* latesttime) {
  if (latesttime != NULL) {
    
  } else {
    
  }
  latesttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latesttime);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteData.latestTime)
}

// optional double preClose = 9;
void QuoteData::clear_preclose() {
  preclose_ = 0;
}
double QuoteData::preclose() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.preClose)
  return preclose_;
}
void QuoteData::set_preclose(double value) {
  
  preclose_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.preClose)
}

// optional sint64 volume = 10;
void QuoteData::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QuoteData::volume() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.volume)
  return volume_;
}
void QuoteData::set_volume(::google::protobuf::int64 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.volume)
}

// optional double amount = 11;
void QuoteData::clear_amount() {
  amount_ = 0;
}
double QuoteData::amount() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.amount)
  return amount_;
}
void QuoteData::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.amount)
}

// optional double open = 12;
void QuoteData::clear_open() {
  open_ = 0;
}
double QuoteData::open() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.open)
  return open_;
}
void QuoteData::set_open(double value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.open)
}

// optional double high = 13;
void QuoteData::clear_high() {
  high_ = 0;
}
double QuoteData::high() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.high)
  return high_;
}
void QuoteData::set_high(double value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.high)
}

// optional double low = 14;
void QuoteData::clear_low() {
  low_ = 0;
}
double QuoteData::low() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.low)
  return low_;
}
void QuoteData::set_low(double value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.low)
}

// optional string hourTradingTag = 15;
void QuoteData::clear_hourtradingtag() {
  hourtradingtag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuoteData::hourtradingtag() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.hourTradingTag)
  return hourtradingtag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteData::set_hourtradingtag(const ::std::string& value) {
  
  hourtradingtag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.hourTradingTag)
}
void QuoteData::set_hourtradingtag(const char* value) {
  
  hourtradingtag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteData.hourTradingTag)
}
void QuoteData::set_hourtradingtag(const char* value, size_t size) {
  
  hourtradingtag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteData.hourTradingTag)
}
::std::string* QuoteData::mutable_hourtradingtag() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteData.hourTradingTag)
  return hourtradingtag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuoteData::release_hourtradingtag() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteData.hourTradingTag)
  
  return hourtradingtag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteData::set_allocated_hourtradingtag(::std::string* hourtradingtag) {
  if (hourtradingtag != NULL) {
    
  } else {
    
  }
  hourtradingtag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hourtradingtag);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteData.hourTradingTag)
}

// optional string marketStatus = 16;
void QuoteData::clear_marketstatus() {
  marketstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuoteData::marketstatus() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.marketStatus)
  return marketstatus_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteData::set_marketstatus(const ::std::string& value) {
  
  marketstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.marketStatus)
}
void QuoteData::set_marketstatus(const char* value) {
  
  marketstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteData.marketStatus)
}
void QuoteData::set_marketstatus(const char* value, size_t size) {
  
  marketstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteData.marketStatus)
}
::std::string* QuoteData::mutable_marketstatus() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteData.marketStatus)
  return marketstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuoteData::release_marketstatus() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteData.marketStatus)
  
  return marketstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteData::set_allocated_marketstatus(::std::string* marketstatus) {
  if (marketstatus != NULL) {
    
  } else {
    
  }
  marketstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketstatus);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteData.marketStatus)
}

// optional double askPrice = 17;
void QuoteData::clear_askprice() {
  askprice_ = 0;
}
double QuoteData::askprice() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.askPrice)
  return askprice_;
}
void QuoteData::set_askprice(double value) {
  
  askprice_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.askPrice)
}

// optional sint64 askSize = 18;
void QuoteData::clear_asksize() {
  asksize_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QuoteData::asksize() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.askSize)
  return asksize_;
}
void QuoteData::set_asksize(::google::protobuf::int64 value) {
  
  asksize_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.askSize)
}

// optional uint64 askTimestamp = 19;
void QuoteData::clear_asktimestamp() {
  asktimestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 QuoteData::asktimestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.askTimestamp)
  return asktimestamp_;
}
void QuoteData::set_asktimestamp(::google::protobuf::uint64 value) {
  
  asktimestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.askTimestamp)
}

// optional double bidPrice = 20;
void QuoteData::clear_bidprice() {
  bidprice_ = 0;
}
double QuoteData::bidprice() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.bidPrice)
  return bidprice_;
}
void QuoteData::set_bidprice(double value) {
  
  bidprice_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.bidPrice)
}

// optional sint64 bidSize = 21;
void QuoteData::clear_bidsize() {
  bidsize_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QuoteData::bidsize() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.bidSize)
  return bidsize_;
}
void QuoteData::set_bidsize(::google::protobuf::int64 value) {
  
  bidsize_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.bidSize)
}

// optional uint64 bidTimestamp = 22;
void QuoteData::clear_bidtimestamp() {
  bidtimestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 QuoteData::bidtimestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.bidTimestamp)
  return bidtimestamp_;
}
void QuoteData::set_bidtimestamp(::google::protobuf::uint64 value) {
  
  bidtimestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.bidTimestamp)
}

// optional string identifier = 23;
void QuoteData::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuoteData::identifier() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.identifier)
  return identifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteData::set_identifier(const ::std::string& value) {
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.identifier)
}
void QuoteData::set_identifier(const char* value) {
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteData.identifier)
}
void QuoteData::set_identifier(const char* value, size_t size) {
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteData.identifier)
}
::std::string* QuoteData::mutable_identifier() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteData.identifier)
  return identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuoteData::release_identifier() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteData.identifier)
  
  return identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteData::set_allocated_identifier(::std::string* identifier) {
  if (identifier != NULL) {
    
  } else {
    
  }
  identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteData.identifier)
}

// optional sint64 openInt = 24;
void QuoteData::clear_openint() {
  openint_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QuoteData::openint() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.openInt)
  return openint_;
}
void QuoteData::set_openint(::google::protobuf::int64 value) {
  
  openint_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.openInt)
}

// optional uint64 tradeTime = 25;
void QuoteData::clear_tradetime() {
  tradetime_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 QuoteData::tradetime() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.tradeTime)
  return tradetime_;
}
void QuoteData::set_tradetime(::google::protobuf::uint64 value) {
  
  tradetime_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.tradeTime)
}

// optional double preSettlement = 26;
void QuoteData::clear_presettlement() {
  presettlement_ = 0;
}
double QuoteData::presettlement() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.preSettlement)
  return presettlement_;
}
void QuoteData::set_presettlement(double value) {
  
  presettlement_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.preSettlement)
}

// optional float minTick = 27;
void QuoteData::clear_mintick() {
  mintick_ = 0;
}
float QuoteData::mintick() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.minTick)
  return mintick_;
}
void QuoteData::set_mintick(float value) {
  
  mintick_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.minTick)
}

// optional .tigeropen.push.pb.QuoteData.Minute mi = 28;
bool QuoteData::has_mi() const {
  return this != internal_default_instance() && mi_ != NULL;
}
void QuoteData::clear_mi() {
  if (GetArenaNoVirtual() == NULL && mi_ != NULL) delete mi_;
  mi_ = NULL;
}
const ::tigeropen::push::pb::QuoteData_Minute& QuoteData::mi() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.mi)
  return mi_ != NULL ? *mi_
                         : *::tigeropen::push::pb::QuoteData_Minute::internal_default_instance();
}
::tigeropen::push::pb::QuoteData_Minute* QuoteData::mutable_mi() {
  
  if (mi_ == NULL) {
    mi_ = new ::tigeropen::push::pb::QuoteData_Minute;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteData.mi)
  return mi_;
}
::tigeropen::push::pb::QuoteData_Minute* QuoteData::release_mi() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteData.mi)
  
  ::tigeropen::push::pb::QuoteData_Minute* temp = mi_;
  mi_ = NULL;
  return temp;
}
void QuoteData::set_allocated_mi(::tigeropen::push::pb::QuoteData_Minute* mi) {
  delete mi_;
  mi_ = mi;
  if (mi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteData.mi)
}

inline const QuoteData* QuoteData::internal_default_instance() {
  return &QuoteData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace push
}  // namespace tigeropen

// @@protoc_insertion_point(global_scope)
