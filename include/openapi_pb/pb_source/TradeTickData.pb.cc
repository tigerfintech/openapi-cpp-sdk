// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TradeTickData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TradeTickData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tigeropen {
namespace push {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* TradeTickData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeTickData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeTickData_MergedVol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeTickData_MergedVol_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TradeTickData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_TradeTickData_2eproto() {
  protobuf_AddDesc_TradeTickData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TradeTickData.proto");
  GOOGLE_CHECK(file != NULL);
  TradeTickData_descriptor_ = file->message_type(0);
  static const int TradeTickData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTickData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTickData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTickData, cond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTickData, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTickData, pricebase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTickData, priceoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTickData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTickData, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTickData, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTickData, partcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTickData, quotelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTickData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTickData, sectype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTickData, mergedvols_),
  };
  TradeTickData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TradeTickData_descriptor_,
      TradeTickData::internal_default_instance(),
      TradeTickData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TradeTickData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTickData, _internal_metadata_));
  TradeTickData_MergedVol_descriptor_ = TradeTickData_descriptor_->nested_type(0);
  static const int TradeTickData_MergedVol_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTickData_MergedVol, mergetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTickData_MergedVol, vol_),
  };
  TradeTickData_MergedVol_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TradeTickData_MergedVol_descriptor_,
      TradeTickData_MergedVol::internal_default_instance(),
      TradeTickData_MergedVol_offsets_,
      -1,
      -1,
      -1,
      sizeof(TradeTickData_MergedVol),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeTickData_MergedVol, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TradeTickData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TradeTickData_descriptor_, TradeTickData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TradeTickData_MergedVol_descriptor_, TradeTickData_MergedVol::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TradeTickData_2eproto() {
  TradeTickData_default_instance_.Shutdown();
  delete TradeTickData_reflection_;
  TradeTickData_MergedVol_default_instance_.Shutdown();
  delete TradeTickData_MergedVol_reflection_;
}

void protobuf_InitDefaults_TradeTickData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  TradeTickData_default_instance_.DefaultConstruct();
  TradeTickData_MergedVol_default_instance_.DefaultConstruct();
  TradeTickData_default_instance_.get_mutable()->InitAsDefaultInstance();
  TradeTickData_MergedVol_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_TradeTickData_2eproto_once_);
void protobuf_InitDefaults_TradeTickData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_TradeTickData_2eproto_once_,
                 &protobuf_InitDefaults_TradeTickData_2eproto_impl);
}
void protobuf_AddDesc_TradeTickData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_TradeTickData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023TradeTickData.proto\022\021tigeropen.push.pb"
    "\"\324\002\n\rTradeTickData\022\016\n\006symbol\030\001 \001(\t\022\014\n\004ty"
    "pe\030\002 \001(\t\022\014\n\004cond\030\003 \001(\t\022\n\n\002sn\030\004 \001(\003\022\021\n\tpr"
    "iceBase\030\005 \001(\003\022\023\n\013priceOffset\030\006 \001(\005\022\014\n\004ti"
    "me\030\007 \003(\003\022\r\n\005price\030\010 \003(\003\022\016\n\006volume\030\t \003(\003\022"
    "\020\n\010partCode\030\n \003(\t\022\022\n\nquoteLevel\030\013 \001(\t\022\021\n"
    "\ttimestamp\030\014 \001(\004\022\017\n\007secType\030\r \001(\t\022>\n\nmer"
    "gedVols\030\016 \003(\0132*.tigeropen.push.pb.TradeT"
    "ickData.MergedVol\032,\n\tMergedVol\022\022\n\nmergeT"
    "imes\030\001 \001(\005\022\013\n\003vol\030\002 \003(\003b\006proto3", 391);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TradeTickData.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TradeTickData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_TradeTickData_2eproto_once_);
void protobuf_AddDesc_TradeTickData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_TradeTickData_2eproto_once_,
                 &protobuf_AddDesc_TradeTickData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TradeTickData_2eproto {
  StaticDescriptorInitializer_TradeTickData_2eproto() {
    protobuf_AddDesc_TradeTickData_2eproto();
  }
} static_descriptor_initializer_TradeTickData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeTickData_MergedVol::kMergeTimesFieldNumber;
const int TradeTickData_MergedVol::kVolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeTickData_MergedVol::TradeTickData_MergedVol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_TradeTickData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.TradeTickData.MergedVol)
}

void TradeTickData_MergedVol::InitAsDefaultInstance() {
}

TradeTickData_MergedVol::TradeTickData_MergedVol(const TradeTickData_MergedVol& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.TradeTickData.MergedVol)
}

void TradeTickData_MergedVol::SharedCtor() {
  mergetimes_ = 0;
  _cached_size_ = 0;
}

TradeTickData_MergedVol::~TradeTickData_MergedVol() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.TradeTickData.MergedVol)
  SharedDtor();
}

void TradeTickData_MergedVol::SharedDtor() {
}

void TradeTickData_MergedVol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeTickData_MergedVol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeTickData_MergedVol_descriptor_;
}

const TradeTickData_MergedVol& TradeTickData_MergedVol::default_instance() {
  protobuf_InitDefaults_TradeTickData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TradeTickData_MergedVol> TradeTickData_MergedVol_default_instance_;

TradeTickData_MergedVol* TradeTickData_MergedVol::New(::google::protobuf::Arena* arena) const {
  TradeTickData_MergedVol* n = new TradeTickData_MergedVol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TradeTickData_MergedVol::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.TradeTickData.MergedVol)
  mergetimes_ = 0;
  vol_.Clear();
}

bool TradeTickData_MergedVol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.TradeTickData.MergedVol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mergeTimes = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mergetimes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vol;
        break;
      }

      // repeated int64 vol = 2;
      case 2: {
        if (tag == 18) {
         parse_vol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_vol())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_vol())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.TradeTickData.MergedVol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.TradeTickData.MergedVol)
  return false;
#undef DO_
}

void TradeTickData_MergedVol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.TradeTickData.MergedVol)
  // optional int32 mergeTimes = 1;
  if (this->mergetimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mergetimes(), output);
  }

  // repeated int64 vol = 2;
  if (this->vol_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vol_cached_byte_size_);
  }
  for (int i = 0; i < this->vol_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->vol(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.TradeTickData.MergedVol)
}

::google::protobuf::uint8* TradeTickData_MergedVol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.TradeTickData.MergedVol)
  // optional int32 mergeTimes = 1;
  if (this->mergetimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mergetimes(), target);
  }

  // repeated int64 vol = 2;
  if (this->vol_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vol_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vol_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->vol(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.TradeTickData.MergedVol)
  return target;
}

size_t TradeTickData_MergedVol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.TradeTickData.MergedVol)
  size_t total_size = 0;

  // optional int32 mergeTimes = 1;
  if (this->mergetimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mergetimes());
  }

  // repeated int64 vol = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->vol_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->vol(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vol_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeTickData_MergedVol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.TradeTickData.MergedVol)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TradeTickData_MergedVol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeTickData_MergedVol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.TradeTickData.MergedVol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.TradeTickData.MergedVol)
    UnsafeMergeFrom(*source);
  }
}

void TradeTickData_MergedVol::MergeFrom(const TradeTickData_MergedVol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.TradeTickData.MergedVol)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TradeTickData_MergedVol::UnsafeMergeFrom(const TradeTickData_MergedVol& from) {
  GOOGLE_DCHECK(&from != this);
  vol_.UnsafeMergeFrom(from.vol_);
  if (from.mergetimes() != 0) {
    set_mergetimes(from.mergetimes());
  }
}

void TradeTickData_MergedVol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.TradeTickData.MergedVol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeTickData_MergedVol::CopyFrom(const TradeTickData_MergedVol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.TradeTickData.MergedVol)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TradeTickData_MergedVol::IsInitialized() const {

  return true;
}

void TradeTickData_MergedVol::Swap(TradeTickData_MergedVol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeTickData_MergedVol::InternalSwap(TradeTickData_MergedVol* other) {
  std::swap(mergetimes_, other->mergetimes_);
  vol_.UnsafeArenaSwap(&other->vol_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TradeTickData_MergedVol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeTickData_MergedVol_descriptor_;
  metadata.reflection = TradeTickData_MergedVol_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeTickData::kSymbolFieldNumber;
const int TradeTickData::kTypeFieldNumber;
const int TradeTickData::kCondFieldNumber;
const int TradeTickData::kSnFieldNumber;
const int TradeTickData::kPriceBaseFieldNumber;
const int TradeTickData::kPriceOffsetFieldNumber;
const int TradeTickData::kTimeFieldNumber;
const int TradeTickData::kPriceFieldNumber;
const int TradeTickData::kVolumeFieldNumber;
const int TradeTickData::kPartCodeFieldNumber;
const int TradeTickData::kQuoteLevelFieldNumber;
const int TradeTickData::kTimestampFieldNumber;
const int TradeTickData::kSecTypeFieldNumber;
const int TradeTickData::kMergedVolsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeTickData::TradeTickData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_TradeTickData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.TradeTickData)
}

void TradeTickData::InitAsDefaultInstance() {
}

TradeTickData::TradeTickData(const TradeTickData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.TradeTickData)
}

void TradeTickData::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cond_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quotelevel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sectype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sn_, 0, reinterpret_cast<char*>(&priceoffset_) -
    reinterpret_cast<char*>(&sn_) + sizeof(priceoffset_));
  _cached_size_ = 0;
}

TradeTickData::~TradeTickData() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.TradeTickData)
  SharedDtor();
}

void TradeTickData::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cond_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quotelevel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sectype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TradeTickData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeTickData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeTickData_descriptor_;
}

const TradeTickData& TradeTickData::default_instance() {
  protobuf_InitDefaults_TradeTickData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TradeTickData> TradeTickData_default_instance_;

TradeTickData* TradeTickData::New(::google::protobuf::Arena* arena) const {
  TradeTickData* n = new TradeTickData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TradeTickData::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.TradeTickData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TradeTickData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TradeTickData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sn_, pricebase_);
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cond_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  priceoffset_ = 0;
  quotelevel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_ULONGLONG(0);
  sectype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  time_.Clear();
  price_.Clear();
  volume_.Clear();
  partcode_.Clear();
  mergedvols_.Clear();
}

bool TradeTickData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.TradeTickData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.TradeTickData.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.TradeTickData.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cond;
        break;
      }

      // optional string cond = 3;
      case 3: {
        if (tag == 26) {
         parse_cond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cond()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cond().data(), this->cond().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.TradeTickData.cond"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sn;
        break;
      }

      // optional int64 sn = 4;
      case 4: {
        if (tag == 32) {
         parse_sn:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_priceBase;
        break;
      }

      // optional int64 priceBase = 5;
      case 5: {
        if (tag == 40) {
         parse_priceBase:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pricebase_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_priceOffset;
        break;
      }

      // optional int32 priceOffset = 6;
      case 6: {
        if (tag == 48) {
         parse_priceOffset:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priceoffset_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_time;
        break;
      }

      // repeated int64 time = 7;
      case 7: {
        if (tag == 58) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_time())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 58, input, this->mutable_time())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_price;
        break;
      }

      // repeated int64 price = 8;
      case 8: {
        if (tag == 66) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_price())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 66, input, this->mutable_price())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_volume;
        break;
      }

      // repeated int64 volume = 9;
      case 9: {
        if (tag == 74) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_volume())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 74, input, this->mutable_volume())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_partCode;
        break;
      }

      // repeated string partCode = 10;
      case 10: {
        if (tag == 82) {
         parse_partCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_partcode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partcode(this->partcode_size() - 1).data(),
            this->partcode(this->partcode_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.TradeTickData.partCode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_partCode;
        if (input->ExpectTag(90)) goto parse_quoteLevel;
        break;
      }

      // optional string quoteLevel = 11;
      case 11: {
        if (tag == 90) {
         parse_quoteLevel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quotelevel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->quotelevel().data(), this->quotelevel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.TradeTickData.quoteLevel"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 12;
      case 12: {
        if (tag == 96) {
         parse_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_secType;
        break;
      }

      // optional string secType = 13;
      case 13: {
        if (tag == 106) {
         parse_secType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sectype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sectype().data(), this->sectype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.TradeTickData.secType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_mergedVols;
        break;
      }

      // repeated .tigeropen.push.pb.TradeTickData.MergedVol mergedVols = 14;
      case 14: {
        if (tag == 114) {
         parse_mergedVols:
          DO_(input->IncrementRecursionDepth());
         parse_loop_mergedVols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mergedvols()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_mergedVols;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.TradeTickData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.TradeTickData)
  return false;
#undef DO_
}

void TradeTickData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.TradeTickData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TradeTickData.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TradeTickData.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional string cond = 3;
  if (this->cond().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cond().data(), this->cond().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TradeTickData.cond");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cond(), output);
  }

  // optional int64 sn = 4;
  if (this->sn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->sn(), output);
  }

  // optional int64 priceBase = 5;
  if (this->pricebase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->pricebase(), output);
  }

  // optional int32 priceOffset = 6;
  if (this->priceoffset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->priceoffset(), output);
  }

  // repeated int64 time = 7;
  if (this->time_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_time_cached_byte_size_);
  }
  for (int i = 0; i < this->time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->time(i), output);
  }

  // repeated int64 price = 8;
  if (this->price_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_price_cached_byte_size_);
  }
  for (int i = 0; i < this->price_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->price(i), output);
  }

  // repeated int64 volume = 9;
  if (this->volume_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_volume_cached_byte_size_);
  }
  for (int i = 0; i < this->volume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->volume(i), output);
  }

  // repeated string partCode = 10;
  for (int i = 0; i < this->partcode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partcode(i).data(), this->partcode(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TradeTickData.partCode");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->partcode(i), output);
  }

  // optional string quoteLevel = 11;
  if (this->quotelevel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->quotelevel().data(), this->quotelevel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TradeTickData.quoteLevel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->quotelevel(), output);
  }

  // optional uint64 timestamp = 12;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->timestamp(), output);
  }

  // optional string secType = 13;
  if (this->sectype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sectype().data(), this->sectype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TradeTickData.secType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->sectype(), output);
  }

  // repeated .tigeropen.push.pb.TradeTickData.MergedVol mergedVols = 14;
  for (unsigned int i = 0, n = this->mergedvols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->mergedvols(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.TradeTickData)
}

::google::protobuf::uint8* TradeTickData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.TradeTickData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TradeTickData.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TradeTickData.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional string cond = 3;
  if (this->cond().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cond().data(), this->cond().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TradeTickData.cond");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cond(), target);
  }

  // optional int64 sn = 4;
  if (this->sn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->sn(), target);
  }

  // optional int64 priceBase = 5;
  if (this->pricebase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->pricebase(), target);
  }

  // optional int32 priceOffset = 6;
  if (this->priceoffset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->priceoffset(), target);
  }

  // repeated int64 time = 7;
  if (this->time_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _time_cached_byte_size_, target);
  }
  for (int i = 0; i < this->time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->time(i), target);
  }

  // repeated int64 price = 8;
  if (this->price_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _price_cached_byte_size_, target);
  }
  for (int i = 0; i < this->price_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->price(i), target);
  }

  // repeated int64 volume = 9;
  if (this->volume_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _volume_cached_byte_size_, target);
  }
  for (int i = 0; i < this->volume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->volume(i), target);
  }

  // repeated string partCode = 10;
  for (int i = 0; i < this->partcode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partcode(i).data(), this->partcode(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TradeTickData.partCode");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->partcode(i), target);
  }

  // optional string quoteLevel = 11;
  if (this->quotelevel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->quotelevel().data(), this->quotelevel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TradeTickData.quoteLevel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->quotelevel(), target);
  }

  // optional uint64 timestamp = 12;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->timestamp(), target);
  }

  // optional string secType = 13;
  if (this->sectype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sectype().data(), this->sectype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TradeTickData.secType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->sectype(), target);
  }

  // repeated .tigeropen.push.pb.TradeTickData.MergedVol mergedVols = 14;
  for (unsigned int i = 0, n = this->mergedvols_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->mergedvols(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.TradeTickData)
  return target;
}

size_t TradeTickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.TradeTickData)
  size_t total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional string cond = 3;
  if (this->cond().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cond());
  }

  // optional int64 sn = 4;
  if (this->sn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sn());
  }

  // optional int64 priceBase = 5;
  if (this->pricebase() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pricebase());
  }

  // optional int32 priceOffset = 6;
  if (this->priceoffset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priceoffset());
  }

  // optional string quoteLevel = 11;
  if (this->quotelevel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->quotelevel());
  }

  // optional uint64 timestamp = 12;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // optional string secType = 13;
  if (this->sectype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sectype());
  }

  // repeated int64 time = 7;
  {
    size_t data_size = 0;
    unsigned int count = this->time_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->time(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _time_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 price = 8;
  {
    size_t data_size = 0;
    unsigned int count = this->price_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->price(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _price_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 volume = 9;
  {
    size_t data_size = 0;
    unsigned int count = this->volume_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->volume(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _volume_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string partCode = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->partcode_size());
  for (int i = 0; i < this->partcode_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->partcode(i));
  }

  // repeated .tigeropen.push.pb.TradeTickData.MergedVol mergedVols = 14;
  {
    unsigned int count = this->mergedvols_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mergedvols(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeTickData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.TradeTickData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TradeTickData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeTickData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.TradeTickData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.TradeTickData)
    UnsafeMergeFrom(*source);
  }
}

void TradeTickData::MergeFrom(const TradeTickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.TradeTickData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TradeTickData::UnsafeMergeFrom(const TradeTickData& from) {
  GOOGLE_DCHECK(&from != this);
  time_.UnsafeMergeFrom(from.time_);
  price_.UnsafeMergeFrom(from.price_);
  volume_.UnsafeMergeFrom(from.volume_);
  partcode_.UnsafeMergeFrom(from.partcode_);
  mergedvols_.MergeFrom(from.mergedvols_);
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.cond().size() > 0) {

    cond_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cond_);
  }
  if (from.sn() != 0) {
    set_sn(from.sn());
  }
  if (from.pricebase() != 0) {
    set_pricebase(from.pricebase());
  }
  if (from.priceoffset() != 0) {
    set_priceoffset(from.priceoffset());
  }
  if (from.quotelevel().size() > 0) {

    quotelevel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quotelevel_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.sectype().size() > 0) {

    sectype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sectype_);
  }
}

void TradeTickData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.TradeTickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeTickData::CopyFrom(const TradeTickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.TradeTickData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TradeTickData::IsInitialized() const {

  return true;
}

void TradeTickData::Swap(TradeTickData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeTickData::InternalSwap(TradeTickData* other) {
  symbol_.Swap(&other->symbol_);
  type_.Swap(&other->type_);
  cond_.Swap(&other->cond_);
  std::swap(sn_, other->sn_);
  std::swap(pricebase_, other->pricebase_);
  std::swap(priceoffset_, other->priceoffset_);
  time_.UnsafeArenaSwap(&other->time_);
  price_.UnsafeArenaSwap(&other->price_);
  volume_.UnsafeArenaSwap(&other->volume_);
  partcode_.UnsafeArenaSwap(&other->partcode_);
  quotelevel_.Swap(&other->quotelevel_);
  std::swap(timestamp_, other->timestamp_);
  sectype_.Swap(&other->sectype_);
  mergedvols_.UnsafeArenaSwap(&other->mergedvols_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TradeTickData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeTickData_descriptor_;
  metadata.reflection = TradeTickData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TradeTickData_MergedVol

// optional int32 mergeTimes = 1;
void TradeTickData_MergedVol::clear_mergetimes() {
  mergetimes_ = 0;
}
::google::protobuf::int32 TradeTickData_MergedVol::mergetimes() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TradeTickData.MergedVol.mergeTimes)
  return mergetimes_;
}
void TradeTickData_MergedVol::set_mergetimes(::google::protobuf::int32 value) {
  
  mergetimes_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TradeTickData.MergedVol.mergeTimes)
}

// repeated int64 vol = 2;
int TradeTickData_MergedVol::vol_size() const {
  return vol_.size();
}
void TradeTickData_MergedVol::clear_vol() {
  vol_.Clear();
}
::google::protobuf::int64 TradeTickData_MergedVol::vol(int index) const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TradeTickData.MergedVol.vol)
  return vol_.Get(index);
}
void TradeTickData_MergedVol::set_vol(int index, ::google::protobuf::int64 value) {
  vol_.Set(index, value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TradeTickData.MergedVol.vol)
}
void TradeTickData_MergedVol::add_vol(::google::protobuf::int64 value) {
  vol_.Add(value);
  // @@protoc_insertion_point(field_add:tigeropen.push.pb.TradeTickData.MergedVol.vol)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TradeTickData_MergedVol::vol() const {
  // @@protoc_insertion_point(field_list:tigeropen.push.pb.TradeTickData.MergedVol.vol)
  return vol_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TradeTickData_MergedVol::mutable_vol() {
  // @@protoc_insertion_point(field_mutable_list:tigeropen.push.pb.TradeTickData.MergedVol.vol)
  return &vol_;
}

inline const TradeTickData_MergedVol* TradeTickData_MergedVol::internal_default_instance() {
  return &TradeTickData_MergedVol_default_instance_.get();
}
// -------------------------------------------------------------------

// TradeTickData

// optional string symbol = 1;
void TradeTickData::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TradeTickData::symbol() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TradeTickData.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TradeTickData::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TradeTickData.symbol)
}
void TradeTickData::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.TradeTickData.symbol)
}
void TradeTickData::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.TradeTickData.symbol)
}
::std::string* TradeTickData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.TradeTickData.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TradeTickData::release_symbol() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.TradeTickData.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TradeTickData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.TradeTickData.symbol)
}

// optional string type = 2;
void TradeTickData::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TradeTickData::type() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TradeTickData.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TradeTickData::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TradeTickData.type)
}
void TradeTickData::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.TradeTickData.type)
}
void TradeTickData::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.TradeTickData.type)
}
::std::string* TradeTickData::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.TradeTickData.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TradeTickData::release_type() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.TradeTickData.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TradeTickData::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.TradeTickData.type)
}

// optional string cond = 3;
void TradeTickData::clear_cond() {
  cond_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TradeTickData::cond() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TradeTickData.cond)
  return cond_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TradeTickData::set_cond(const ::std::string& value) {
  
  cond_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TradeTickData.cond)
}
void TradeTickData::set_cond(const char* value) {
  
  cond_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.TradeTickData.cond)
}
void TradeTickData::set_cond(const char* value, size_t size) {
  
  cond_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.TradeTickData.cond)
}
::std::string* TradeTickData::mutable_cond() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.TradeTickData.cond)
  return cond_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TradeTickData::release_cond() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.TradeTickData.cond)
  
  return cond_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TradeTickData::set_allocated_cond(::std::string* cond) {
  if (cond != NULL) {
    
  } else {
    
  }
  cond_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cond);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.TradeTickData.cond)
}

// optional int64 sn = 4;
void TradeTickData::clear_sn() {
  sn_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TradeTickData::sn() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TradeTickData.sn)
  return sn_;
}
void TradeTickData::set_sn(::google::protobuf::int64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TradeTickData.sn)
}

// optional int64 priceBase = 5;
void TradeTickData::clear_pricebase() {
  pricebase_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TradeTickData::pricebase() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TradeTickData.priceBase)
  return pricebase_;
}
void TradeTickData::set_pricebase(::google::protobuf::int64 value) {
  
  pricebase_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TradeTickData.priceBase)
}

// optional int32 priceOffset = 6;
void TradeTickData::clear_priceoffset() {
  priceoffset_ = 0;
}
::google::protobuf::int32 TradeTickData::priceoffset() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TradeTickData.priceOffset)
  return priceoffset_;
}
void TradeTickData::set_priceoffset(::google::protobuf::int32 value) {
  
  priceoffset_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TradeTickData.priceOffset)
}

// repeated int64 time = 7;
int TradeTickData::time_size() const {
  return time_.size();
}
void TradeTickData::clear_time() {
  time_.Clear();
}
::google::protobuf::int64 TradeTickData::time(int index) const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TradeTickData.time)
  return time_.Get(index);
}
void TradeTickData::set_time(int index, ::google::protobuf::int64 value) {
  time_.Set(index, value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TradeTickData.time)
}
void TradeTickData::add_time(::google::protobuf::int64 value) {
  time_.Add(value);
  // @@protoc_insertion_point(field_add:tigeropen.push.pb.TradeTickData.time)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TradeTickData::time() const {
  // @@protoc_insertion_point(field_list:tigeropen.push.pb.TradeTickData.time)
  return time_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TradeTickData::mutable_time() {
  // @@protoc_insertion_point(field_mutable_list:tigeropen.push.pb.TradeTickData.time)
  return &time_;
}

// repeated int64 price = 8;
int TradeTickData::price_size() const {
  return price_.size();
}
void TradeTickData::clear_price() {
  price_.Clear();
}
::google::protobuf::int64 TradeTickData::price(int index) const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TradeTickData.price)
  return price_.Get(index);
}
void TradeTickData::set_price(int index, ::google::protobuf::int64 value) {
  price_.Set(index, value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TradeTickData.price)
}
void TradeTickData::add_price(::google::protobuf::int64 value) {
  price_.Add(value);
  // @@protoc_insertion_point(field_add:tigeropen.push.pb.TradeTickData.price)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TradeTickData::price() const {
  // @@protoc_insertion_point(field_list:tigeropen.push.pb.TradeTickData.price)
  return price_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TradeTickData::mutable_price() {
  // @@protoc_insertion_point(field_mutable_list:tigeropen.push.pb.TradeTickData.price)
  return &price_;
}

// repeated int64 volume = 9;
int TradeTickData::volume_size() const {
  return volume_.size();
}
void TradeTickData::clear_volume() {
  volume_.Clear();
}
::google::protobuf::int64 TradeTickData::volume(int index) const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TradeTickData.volume)
  return volume_.Get(index);
}
void TradeTickData::set_volume(int index, ::google::protobuf::int64 value) {
  volume_.Set(index, value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TradeTickData.volume)
}
void TradeTickData::add_volume(::google::protobuf::int64 value) {
  volume_.Add(value);
  // @@protoc_insertion_point(field_add:tigeropen.push.pb.TradeTickData.volume)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TradeTickData::volume() const {
  // @@protoc_insertion_point(field_list:tigeropen.push.pb.TradeTickData.volume)
  return volume_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TradeTickData::mutable_volume() {
  // @@protoc_insertion_point(field_mutable_list:tigeropen.push.pb.TradeTickData.volume)
  return &volume_;
}

// repeated string partCode = 10;
int TradeTickData::partcode_size() const {
  return partcode_.size();
}
void TradeTickData::clear_partcode() {
  partcode_.Clear();
}
const ::std::string& TradeTickData::partcode(int index) const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TradeTickData.partCode)
  return partcode_.Get(index);
}
::std::string* TradeTickData::mutable_partcode(int index) {
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.TradeTickData.partCode)
  return partcode_.Mutable(index);
}
void TradeTickData::set_partcode(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TradeTickData.partCode)
  partcode_.Mutable(index)->assign(value);
}
void TradeTickData::set_partcode(int index, const char* value) {
  partcode_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.TradeTickData.partCode)
}
void TradeTickData::set_partcode(int index, const char* value, size_t size) {
  partcode_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.TradeTickData.partCode)
}
::std::string* TradeTickData::add_partcode() {
  // @@protoc_insertion_point(field_add_mutable:tigeropen.push.pb.TradeTickData.partCode)
  return partcode_.Add();
}
void TradeTickData::add_partcode(const ::std::string& value) {
  partcode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tigeropen.push.pb.TradeTickData.partCode)
}
void TradeTickData::add_partcode(const char* value) {
  partcode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tigeropen.push.pb.TradeTickData.partCode)
}
void TradeTickData::add_partcode(const char* value, size_t size) {
  partcode_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tigeropen.push.pb.TradeTickData.partCode)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TradeTickData::partcode() const {
  // @@protoc_insertion_point(field_list:tigeropen.push.pb.TradeTickData.partCode)
  return partcode_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TradeTickData::mutable_partcode() {
  // @@protoc_insertion_point(field_mutable_list:tigeropen.push.pb.TradeTickData.partCode)
  return &partcode_;
}

// optional string quoteLevel = 11;
void TradeTickData::clear_quotelevel() {
  quotelevel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TradeTickData::quotelevel() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TradeTickData.quoteLevel)
  return quotelevel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TradeTickData::set_quotelevel(const ::std::string& value) {
  
  quotelevel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TradeTickData.quoteLevel)
}
void TradeTickData::set_quotelevel(const char* value) {
  
  quotelevel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.TradeTickData.quoteLevel)
}
void TradeTickData::set_quotelevel(const char* value, size_t size) {
  
  quotelevel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.TradeTickData.quoteLevel)
}
::std::string* TradeTickData::mutable_quotelevel() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.TradeTickData.quoteLevel)
  return quotelevel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TradeTickData::release_quotelevel() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.TradeTickData.quoteLevel)
  
  return quotelevel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TradeTickData::set_allocated_quotelevel(::std::string* quotelevel) {
  if (quotelevel != NULL) {
    
  } else {
    
  }
  quotelevel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quotelevel);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.TradeTickData.quoteLevel)
}

// optional uint64 timestamp = 12;
void TradeTickData::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TradeTickData::timestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TradeTickData.timestamp)
  return timestamp_;
}
void TradeTickData::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TradeTickData.timestamp)
}

// optional string secType = 13;
void TradeTickData::clear_sectype() {
  sectype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TradeTickData::sectype() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TradeTickData.secType)
  return sectype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TradeTickData::set_sectype(const ::std::string& value) {
  
  sectype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TradeTickData.secType)
}
void TradeTickData::set_sectype(const char* value) {
  
  sectype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.TradeTickData.secType)
}
void TradeTickData::set_sectype(const char* value, size_t size) {
  
  sectype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.TradeTickData.secType)
}
::std::string* TradeTickData::mutable_sectype() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.TradeTickData.secType)
  return sectype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TradeTickData::release_sectype() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.TradeTickData.secType)
  
  return sectype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TradeTickData::set_allocated_sectype(::std::string* sectype) {
  if (sectype != NULL) {
    
  } else {
    
  }
  sectype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sectype);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.TradeTickData.secType)
}

// repeated .tigeropen.push.pb.TradeTickData.MergedVol mergedVols = 14;
int TradeTickData::mergedvols_size() const {
  return mergedvols_.size();
}
void TradeTickData::clear_mergedvols() {
  mergedvols_.Clear();
}
const ::tigeropen::push::pb::TradeTickData_MergedVol& TradeTickData::mergedvols(int index) const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TradeTickData.mergedVols)
  return mergedvols_.Get(index);
}
::tigeropen::push::pb::TradeTickData_MergedVol* TradeTickData::mutable_mergedvols(int index) {
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.TradeTickData.mergedVols)
  return mergedvols_.Mutable(index);
}
::tigeropen::push::pb::TradeTickData_MergedVol* TradeTickData::add_mergedvols() {
  // @@protoc_insertion_point(field_add:tigeropen.push.pb.TradeTickData.mergedVols)
  return mergedvols_.Add();
}
::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::TradeTickData_MergedVol >*
TradeTickData::mutable_mergedvols() {
  // @@protoc_insertion_point(field_mutable_list:tigeropen.push.pb.TradeTickData.mergedVols)
  return &mergedvols_;
}
const ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::TradeTickData_MergedVol >&
TradeTickData::mergedvols() const {
  // @@protoc_insertion_point(field_list:tigeropen.push.pb.TradeTickData.mergedVols)
  return mergedvols_;
}

inline const TradeTickData* TradeTickData::internal_default_instance() {
  return &TradeTickData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace push
}  // namespace tigeropen

// @@protoc_insertion_point(global_scope)
