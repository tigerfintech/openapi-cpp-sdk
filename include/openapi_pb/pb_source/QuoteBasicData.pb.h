// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QuoteBasicData.proto

#ifndef PROTOBUF_QuoteBasicData_2eproto__INCLUDED
#define PROTOBUF_QuoteBasicData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "SocketCommon.pb.h"  // IWYU pragma: export
#include "QuoteData.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace tigeropen {
namespace push {
namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_QuoteBasicData_2eproto();
void protobuf_InitDefaults_QuoteBasicData_2eproto();
void protobuf_AssignDesc_QuoteBasicData_2eproto();
void protobuf_ShutdownFile_QuoteBasicData_2eproto();

class QuoteBasicData;

// ===================================================================

class QuoteBasicData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tigeropen.push.pb.QuoteBasicData) */ {
 public:
  QuoteBasicData();
  virtual ~QuoteBasicData();

  QuoteBasicData(const QuoteBasicData& from);

  inline QuoteBasicData& operator=(const QuoteBasicData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuoteBasicData& default_instance();

  static const QuoteBasicData* internal_default_instance();

  void Swap(QuoteBasicData* other);

  // implements Message ----------------------------------------------

  inline QuoteBasicData* New() const { return New(NULL); }

  QuoteBasicData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuoteBasicData& from);
  void MergeFrom(const QuoteBasicData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QuoteBasicData* other);
  void UnsafeMergeFrom(const QuoteBasicData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::tigeropen::push::pb::SocketCommon_QuoteType type() const;
  void set_type(::tigeropen::push::pb::SocketCommon_QuoteType value);

  // optional uint64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional uint64 serverTimestamp = 4;
  void clear_servertimestamp();
  static const int kServerTimestampFieldNumber = 4;
  ::google::protobuf::uint64 servertimestamp() const;
  void set_servertimestamp(::google::protobuf::uint64 value);

  // optional double avgPrice = 5;
  void clear_avgprice();
  static const int kAvgPriceFieldNumber = 5;
  double avgprice() const;
  void set_avgprice(double value);

  // optional double latestPrice = 6;
  void clear_latestprice();
  static const int kLatestPriceFieldNumber = 6;
  double latestprice() const;
  void set_latestprice(double value);

  // optional uint64 latestPriceTimestamp = 7;
  void clear_latestpricetimestamp();
  static const int kLatestPriceTimestampFieldNumber = 7;
  ::google::protobuf::uint64 latestpricetimestamp() const;
  void set_latestpricetimestamp(::google::protobuf::uint64 value);

  // optional string latestTime = 8;
  void clear_latesttime();
  static const int kLatestTimeFieldNumber = 8;
  const ::std::string& latesttime() const;
  void set_latesttime(const ::std::string& value);
  void set_latesttime(const char* value);
  void set_latesttime(const char* value, size_t size);
  ::std::string* mutable_latesttime();
  ::std::string* release_latesttime();
  void set_allocated_latesttime(::std::string* latesttime);

  // optional double preClose = 9;
  void clear_preclose();
  static const int kPreCloseFieldNumber = 9;
  double preclose() const;
  void set_preclose(double value);

  // optional sint64 volume = 10;
  void clear_volume();
  static const int kVolumeFieldNumber = 10;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // optional double amount = 11;
  void clear_amount();
  static const int kAmountFieldNumber = 11;
  double amount() const;
  void set_amount(double value);

  // optional double open = 12;
  void clear_open();
  static const int kOpenFieldNumber = 12;
  double open() const;
  void set_open(double value);

  // optional double high = 13;
  void clear_high();
  static const int kHighFieldNumber = 13;
  double high() const;
  void set_high(double value);

  // optional double low = 14;
  void clear_low();
  static const int kLowFieldNumber = 14;
  double low() const;
  void set_low(double value);

  // optional string hourTradingTag = 15;
  void clear_hourtradingtag();
  static const int kHourTradingTagFieldNumber = 15;
  const ::std::string& hourtradingtag() const;
  void set_hourtradingtag(const ::std::string& value);
  void set_hourtradingtag(const char* value);
  void set_hourtradingtag(const char* value, size_t size);
  ::std::string* mutable_hourtradingtag();
  ::std::string* release_hourtradingtag();
  void set_allocated_hourtradingtag(::std::string* hourtradingtag);

  // optional string marketStatus = 16;
  void clear_marketstatus();
  static const int kMarketStatusFieldNumber = 16;
  const ::std::string& marketstatus() const;
  void set_marketstatus(const ::std::string& value);
  void set_marketstatus(const char* value);
  void set_marketstatus(const char* value, size_t size);
  ::std::string* mutable_marketstatus();
  ::std::string* release_marketstatus();
  void set_allocated_marketstatus(::std::string* marketstatus);

  // optional string identifier = 23;
  void clear_identifier();
  static const int kIdentifierFieldNumber = 23;
  const ::std::string& identifier() const;
  void set_identifier(const ::std::string& value);
  void set_identifier(const char* value);
  void set_identifier(const char* value, size_t size);
  ::std::string* mutable_identifier();
  ::std::string* release_identifier();
  void set_allocated_identifier(::std::string* identifier);

  // optional sint64 openInt = 24;
  void clear_openint();
  static const int kOpenIntFieldNumber = 24;
  ::google::protobuf::int64 openint() const;
  void set_openint(::google::protobuf::int64 value);

  // optional uint64 tradeTime = 25;
  void clear_tradetime();
  static const int kTradeTimeFieldNumber = 25;
  ::google::protobuf::uint64 tradetime() const;
  void set_tradetime(::google::protobuf::uint64 value);

  // optional double preSettlement = 26;
  void clear_presettlement();
  static const int kPreSettlementFieldNumber = 26;
  double presettlement() const;
  void set_presettlement(double value);

  // optional float minTick = 27;
  void clear_mintick();
  static const int kMinTickFieldNumber = 27;
  float mintick() const;
  void set_mintick(float value);

  // optional .tigeropen.push.pb.QuoteData.Minute mi = 28;
  bool has_mi() const;
  void clear_mi();
  static const int kMiFieldNumber = 28;
  const ::tigeropen::push::pb::QuoteData_Minute& mi() const;
  ::tigeropen::push::pb::QuoteData_Minute* mutable_mi();
  ::tigeropen::push::pb::QuoteData_Minute* release_mi();
  void set_allocated_mi(::tigeropen::push::pb::QuoteData_Minute* mi);

  // @@protoc_insertion_point(class_scope:tigeropen.push.pb.QuoteBasicData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr latesttime_;
  ::google::protobuf::internal::ArenaStringPtr hourtradingtag_;
  ::google::protobuf::internal::ArenaStringPtr marketstatus_;
  ::google::protobuf::internal::ArenaStringPtr identifier_;
  ::tigeropen::push::pb::QuoteData_Minute* mi_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint64 servertimestamp_;
  double avgprice_;
  double latestprice_;
  ::google::protobuf::uint64 latestpricetimestamp_;
  double preclose_;
  ::google::protobuf::int64 volume_;
  double amount_;
  int type_;
  float mintick_;
  double open_;
  double high_;
  double low_;
  ::google::protobuf::int64 openint_;
  ::google::protobuf::uint64 tradetime_;
  double presettlement_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_QuoteBasicData_2eproto_impl();
  friend void  protobuf_AddDesc_QuoteBasicData_2eproto_impl();
  friend void protobuf_AssignDesc_QuoteBasicData_2eproto();
  friend void protobuf_ShutdownFile_QuoteBasicData_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QuoteBasicData> QuoteBasicData_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// QuoteBasicData

// optional string symbol = 1;
inline void QuoteBasicData::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteBasicData::symbol() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteBasicData::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.symbol)
}
inline void QuoteBasicData::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteBasicData.symbol)
}
inline void QuoteBasicData::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteBasicData.symbol)
}
inline ::std::string* QuoteBasicData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteBasicData.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteBasicData::release_symbol() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteBasicData.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteBasicData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteBasicData.symbol)
}

// optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
inline void QuoteBasicData::clear_type() {
  type_ = 0;
}
inline ::tigeropen::push::pb::SocketCommon_QuoteType QuoteBasicData::type() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.type)
  return static_cast< ::tigeropen::push::pb::SocketCommon_QuoteType >(type_);
}
inline void QuoteBasicData::set_type(::tigeropen::push::pb::SocketCommon_QuoteType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.type)
}

// optional uint64 timestamp = 3;
inline void QuoteBasicData::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 QuoteBasicData::timestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.timestamp)
  return timestamp_;
}
inline void QuoteBasicData::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.timestamp)
}

// optional uint64 serverTimestamp = 4;
inline void QuoteBasicData::clear_servertimestamp() {
  servertimestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 QuoteBasicData::servertimestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.serverTimestamp)
  return servertimestamp_;
}
inline void QuoteBasicData::set_servertimestamp(::google::protobuf::uint64 value) {
  
  servertimestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.serverTimestamp)
}

// optional double avgPrice = 5;
inline void QuoteBasicData::clear_avgprice() {
  avgprice_ = 0;
}
inline double QuoteBasicData::avgprice() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.avgPrice)
  return avgprice_;
}
inline void QuoteBasicData::set_avgprice(double value) {
  
  avgprice_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.avgPrice)
}

// optional double latestPrice = 6;
inline void QuoteBasicData::clear_latestprice() {
  latestprice_ = 0;
}
inline double QuoteBasicData::latestprice() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.latestPrice)
  return latestprice_;
}
inline void QuoteBasicData::set_latestprice(double value) {
  
  latestprice_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.latestPrice)
}

// optional uint64 latestPriceTimestamp = 7;
inline void QuoteBasicData::clear_latestpricetimestamp() {
  latestpricetimestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 QuoteBasicData::latestpricetimestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.latestPriceTimestamp)
  return latestpricetimestamp_;
}
inline void QuoteBasicData::set_latestpricetimestamp(::google::protobuf::uint64 value) {
  
  latestpricetimestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.latestPriceTimestamp)
}

// optional string latestTime = 8;
inline void QuoteBasicData::clear_latesttime() {
  latesttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteBasicData::latesttime() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.latestTime)
  return latesttime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteBasicData::set_latesttime(const ::std::string& value) {
  
  latesttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.latestTime)
}
inline void QuoteBasicData::set_latesttime(const char* value) {
  
  latesttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteBasicData.latestTime)
}
inline void QuoteBasicData::set_latesttime(const char* value, size_t size) {
  
  latesttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteBasicData.latestTime)
}
inline ::std::string* QuoteBasicData::mutable_latesttime() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteBasicData.latestTime)
  return latesttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteBasicData::release_latesttime() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteBasicData.latestTime)
  
  return latesttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteBasicData::set_allocated_latesttime(::std::string* latesttime) {
  if (latesttime != NULL) {
    
  } else {
    
  }
  latesttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latesttime);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteBasicData.latestTime)
}

// optional double preClose = 9;
inline void QuoteBasicData::clear_preclose() {
  preclose_ = 0;
}
inline double QuoteBasicData::preclose() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.preClose)
  return preclose_;
}
inline void QuoteBasicData::set_preclose(double value) {
  
  preclose_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.preClose)
}

// optional sint64 volume = 10;
inline void QuoteBasicData::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QuoteBasicData::volume() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.volume)
  return volume_;
}
inline void QuoteBasicData::set_volume(::google::protobuf::int64 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.volume)
}

// optional double amount = 11;
inline void QuoteBasicData::clear_amount() {
  amount_ = 0;
}
inline double QuoteBasicData::amount() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.amount)
  return amount_;
}
inline void QuoteBasicData::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.amount)
}

// optional double open = 12;
inline void QuoteBasicData::clear_open() {
  open_ = 0;
}
inline double QuoteBasicData::open() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.open)
  return open_;
}
inline void QuoteBasicData::set_open(double value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.open)
}

// optional double high = 13;
inline void QuoteBasicData::clear_high() {
  high_ = 0;
}
inline double QuoteBasicData::high() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.high)
  return high_;
}
inline void QuoteBasicData::set_high(double value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.high)
}

// optional double low = 14;
inline void QuoteBasicData::clear_low() {
  low_ = 0;
}
inline double QuoteBasicData::low() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.low)
  return low_;
}
inline void QuoteBasicData::set_low(double value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.low)
}

// optional string hourTradingTag = 15;
inline void QuoteBasicData::clear_hourtradingtag() {
  hourtradingtag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteBasicData::hourtradingtag() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.hourTradingTag)
  return hourtradingtag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteBasicData::set_hourtradingtag(const ::std::string& value) {
  
  hourtradingtag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.hourTradingTag)
}
inline void QuoteBasicData::set_hourtradingtag(const char* value) {
  
  hourtradingtag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteBasicData.hourTradingTag)
}
inline void QuoteBasicData::set_hourtradingtag(const char* value, size_t size) {
  
  hourtradingtag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteBasicData.hourTradingTag)
}
inline ::std::string* QuoteBasicData::mutable_hourtradingtag() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteBasicData.hourTradingTag)
  return hourtradingtag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteBasicData::release_hourtradingtag() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteBasicData.hourTradingTag)
  
  return hourtradingtag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteBasicData::set_allocated_hourtradingtag(::std::string* hourtradingtag) {
  if (hourtradingtag != NULL) {
    
  } else {
    
  }
  hourtradingtag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hourtradingtag);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteBasicData.hourTradingTag)
}

// optional string marketStatus = 16;
inline void QuoteBasicData::clear_marketstatus() {
  marketstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteBasicData::marketstatus() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.marketStatus)
  return marketstatus_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteBasicData::set_marketstatus(const ::std::string& value) {
  
  marketstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.marketStatus)
}
inline void QuoteBasicData::set_marketstatus(const char* value) {
  
  marketstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteBasicData.marketStatus)
}
inline void QuoteBasicData::set_marketstatus(const char* value, size_t size) {
  
  marketstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteBasicData.marketStatus)
}
inline ::std::string* QuoteBasicData::mutable_marketstatus() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteBasicData.marketStatus)
  return marketstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteBasicData::release_marketstatus() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteBasicData.marketStatus)
  
  return marketstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteBasicData::set_allocated_marketstatus(::std::string* marketstatus) {
  if (marketstatus != NULL) {
    
  } else {
    
  }
  marketstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketstatus);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteBasicData.marketStatus)
}

// optional string identifier = 23;
inline void QuoteBasicData::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteBasicData::identifier() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.identifier)
  return identifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteBasicData::set_identifier(const ::std::string& value) {
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.identifier)
}
inline void QuoteBasicData::set_identifier(const char* value) {
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteBasicData.identifier)
}
inline void QuoteBasicData::set_identifier(const char* value, size_t size) {
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteBasicData.identifier)
}
inline ::std::string* QuoteBasicData::mutable_identifier() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteBasicData.identifier)
  return identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteBasicData::release_identifier() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteBasicData.identifier)
  
  return identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteBasicData::set_allocated_identifier(::std::string* identifier) {
  if (identifier != NULL) {
    
  } else {
    
  }
  identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteBasicData.identifier)
}

// optional sint64 openInt = 24;
inline void QuoteBasicData::clear_openint() {
  openint_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QuoteBasicData::openint() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.openInt)
  return openint_;
}
inline void QuoteBasicData::set_openint(::google::protobuf::int64 value) {
  
  openint_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.openInt)
}

// optional uint64 tradeTime = 25;
inline void QuoteBasicData::clear_tradetime() {
  tradetime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 QuoteBasicData::tradetime() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.tradeTime)
  return tradetime_;
}
inline void QuoteBasicData::set_tradetime(::google::protobuf::uint64 value) {
  
  tradetime_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.tradeTime)
}

// optional double preSettlement = 26;
inline void QuoteBasicData::clear_presettlement() {
  presettlement_ = 0;
}
inline double QuoteBasicData::presettlement() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.preSettlement)
  return presettlement_;
}
inline void QuoteBasicData::set_presettlement(double value) {
  
  presettlement_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.preSettlement)
}

// optional float minTick = 27;
inline void QuoteBasicData::clear_mintick() {
  mintick_ = 0;
}
inline float QuoteBasicData::mintick() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.minTick)
  return mintick_;
}
inline void QuoteBasicData::set_mintick(float value) {
  
  mintick_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.minTick)
}

// optional .tigeropen.push.pb.QuoteData.Minute mi = 28;
inline bool QuoteBasicData::has_mi() const {
  return this != internal_default_instance() && mi_ != NULL;
}
inline void QuoteBasicData::clear_mi() {
  if (GetArenaNoVirtual() == NULL && mi_ != NULL) delete mi_;
  mi_ = NULL;
}
inline const ::tigeropen::push::pb::QuoteData_Minute& QuoteBasicData::mi() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.mi)
  return mi_ != NULL ? *mi_
                         : *::tigeropen::push::pb::QuoteData_Minute::internal_default_instance();
}
inline ::tigeropen::push::pb::QuoteData_Minute* QuoteBasicData::mutable_mi() {
  
  if (mi_ == NULL) {
    mi_ = new ::tigeropen::push::pb::QuoteData_Minute;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteBasicData.mi)
  return mi_;
}
inline ::tigeropen::push::pb::QuoteData_Minute* QuoteBasicData::release_mi() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteBasicData.mi)
  
  ::tigeropen::push::pb::QuoteData_Minute* temp = mi_;
  mi_ = NULL;
  return temp;
}
inline void QuoteBasicData::set_allocated_mi(::tigeropen::push::pb::QuoteData_Minute* mi) {
  delete mi_;
  mi_ = mi;
  if (mi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteBasicData.mi)
}

inline const QuoteBasicData* QuoteBasicData::internal_default_instance() {
  return &QuoteBasicData_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace push
}  // namespace tigeropen

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_QuoteBasicData_2eproto__INCLUDED
