// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Response.proto

#ifndef PROTOBUF_Response_2eproto__INCLUDED
#define PROTOBUF_Response_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "SocketCommon.pb.h"  // IWYU pragma: export
#include "PushData.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace tigeropen {
namespace push {
namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Response_2eproto();
void protobuf_InitDefaults_Response_2eproto();
void protobuf_AssignDesc_Response_2eproto();
void protobuf_ShutdownFile_Response_2eproto();

class Response;

// ===================================================================

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tigeropen.push.pb.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static const Response* internal_default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  void UnsafeMergeFrom(const Response& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tigeropen.push.pb.SocketCommon.Command command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  ::tigeropen::push::pb::SocketCommon_Command command() const;
  void set_command(::tigeropen::push::pb::SocketCommon_Command value);

  // optional uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional int32 code = 3;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // optional string msg = 4;
  void clear_msg();
  static const int kMsgFieldNumber = 4;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional .tigeropen.push.pb.PushData body = 5;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 5;
  const ::tigeropen::push::pb::PushData& body() const;
  ::tigeropen::push::pb::PushData* mutable_body();
  ::tigeropen::push::pb::PushData* release_body();
  void set_allocated_body(::tigeropen::push::pb::PushData* body);

  // @@protoc_insertion_point(class_scope:tigeropen.push.pb.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::tigeropen::push::pb::PushData* body_;
  int command_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_Response_2eproto_impl();
  friend void  protobuf_AddDesc_Response_2eproto_impl();
  friend void protobuf_AssignDesc_Response_2eproto();
  friend void protobuf_ShutdownFile_Response_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Response> Response_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional .tigeropen.push.pb.SocketCommon.Command command = 1;
inline void Response::clear_command() {
  command_ = 0;
}
inline ::tigeropen::push::pb::SocketCommon_Command Response::command() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Response.command)
  return static_cast< ::tigeropen::push::pb::SocketCommon_Command >(command_);
}
inline void Response::set_command(::tigeropen::push::pb::SocketCommon_Command value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Response.command)
}

// optional uint32 id = 2;
inline void Response::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Response::id() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Response.id)
  return id_;
}
inline void Response::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Response.id)
}

// optional int32 code = 3;
inline void Response::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 Response::code() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Response.code)
  return code_;
}
inline void Response::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Response.code)
}

// optional string msg = 4;
inline void Response::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::msg() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Response.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Response.msg)
}
inline void Response::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.Response.msg)
}
inline void Response::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.Response.msg)
}
inline ::std::string* Response::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Response.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_msg() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Response.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Response.msg)
}

// optional .tigeropen.push.pb.PushData body = 5;
inline bool Response::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
inline void Response::clear_body() {
  if (GetArenaNoVirtual() == NULL && body_ != NULL) delete body_;
  body_ = NULL;
}
inline const ::tigeropen::push::pb::PushData& Response::body() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Response.body)
  return body_ != NULL ? *body_
                         : *::tigeropen::push::pb::PushData::internal_default_instance();
}
inline ::tigeropen::push::pb::PushData* Response::mutable_body() {
  
  if (body_ == NULL) {
    body_ = new ::tigeropen::push::pb::PushData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Response.body)
  return body_;
}
inline ::tigeropen::push::pb::PushData* Response::release_body() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Response.body)
  
  ::tigeropen::push::pb::PushData* temp = body_;
  body_ = NULL;
  return temp;
}
inline void Response::set_allocated_body(::tigeropen::push::pb::PushData* body) {
  delete body_;
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Response.body)
}

inline const Response* Response::internal_default_instance() {
  return &Response_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace push
}  // namespace tigeropen

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Response_2eproto__INCLUDED
