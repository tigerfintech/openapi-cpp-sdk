// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tigeropen {
namespace push {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Connect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Connect_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Subscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Subscribe_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Request_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Request_2eproto() {
  protobuf_AddDesc_Request_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Request.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, subscribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, connect_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::internal_default_instance(),
      Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_));
  Request_Connect_descriptor_ = Request_descriptor_->nested_type(0);
  static const int Request_Connect_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Connect, tigerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Connect, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Connect, sdkversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Connect, acceptversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Connect, sendinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Connect, receiveinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Connect, usefulltick_),
  };
  Request_Connect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_Connect_descriptor_,
      Request_Connect::internal_default_instance(),
      Request_Connect_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request_Connect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Connect, _internal_metadata_));
  Request_Subscribe_descriptor_ = Request_descriptor_->nested_type(1);
  static const int Request_Subscribe_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Subscribe, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Subscribe, symbols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Subscribe, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Subscribe, market_),
  };
  Request_Subscribe_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_Subscribe_descriptor_,
      Request_Subscribe::internal_default_instance(),
      Request_Subscribe_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request_Subscribe),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Subscribe, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Request_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, Request::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_Connect_descriptor_, Request_Connect::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_Subscribe_descriptor_, Request_Subscribe::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Request_2eproto() {
  Request_default_instance_.Shutdown();
  delete Request_reflection_;
  Request_Connect_default_instance_.Shutdown();
  delete Request_Connect_reflection_;
  Request_Subscribe_default_instance_.Shutdown();
  delete Request_Subscribe_reflection_;
}

void protobuf_InitDefaults_Request_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tigeropen::push::pb::protobuf_InitDefaults_SocketCommon_2eproto();
  Request_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Request_Connect_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Request_Subscribe_default_instance_.DefaultConstruct();
  Request_default_instance_.get_mutable()->InitAsDefaultInstance();
  Request_Connect_default_instance_.get_mutable()->InitAsDefaultInstance();
  Request_Subscribe_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_Request_2eproto_once_);
void protobuf_InitDefaults_Request_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_Request_2eproto_once_,
                 &protobuf_InitDefaults_Request_2eproto_impl);
}
void protobuf_AddDesc_Request_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_Request_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rRequest.proto\022\021tigeropen.push.pb\032\022Sock"
    "etCommon.proto\"\322\003\n\007Request\0228\n\007command\030\001 "
    "\001(\0162\'.tigeropen.push.pb.SocketCommon.Com"
    "mand\022\n\n\002id\030\002 \001(\r\0227\n\tsubscribe\030\003 \001(\0132$.ti"
    "geropen.push.pb.Request.Subscribe\0223\n\007con"
    "nect\030\004 \001(\0132\".tigeropen.push.pb.Request.C"
    "onnect\032\227\001\n\007Connect\022\017\n\007tigerId\030\001 \001(\t\022\014\n\004s"
    "ign\030\002 \001(\t\022\022\n\nsdkVersion\030\003 \001(\t\022\025\n\racceptV"
    "ersion\030\004 \001(\t\022\024\n\014sendInterval\030\005 \001(\r\022\027\n\017re"
    "ceiveInterval\030\006 \001(\r\022\023\n\013useFullTick\030\007 \001(\010"
    "\032y\n\tSubscribe\022:\n\010dataType\030\001 \001(\0162(.tigero"
    "pen.push.pb.SocketCommon.DataType\022\017\n\007sym"
    "bols\030\002 \001(\t\022\017\n\007account\030\003 \001(\t\022\016\n\006market\030\004 "
    "\001(\tP\000b\006proto3", 533);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Request.proto", &protobuf_RegisterTypes);
  ::tigeropen::push::pb::protobuf_AddDesc_SocketCommon_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Request_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Request_2eproto_once_);
void protobuf_AddDesc_Request_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Request_2eproto_once_,
                 &protobuf_AddDesc_Request_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Request_2eproto {
  StaticDescriptorInitializer_Request_2eproto() {
    protobuf_AddDesc_Request_2eproto();
  }
} static_descriptor_initializer_Request_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_Connect::kTigerIdFieldNumber;
const int Request_Connect::kSignFieldNumber;
const int Request_Connect::kSdkVersionFieldNumber;
const int Request_Connect::kAcceptVersionFieldNumber;
const int Request_Connect::kSendIntervalFieldNumber;
const int Request_Connect::kReceiveIntervalFieldNumber;
const int Request_Connect::kUseFullTickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_Connect::Request_Connect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Request_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.Request.Connect)
}

void Request_Connect::InitAsDefaultInstance() {
}

Request_Connect::Request_Connect(const Request_Connect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.Request.Connect)
}

void Request_Connect::SharedCtor() {
  tigerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdkversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acceptversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sendinterval_, 0, reinterpret_cast<char*>(&usefulltick_) -
    reinterpret_cast<char*>(&sendinterval_) + sizeof(usefulltick_));
  _cached_size_ = 0;
}

Request_Connect::~Request_Connect() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.Request.Connect)
  SharedDtor();
}

void Request_Connect::SharedDtor() {
  tigerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdkversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acceptversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Request_Connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Connect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Connect_descriptor_;
}

const Request_Connect& Request_Connect::default_instance() {
  protobuf_InitDefaults_Request_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Request_Connect> Request_Connect_default_instance_;

Request_Connect* Request_Connect::New(::google::protobuf::Arena* arena) const {
  Request_Connect* n = new Request_Connect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_Connect::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.Request.Connect)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request_Connect, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request_Connect*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sendinterval_, usefulltick_);
  tigerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdkversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acceptversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Request_Connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.Request.Connect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tigerId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tigerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tigerid().data(), this->tigerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.Request.Connect.tigerId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sign;
        break;
      }

      // optional string sign = 2;
      case 2: {
        if (tag == 18) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.Request.Connect.sign"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sdkVersion;
        break;
      }

      // optional string sdkVersion = 3;
      case 3: {
        if (tag == 26) {
         parse_sdkVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdkversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sdkversion().data(), this->sdkversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.Request.Connect.sdkVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_acceptVersion;
        break;
      }

      // optional string acceptVersion = 4;
      case 4: {
        if (tag == 34) {
         parse_acceptVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acceptversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->acceptversion().data(), this->acceptversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.Request.Connect.acceptVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sendInterval;
        break;
      }

      // optional uint32 sendInterval = 5;
      case 5: {
        if (tag == 40) {
         parse_sendInterval:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendinterval_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_receiveInterval;
        break;
      }

      // optional uint32 receiveInterval = 6;
      case 6: {
        if (tag == 48) {
         parse_receiveInterval:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiveinterval_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_useFullTick;
        break;
      }

      // optional bool useFullTick = 7;
      case 7: {
        if (tag == 56) {
         parse_useFullTick:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usefulltick_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.Request.Connect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.Request.Connect)
  return false;
#undef DO_
}

void Request_Connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.Request.Connect)
  // optional string tigerId = 1;
  if (this->tigerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tigerid().data(), this->tigerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.Request.Connect.tigerId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tigerid(), output);
  }

  // optional string sign = 2;
  if (this->sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.Request.Connect.sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sign(), output);
  }

  // optional string sdkVersion = 3;
  if (this->sdkversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sdkversion().data(), this->sdkversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.Request.Connect.sdkVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sdkversion(), output);
  }

  // optional string acceptVersion = 4;
  if (this->acceptversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acceptversion().data(), this->acceptversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.Request.Connect.acceptVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->acceptversion(), output);
  }

  // optional uint32 sendInterval = 5;
  if (this->sendinterval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sendinterval(), output);
  }

  // optional uint32 receiveInterval = 6;
  if (this->receiveinterval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->receiveinterval(), output);
  }

  // optional bool useFullTick = 7;
  if (this->usefulltick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->usefulltick(), output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.Request.Connect)
}

::google::protobuf::uint8* Request_Connect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.Request.Connect)
  // optional string tigerId = 1;
  if (this->tigerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tigerid().data(), this->tigerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.Request.Connect.tigerId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tigerid(), target);
  }

  // optional string sign = 2;
  if (this->sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.Request.Connect.sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sign(), target);
  }

  // optional string sdkVersion = 3;
  if (this->sdkversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sdkversion().data(), this->sdkversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.Request.Connect.sdkVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sdkversion(), target);
  }

  // optional string acceptVersion = 4;
  if (this->acceptversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acceptversion().data(), this->acceptversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.Request.Connect.acceptVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->acceptversion(), target);
  }

  // optional uint32 sendInterval = 5;
  if (this->sendinterval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sendinterval(), target);
  }

  // optional uint32 receiveInterval = 6;
  if (this->receiveinterval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->receiveinterval(), target);
  }

  // optional bool useFullTick = 7;
  if (this->usefulltick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->usefulltick(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.Request.Connect)
  return target;
}

size_t Request_Connect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.Request.Connect)
  size_t total_size = 0;

  // optional string tigerId = 1;
  if (this->tigerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tigerid());
  }

  // optional string sign = 2;
  if (this->sign().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sign());
  }

  // optional string sdkVersion = 3;
  if (this->sdkversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sdkversion());
  }

  // optional string acceptVersion = 4;
  if (this->acceptversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->acceptversion());
  }

  // optional uint32 sendInterval = 5;
  if (this->sendinterval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sendinterval());
  }

  // optional uint32 receiveInterval = 6;
  if (this->receiveinterval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->receiveinterval());
  }

  // optional bool useFullTick = 7;
  if (this->usefulltick() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Connect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.Request.Connect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request_Connect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_Connect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.Request.Connect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.Request.Connect)
    UnsafeMergeFrom(*source);
  }
}

void Request_Connect::MergeFrom(const Request_Connect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.Request.Connect)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Request_Connect::UnsafeMergeFrom(const Request_Connect& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.tigerid().size() > 0) {

    tigerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tigerid_);
  }
  if (from.sign().size() > 0) {

    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  if (from.sdkversion().size() > 0) {

    sdkversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdkversion_);
  }
  if (from.acceptversion().size() > 0) {

    acceptversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acceptversion_);
  }
  if (from.sendinterval() != 0) {
    set_sendinterval(from.sendinterval());
  }
  if (from.receiveinterval() != 0) {
    set_receiveinterval(from.receiveinterval());
  }
  if (from.usefulltick() != 0) {
    set_usefulltick(from.usefulltick());
  }
}

void Request_Connect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.Request.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Connect::CopyFrom(const Request_Connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.Request.Connect)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Request_Connect::IsInitialized() const {

  return true;
}

void Request_Connect::Swap(Request_Connect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_Connect::InternalSwap(Request_Connect* other) {
  tigerid_.Swap(&other->tigerid_);
  sign_.Swap(&other->sign_);
  sdkversion_.Swap(&other->sdkversion_);
  acceptversion_.Swap(&other->acceptversion_);
  std::swap(sendinterval_, other->sendinterval_);
  std::swap(receiveinterval_, other->receiveinterval_);
  std::swap(usefulltick_, other->usefulltick_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_Connect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Connect_descriptor_;
  metadata.reflection = Request_Connect_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_Subscribe::kDataTypeFieldNumber;
const int Request_Subscribe::kSymbolsFieldNumber;
const int Request_Subscribe::kAccountFieldNumber;
const int Request_Subscribe::kMarketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_Subscribe::Request_Subscribe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Request_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.Request.Subscribe)
}

void Request_Subscribe::InitAsDefaultInstance() {
}

Request_Subscribe::Request_Subscribe(const Request_Subscribe& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.Request.Subscribe)
}

void Request_Subscribe::SharedCtor() {
  symbols_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  market_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datatype_ = 0;
  _cached_size_ = 0;
}

Request_Subscribe::~Request_Subscribe() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.Request.Subscribe)
  SharedDtor();
}

void Request_Subscribe::SharedDtor() {
  symbols_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  market_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Request_Subscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Subscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Subscribe_descriptor_;
}

const Request_Subscribe& Request_Subscribe::default_instance() {
  protobuf_InitDefaults_Request_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Request_Subscribe> Request_Subscribe_default_instance_;

Request_Subscribe* Request_Subscribe::New(::google::protobuf::Arena* arena) const {
  Request_Subscribe* n = new Request_Subscribe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_Subscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.Request.Subscribe)
  datatype_ = 0;
  symbols_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  market_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Request_Subscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.Request.Subscribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tigeropen.push.pb.SocketCommon.DataType dataType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_datatype(static_cast< ::tigeropen::push::pb::SocketCommon_DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_symbols;
        break;
      }

      // optional string symbols = 2;
      case 2: {
        if (tag == 18) {
         parse_symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbols()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbols().data(), this->symbols().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.Request.Subscribe.symbols"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (tag == 26) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.Request.Subscribe.account"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_market;
        break;
      }

      // optional string market = 4;
      case 4: {
        if (tag == 34) {
         parse_market:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->market().data(), this->market().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.Request.Subscribe.market"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.Request.Subscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.Request.Subscribe)
  return false;
#undef DO_
}

void Request_Subscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.Request.Subscribe)
  // optional .tigeropen.push.pb.SocketCommon.DataType dataType = 1;
  if (this->datatype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->datatype(), output);
  }

  // optional string symbols = 2;
  if (this->symbols().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbols().data(), this->symbols().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.Request.Subscribe.symbols");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbols(), output);
  }

  // optional string account = 3;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.Request.Subscribe.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->account(), output);
  }

  // optional string market = 4;
  if (this->market().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->market().data(), this->market().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.Request.Subscribe.market");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->market(), output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.Request.Subscribe)
}

::google::protobuf::uint8* Request_Subscribe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.Request.Subscribe)
  // optional .tigeropen.push.pb.SocketCommon.DataType dataType = 1;
  if (this->datatype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->datatype(), target);
  }

  // optional string symbols = 2;
  if (this->symbols().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbols().data(), this->symbols().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.Request.Subscribe.symbols");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbols(), target);
  }

  // optional string account = 3;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.Request.Subscribe.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional string market = 4;
  if (this->market().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->market().data(), this->market().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.Request.Subscribe.market");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->market(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.Request.Subscribe)
  return target;
}

size_t Request_Subscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.Request.Subscribe)
  size_t total_size = 0;

  // optional .tigeropen.push.pb.SocketCommon.DataType dataType = 1;
  if (this->datatype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
  }

  // optional string symbols = 2;
  if (this->symbols().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbols());
  }

  // optional string account = 3;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // optional string market = 4;
  if (this->market().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->market());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Subscribe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.Request.Subscribe)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request_Subscribe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_Subscribe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.Request.Subscribe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.Request.Subscribe)
    UnsafeMergeFrom(*source);
  }
}

void Request_Subscribe::MergeFrom(const Request_Subscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.Request.Subscribe)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Request_Subscribe::UnsafeMergeFrom(const Request_Subscribe& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.datatype() != 0) {
    set_datatype(from.datatype());
  }
  if (from.symbols().size() > 0) {

    symbols_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbols_);
  }
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.market().size() > 0) {

    market_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
}

void Request_Subscribe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.Request.Subscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Subscribe::CopyFrom(const Request_Subscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.Request.Subscribe)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Request_Subscribe::IsInitialized() const {

  return true;
}

void Request_Subscribe::Swap(Request_Subscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_Subscribe::InternalSwap(Request_Subscribe* other) {
  std::swap(datatype_, other->datatype_);
  symbols_.Swap(&other->symbols_);
  account_.Swap(&other->account_);
  market_.Swap(&other->market_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_Subscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Subscribe_descriptor_;
  metadata.reflection = Request_Subscribe_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kCommandFieldNumber;
const int Request::kIdFieldNumber;
const int Request::kSubscribeFieldNumber;
const int Request::kConnectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Request_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.Request)
}

void Request::InitAsDefaultInstance() {
  subscribe_ = const_cast< ::tigeropen::push::pb::Request_Subscribe*>(
      ::tigeropen::push::pb::Request_Subscribe::internal_default_instance());
  connect_ = const_cast< ::tigeropen::push::pb::Request_Connect*>(
      ::tigeropen::push::pb::Request_Connect::internal_default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.Request)
}

void Request::SharedCtor() {
  subscribe_ = NULL;
  connect_ = NULL;
  ::memset(&command_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&command_) + sizeof(id_));
  _cached_size_ = 0;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != &Request_default_instance_.get()) {
    delete subscribe_;
    delete connect_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  protobuf_InitDefaults_Request_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Request> Request_default_instance_;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.Request)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(command_, id_);
  if (GetArenaNoVirtual() == NULL && subscribe_ != NULL) delete subscribe_;
  subscribe_ = NULL;
  if (GetArenaNoVirtual() == NULL && connect_ != NULL) delete connect_;
  connect_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tigeropen.push.pb.SocketCommon.Command command = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_command(static_cast< ::tigeropen::push::pb::SocketCommon_Command >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_subscribe;
        break;
      }

      // optional .tigeropen.push.pb.Request.Subscribe subscribe = 3;
      case 3: {
        if (tag == 26) {
         parse_subscribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_connect;
        break;
      }

      // optional .tigeropen.push.pb.Request.Connect connect = 4;
      case 4: {
        if (tag == 34) {
         parse_connect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.Request)
  // optional .tigeropen.push.pb.SocketCommon.Command command = 1;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional .tigeropen.push.pb.Request.Subscribe subscribe = 3;
  if (this->has_subscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->subscribe_, output);
  }

  // optional .tigeropen.push.pb.Request.Connect connect = 4;
  if (this->has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->connect_, output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.Request)
  // optional .tigeropen.push.pb.SocketCommon.Command command = 1;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional .tigeropen.push.pb.Request.Subscribe subscribe = 3;
  if (this->has_subscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->subscribe_, false, target);
  }

  // optional .tigeropen.push.pb.Request.Connect connect = 4;
  if (this->has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->connect_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.Request)
  size_t total_size = 0;

  // optional .tigeropen.push.pb.SocketCommon.Command command = 1;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional .tigeropen.push.pb.Request.Subscribe subscribe = 3;
  if (this->has_subscribe()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->subscribe_);
  }

  // optional .tigeropen.push.pb.Request.Connect connect = 4;
  if (this->has_connect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->connect_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.Request)
    UnsafeMergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.Request)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Request::UnsafeMergeFrom(const Request& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.command() != 0) {
    set_command(from.command());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_subscribe()) {
    mutable_subscribe()->::tigeropen::push::pb::Request_Subscribe::MergeFrom(from.subscribe());
  }
  if (from.has_connect()) {
    mutable_connect()->::tigeropen::push::pb::Request_Connect::MergeFrom(from.connect());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.Request)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(command_, other->command_);
  std::swap(id_, other->id_);
  std::swap(subscribe_, other->subscribe_);
  std::swap(connect_, other->connect_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request_Connect

// optional string tigerId = 1;
void Request_Connect::clear_tigerid() {
  tigerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Request_Connect::tigerid() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Connect.tigerId)
  return tigerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request_Connect::set_tigerid(const ::std::string& value) {
  
  tigerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Connect.tigerId)
}
void Request_Connect::set_tigerid(const char* value) {
  
  tigerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.Request.Connect.tigerId)
}
void Request_Connect::set_tigerid(const char* value, size_t size) {
  
  tigerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.Request.Connect.tigerId)
}
::std::string* Request_Connect::mutable_tigerid() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Request.Connect.tigerId)
  return tigerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request_Connect::release_tigerid() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Request.Connect.tigerId)
  
  return tigerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request_Connect::set_allocated_tigerid(::std::string* tigerid) {
  if (tigerid != NULL) {
    
  } else {
    
  }
  tigerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tigerid);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Request.Connect.tigerId)
}

// optional string sign = 2;
void Request_Connect::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Request_Connect::sign() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Connect.sign)
  return sign_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request_Connect::set_sign(const ::std::string& value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Connect.sign)
}
void Request_Connect::set_sign(const char* value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.Request.Connect.sign)
}
void Request_Connect::set_sign(const char* value, size_t size) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.Request.Connect.sign)
}
::std::string* Request_Connect::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Request.Connect.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request_Connect::release_sign() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Request.Connect.sign)
  
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request_Connect::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Request.Connect.sign)
}

// optional string sdkVersion = 3;
void Request_Connect::clear_sdkversion() {
  sdkversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Request_Connect::sdkversion() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Connect.sdkVersion)
  return sdkversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request_Connect::set_sdkversion(const ::std::string& value) {
  
  sdkversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Connect.sdkVersion)
}
void Request_Connect::set_sdkversion(const char* value) {
  
  sdkversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.Request.Connect.sdkVersion)
}
void Request_Connect::set_sdkversion(const char* value, size_t size) {
  
  sdkversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.Request.Connect.sdkVersion)
}
::std::string* Request_Connect::mutable_sdkversion() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Request.Connect.sdkVersion)
  return sdkversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request_Connect::release_sdkversion() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Request.Connect.sdkVersion)
  
  return sdkversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request_Connect::set_allocated_sdkversion(::std::string* sdkversion) {
  if (sdkversion != NULL) {
    
  } else {
    
  }
  sdkversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdkversion);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Request.Connect.sdkVersion)
}

// optional string acceptVersion = 4;
void Request_Connect::clear_acceptversion() {
  acceptversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Request_Connect::acceptversion() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Connect.acceptVersion)
  return acceptversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request_Connect::set_acceptversion(const ::std::string& value) {
  
  acceptversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Connect.acceptVersion)
}
void Request_Connect::set_acceptversion(const char* value) {
  
  acceptversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.Request.Connect.acceptVersion)
}
void Request_Connect::set_acceptversion(const char* value, size_t size) {
  
  acceptversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.Request.Connect.acceptVersion)
}
::std::string* Request_Connect::mutable_acceptversion() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Request.Connect.acceptVersion)
  return acceptversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request_Connect::release_acceptversion() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Request.Connect.acceptVersion)
  
  return acceptversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request_Connect::set_allocated_acceptversion(::std::string* acceptversion) {
  if (acceptversion != NULL) {
    
  } else {
    
  }
  acceptversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acceptversion);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Request.Connect.acceptVersion)
}

// optional uint32 sendInterval = 5;
void Request_Connect::clear_sendinterval() {
  sendinterval_ = 0u;
}
::google::protobuf::uint32 Request_Connect::sendinterval() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Connect.sendInterval)
  return sendinterval_;
}
void Request_Connect::set_sendinterval(::google::protobuf::uint32 value) {
  
  sendinterval_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Connect.sendInterval)
}

// optional uint32 receiveInterval = 6;
void Request_Connect::clear_receiveinterval() {
  receiveinterval_ = 0u;
}
::google::protobuf::uint32 Request_Connect::receiveinterval() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Connect.receiveInterval)
  return receiveinterval_;
}
void Request_Connect::set_receiveinterval(::google::protobuf::uint32 value) {
  
  receiveinterval_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Connect.receiveInterval)
}

// optional bool useFullTick = 7;
void Request_Connect::clear_usefulltick() {
  usefulltick_ = false;
}
bool Request_Connect::usefulltick() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Connect.useFullTick)
  return usefulltick_;
}
void Request_Connect::set_usefulltick(bool value) {
  
  usefulltick_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Connect.useFullTick)
}

inline const Request_Connect* Request_Connect::internal_default_instance() {
  return &Request_Connect_default_instance_.get();
}
// -------------------------------------------------------------------

// Request_Subscribe

// optional .tigeropen.push.pb.SocketCommon.DataType dataType = 1;
void Request_Subscribe::clear_datatype() {
  datatype_ = 0;
}
::tigeropen::push::pb::SocketCommon_DataType Request_Subscribe::datatype() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Subscribe.dataType)
  return static_cast< ::tigeropen::push::pb::SocketCommon_DataType >(datatype_);
}
void Request_Subscribe::set_datatype(::tigeropen::push::pb::SocketCommon_DataType value) {
  
  datatype_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Subscribe.dataType)
}

// optional string symbols = 2;
void Request_Subscribe::clear_symbols() {
  symbols_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Request_Subscribe::symbols() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Subscribe.symbols)
  return symbols_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request_Subscribe::set_symbols(const ::std::string& value) {
  
  symbols_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Subscribe.symbols)
}
void Request_Subscribe::set_symbols(const char* value) {
  
  symbols_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.Request.Subscribe.symbols)
}
void Request_Subscribe::set_symbols(const char* value, size_t size) {
  
  symbols_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.Request.Subscribe.symbols)
}
::std::string* Request_Subscribe::mutable_symbols() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Request.Subscribe.symbols)
  return symbols_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request_Subscribe::release_symbols() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Request.Subscribe.symbols)
  
  return symbols_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request_Subscribe::set_allocated_symbols(::std::string* symbols) {
  if (symbols != NULL) {
    
  } else {
    
  }
  symbols_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbols);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Request.Subscribe.symbols)
}

// optional string account = 3;
void Request_Subscribe::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Request_Subscribe::account() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Subscribe.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request_Subscribe::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Subscribe.account)
}
void Request_Subscribe::set_account(const char* value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.Request.Subscribe.account)
}
void Request_Subscribe::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.Request.Subscribe.account)
}
::std::string* Request_Subscribe::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Request.Subscribe.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request_Subscribe::release_account() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Request.Subscribe.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request_Subscribe::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Request.Subscribe.account)
}

// optional string market = 4;
void Request_Subscribe::clear_market() {
  market_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Request_Subscribe::market() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Subscribe.market)
  return market_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request_Subscribe::set_market(const ::std::string& value) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Subscribe.market)
}
void Request_Subscribe::set_market(const char* value) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.Request.Subscribe.market)
}
void Request_Subscribe::set_market(const char* value, size_t size) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.Request.Subscribe.market)
}
::std::string* Request_Subscribe::mutable_market() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Request.Subscribe.market)
  return market_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request_Subscribe::release_market() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Request.Subscribe.market)
  
  return market_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request_Subscribe::set_allocated_market(::std::string* market) {
  if (market != NULL) {
    
  } else {
    
  }
  market_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Request.Subscribe.market)
}

inline const Request_Subscribe* Request_Subscribe::internal_default_instance() {
  return &Request_Subscribe_default_instance_.get();
}
// -------------------------------------------------------------------

// Request

// optional .tigeropen.push.pb.SocketCommon.Command command = 1;
void Request::clear_command() {
  command_ = 0;
}
::tigeropen::push::pb::SocketCommon_Command Request::command() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.command)
  return static_cast< ::tigeropen::push::pb::SocketCommon_Command >(command_);
}
void Request::set_command(::tigeropen::push::pb::SocketCommon_Command value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.command)
}

// optional uint32 id = 2;
void Request::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 Request::id() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.id)
  return id_;
}
void Request::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.id)
}

// optional .tigeropen.push.pb.Request.Subscribe subscribe = 3;
bool Request::has_subscribe() const {
  return this != internal_default_instance() && subscribe_ != NULL;
}
void Request::clear_subscribe() {
  if (GetArenaNoVirtual() == NULL && subscribe_ != NULL) delete subscribe_;
  subscribe_ = NULL;
}
const ::tigeropen::push::pb::Request_Subscribe& Request::subscribe() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.subscribe)
  return subscribe_ != NULL ? *subscribe_
                         : *::tigeropen::push::pb::Request_Subscribe::internal_default_instance();
}
::tigeropen::push::pb::Request_Subscribe* Request::mutable_subscribe() {
  
  if (subscribe_ == NULL) {
    subscribe_ = new ::tigeropen::push::pb::Request_Subscribe;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Request.subscribe)
  return subscribe_;
}
::tigeropen::push::pb::Request_Subscribe* Request::release_subscribe() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Request.subscribe)
  
  ::tigeropen::push::pb::Request_Subscribe* temp = subscribe_;
  subscribe_ = NULL;
  return temp;
}
void Request::set_allocated_subscribe(::tigeropen::push::pb::Request_Subscribe* subscribe) {
  delete subscribe_;
  subscribe_ = subscribe;
  if (subscribe) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Request.subscribe)
}

// optional .tigeropen.push.pb.Request.Connect connect = 4;
bool Request::has_connect() const {
  return this != internal_default_instance() && connect_ != NULL;
}
void Request::clear_connect() {
  if (GetArenaNoVirtual() == NULL && connect_ != NULL) delete connect_;
  connect_ = NULL;
}
const ::tigeropen::push::pb::Request_Connect& Request::connect() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.connect)
  return connect_ != NULL ? *connect_
                         : *::tigeropen::push::pb::Request_Connect::internal_default_instance();
}
::tigeropen::push::pb::Request_Connect* Request::mutable_connect() {
  
  if (connect_ == NULL) {
    connect_ = new ::tigeropen::push::pb::Request_Connect;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Request.connect)
  return connect_;
}
::tigeropen::push::pb::Request_Connect* Request::release_connect() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Request.connect)
  
  ::tigeropen::push::pb::Request_Connect* temp = connect_;
  connect_ = NULL;
  return temp;
}
void Request::set_allocated_connect(::tigeropen::push::pb::Request_Connect* connect) {
  delete connect_;
  connect_ = connect;
  if (connect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Request.connect)
}

inline const Request* Request::internal_default_instance() {
  return &Request_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace push
}  // namespace tigeropen

// @@protoc_insertion_point(global_scope)
