// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StockTopData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StockTopData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tigeropen {
namespace push {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* StockTopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockTopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockTopData_TopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockTopData_TopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockTopData_StockItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockTopData_StockItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_StockTopData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_StockTopData_2eproto() {
  protobuf_AddDesc_StockTopData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StockTopData.proto");
  GOOGLE_CHECK(file != NULL);
  StockTopData_descriptor_ = file->message_type(0);
  static const int StockTopData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTopData, market_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTopData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTopData, topdata_),
  };
  StockTopData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockTopData_descriptor_,
      StockTopData::internal_default_instance(),
      StockTopData_offsets_,
      -1,
      -1,
      -1,
      sizeof(StockTopData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTopData, _internal_metadata_));
  StockTopData_TopData_descriptor_ = StockTopData_descriptor_->nested_type(0);
  static const int StockTopData_TopData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTopData_TopData, targetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTopData_TopData, item_),
  };
  StockTopData_TopData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockTopData_TopData_descriptor_,
      StockTopData_TopData::internal_default_instance(),
      StockTopData_TopData_offsets_,
      -1,
      -1,
      -1,
      sizeof(StockTopData_TopData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTopData_TopData, _internal_metadata_));
  StockTopData_StockItem_descriptor_ = StockTopData_descriptor_->nested_type(1);
  static const int StockTopData_StockItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTopData_StockItem, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTopData_StockItem, latestprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTopData_StockItem, targetvalue_),
  };
  StockTopData_StockItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockTopData_StockItem_descriptor_,
      StockTopData_StockItem::internal_default_instance(),
      StockTopData_StockItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(StockTopData_StockItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTopData_StockItem, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StockTopData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockTopData_descriptor_, StockTopData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockTopData_TopData_descriptor_, StockTopData_TopData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockTopData_StockItem_descriptor_, StockTopData_StockItem::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StockTopData_2eproto() {
  StockTopData_default_instance_.Shutdown();
  delete StockTopData_reflection_;
  StockTopData_TopData_default_instance_.Shutdown();
  delete StockTopData_TopData_reflection_;
  StockTopData_StockItem_default_instance_.Shutdown();
  delete StockTopData_StockItem_reflection_;
}

void protobuf_InitDefaults_StockTopData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  StockTopData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  StockTopData_TopData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  StockTopData_StockItem_default_instance_.DefaultConstruct();
  StockTopData_default_instance_.get_mutable()->InitAsDefaultInstance();
  StockTopData_TopData_default_instance_.get_mutable()->InitAsDefaultInstance();
  StockTopData_StockItem_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_StockTopData_2eproto_once_);
void protobuf_InitDefaults_StockTopData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_StockTopData_2eproto_once_,
                 &protobuf_InitDefaults_StockTopData_2eproto_impl);
}
void protobuf_AddDesc_StockTopData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_StockTopData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022StockTopData.proto\022\021tigeropen.push.pb\""
    "\212\002\n\014StockTopData\022\016\n\006market\030\001 \001(\t\022\021\n\ttime"
    "stamp\030\002 \001(\003\0228\n\007topData\030\003 \003(\0132\'.tigeropen"
    ".push.pb.StockTopData.TopData\032V\n\007TopData"
    "\022\022\n\ntargetName\030\001 \001(\t\0227\n\004item\030\002 \003(\0132).tig"
    "eropen.push.pb.StockTopData.StockItem\032E\n"
    "\tStockItem\022\016\n\006symbol\030\001 \001(\t\022\023\n\013latestPric"
    "e\030\002 \001(\001\022\023\n\013targetValue\030\003 \001(\001b\006proto3", 316);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StockTopData.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StockTopData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_StockTopData_2eproto_once_);
void protobuf_AddDesc_StockTopData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_StockTopData_2eproto_once_,
                 &protobuf_AddDesc_StockTopData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StockTopData_2eproto {
  StaticDescriptorInitializer_StockTopData_2eproto() {
    protobuf_AddDesc_StockTopData_2eproto();
  }
} static_descriptor_initializer_StockTopData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockTopData_TopData::kTargetNameFieldNumber;
const int StockTopData_TopData::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockTopData_TopData::StockTopData_TopData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_StockTopData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.StockTopData.TopData)
}

void StockTopData_TopData::InitAsDefaultInstance() {
}

StockTopData_TopData::StockTopData_TopData(const StockTopData_TopData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.StockTopData.TopData)
}

void StockTopData_TopData::SharedCtor() {
  targetname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StockTopData_TopData::~StockTopData_TopData() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.StockTopData.TopData)
  SharedDtor();
}

void StockTopData_TopData::SharedDtor() {
  targetname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockTopData_TopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockTopData_TopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockTopData_TopData_descriptor_;
}

const StockTopData_TopData& StockTopData_TopData::default_instance() {
  protobuf_InitDefaults_StockTopData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StockTopData_TopData> StockTopData_TopData_default_instance_;

StockTopData_TopData* StockTopData_TopData::New(::google::protobuf::Arena* arena) const {
  StockTopData_TopData* n = new StockTopData_TopData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockTopData_TopData::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.StockTopData.TopData)
  targetname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_.Clear();
}

bool StockTopData_TopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.StockTopData.TopData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string targetName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->targetname().data(), this->targetname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.StockTopData.TopData.targetName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .tigeropen.push.pb.StockTopData.StockItem item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(input->IncrementRecursionDepth());
         parse_loop_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_item;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.StockTopData.TopData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.StockTopData.TopData)
  return false;
#undef DO_
}

void StockTopData_TopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.StockTopData.TopData)
  // optional string targetName = 1;
  if (this->targetname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.StockTopData.TopData.targetName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->targetname(), output);
  }

  // repeated .tigeropen.push.pb.StockTopData.StockItem item = 2;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.StockTopData.TopData)
}

::google::protobuf::uint8* StockTopData_TopData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.StockTopData.TopData)
  // optional string targetName = 1;
  if (this->targetname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.StockTopData.TopData.targetName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->targetname(), target);
  }

  // repeated .tigeropen.push.pb.StockTopData.StockItem item = 2;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->item(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.StockTopData.TopData)
  return target;
}

size_t StockTopData_TopData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.StockTopData.TopData)
  size_t total_size = 0;

  // optional string targetName = 1;
  if (this->targetname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetname());
  }

  // repeated .tigeropen.push.pb.StockTopData.StockItem item = 2;
  {
    unsigned int count = this->item_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockTopData_TopData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.StockTopData.TopData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockTopData_TopData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockTopData_TopData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.StockTopData.TopData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.StockTopData.TopData)
    UnsafeMergeFrom(*source);
  }
}

void StockTopData_TopData::MergeFrom(const StockTopData_TopData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.StockTopData.TopData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StockTopData_TopData::UnsafeMergeFrom(const StockTopData_TopData& from) {
  GOOGLE_DCHECK(&from != this);
  item_.MergeFrom(from.item_);
  if (from.targetname().size() > 0) {

    targetname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetname_);
  }
}

void StockTopData_TopData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.StockTopData.TopData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockTopData_TopData::CopyFrom(const StockTopData_TopData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.StockTopData.TopData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StockTopData_TopData::IsInitialized() const {

  return true;
}

void StockTopData_TopData::Swap(StockTopData_TopData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockTopData_TopData::InternalSwap(StockTopData_TopData* other) {
  targetname_.Swap(&other->targetname_);
  item_.UnsafeArenaSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockTopData_TopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockTopData_TopData_descriptor_;
  metadata.reflection = StockTopData_TopData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockTopData_StockItem::kSymbolFieldNumber;
const int StockTopData_StockItem::kLatestPriceFieldNumber;
const int StockTopData_StockItem::kTargetValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockTopData_StockItem::StockTopData_StockItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_StockTopData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.StockTopData.StockItem)
}

void StockTopData_StockItem::InitAsDefaultInstance() {
}

StockTopData_StockItem::StockTopData_StockItem(const StockTopData_StockItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.StockTopData.StockItem)
}

void StockTopData_StockItem::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&latestprice_, 0, reinterpret_cast<char*>(&targetvalue_) -
    reinterpret_cast<char*>(&latestprice_) + sizeof(targetvalue_));
  _cached_size_ = 0;
}

StockTopData_StockItem::~StockTopData_StockItem() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.StockTopData.StockItem)
  SharedDtor();
}

void StockTopData_StockItem::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockTopData_StockItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockTopData_StockItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockTopData_StockItem_descriptor_;
}

const StockTopData_StockItem& StockTopData_StockItem::default_instance() {
  protobuf_InitDefaults_StockTopData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StockTopData_StockItem> StockTopData_StockItem_default_instance_;

StockTopData_StockItem* StockTopData_StockItem::New(::google::protobuf::Arena* arena) const {
  StockTopData_StockItem* n = new StockTopData_StockItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockTopData_StockItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.StockTopData.StockItem)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StockTopData_StockItem, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StockTopData_StockItem*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(latestprice_, targetvalue_);
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool StockTopData_StockItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.StockTopData.StockItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.StockTopData.StockItem.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_latestPrice;
        break;
      }

      // optional double latestPrice = 2;
      case 2: {
        if (tag == 17) {
         parse_latestPrice:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latestprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_targetValue;
        break;
      }

      // optional double targetValue = 3;
      case 3: {
        if (tag == 25) {
         parse_targetValue:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &targetvalue_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.StockTopData.StockItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.StockTopData.StockItem)
  return false;
#undef DO_
}

void StockTopData_StockItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.StockTopData.StockItem)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.StockTopData.StockItem.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional double latestPrice = 2;
  if (this->latestprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latestprice(), output);
  }

  // optional double targetValue = 3;
  if (this->targetvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->targetvalue(), output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.StockTopData.StockItem)
}

::google::protobuf::uint8* StockTopData_StockItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.StockTopData.StockItem)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.StockTopData.StockItem.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional double latestPrice = 2;
  if (this->latestprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latestprice(), target);
  }

  // optional double targetValue = 3;
  if (this->targetvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->targetvalue(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.StockTopData.StockItem)
  return target;
}

size_t StockTopData_StockItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.StockTopData.StockItem)
  size_t total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional double latestPrice = 2;
  if (this->latestprice() != 0) {
    total_size += 1 + 8;
  }

  // optional double targetValue = 3;
  if (this->targetvalue() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockTopData_StockItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.StockTopData.StockItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockTopData_StockItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockTopData_StockItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.StockTopData.StockItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.StockTopData.StockItem)
    UnsafeMergeFrom(*source);
  }
}

void StockTopData_StockItem::MergeFrom(const StockTopData_StockItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.StockTopData.StockItem)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StockTopData_StockItem::UnsafeMergeFrom(const StockTopData_StockItem& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.latestprice() != 0) {
    set_latestprice(from.latestprice());
  }
  if (from.targetvalue() != 0) {
    set_targetvalue(from.targetvalue());
  }
}

void StockTopData_StockItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.StockTopData.StockItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockTopData_StockItem::CopyFrom(const StockTopData_StockItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.StockTopData.StockItem)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StockTopData_StockItem::IsInitialized() const {

  return true;
}

void StockTopData_StockItem::Swap(StockTopData_StockItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockTopData_StockItem::InternalSwap(StockTopData_StockItem* other) {
  symbol_.Swap(&other->symbol_);
  std::swap(latestprice_, other->latestprice_);
  std::swap(targetvalue_, other->targetvalue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockTopData_StockItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockTopData_StockItem_descriptor_;
  metadata.reflection = StockTopData_StockItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockTopData::kMarketFieldNumber;
const int StockTopData::kTimestampFieldNumber;
const int StockTopData::kTopDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockTopData::StockTopData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_StockTopData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.StockTopData)
}

void StockTopData::InitAsDefaultInstance() {
}

StockTopData::StockTopData(const StockTopData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.StockTopData)
}

void StockTopData::SharedCtor() {
  market_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

StockTopData::~StockTopData() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.StockTopData)
  SharedDtor();
}

void StockTopData::SharedDtor() {
  market_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockTopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockTopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockTopData_descriptor_;
}

const StockTopData& StockTopData::default_instance() {
  protobuf_InitDefaults_StockTopData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StockTopData> StockTopData_default_instance_;

StockTopData* StockTopData::New(::google::protobuf::Arena* arena) const {
  StockTopData* n = new StockTopData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockTopData::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.StockTopData)
  market_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  topdata_.Clear();
}

bool StockTopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.StockTopData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string market = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->market().data(), this->market().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.StockTopData.market"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_topData;
        break;
      }

      // repeated .tigeropen.push.pb.StockTopData.TopData topData = 3;
      case 3: {
        if (tag == 26) {
         parse_topData:
          DO_(input->IncrementRecursionDepth());
         parse_loop_topData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_topdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_topData;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.StockTopData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.StockTopData)
  return false;
#undef DO_
}

void StockTopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.StockTopData)
  // optional string market = 1;
  if (this->market().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->market().data(), this->market().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.StockTopData.market");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->market(), output);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // repeated .tigeropen.push.pb.StockTopData.TopData topData = 3;
  for (unsigned int i = 0, n = this->topdata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->topdata(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.StockTopData)
}

::google::protobuf::uint8* StockTopData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.StockTopData)
  // optional string market = 1;
  if (this->market().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->market().data(), this->market().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.StockTopData.market");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->market(), target);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // repeated .tigeropen.push.pb.StockTopData.TopData topData = 3;
  for (unsigned int i = 0, n = this->topdata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->topdata(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.StockTopData)
  return target;
}

size_t StockTopData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.StockTopData)
  size_t total_size = 0;

  // optional string market = 1;
  if (this->market().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->market());
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // repeated .tigeropen.push.pb.StockTopData.TopData topData = 3;
  {
    unsigned int count = this->topdata_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topdata(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockTopData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.StockTopData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockTopData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockTopData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.StockTopData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.StockTopData)
    UnsafeMergeFrom(*source);
  }
}

void StockTopData::MergeFrom(const StockTopData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.StockTopData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StockTopData::UnsafeMergeFrom(const StockTopData& from) {
  GOOGLE_DCHECK(&from != this);
  topdata_.MergeFrom(from.topdata_);
  if (from.market().size() > 0) {

    market_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void StockTopData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.StockTopData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockTopData::CopyFrom(const StockTopData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.StockTopData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StockTopData::IsInitialized() const {

  return true;
}

void StockTopData::Swap(StockTopData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockTopData::InternalSwap(StockTopData* other) {
  market_.Swap(&other->market_);
  std::swap(timestamp_, other->timestamp_);
  topdata_.UnsafeArenaSwap(&other->topdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockTopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockTopData_descriptor_;
  metadata.reflection = StockTopData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StockTopData_TopData

// optional string targetName = 1;
void StockTopData_TopData::clear_targetname() {
  targetname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StockTopData_TopData::targetname() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.StockTopData.TopData.targetName)
  return targetname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockTopData_TopData::set_targetname(const ::std::string& value) {
  
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.StockTopData.TopData.targetName)
}
void StockTopData_TopData::set_targetname(const char* value) {
  
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.StockTopData.TopData.targetName)
}
void StockTopData_TopData::set_targetname(const char* value, size_t size) {
  
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.StockTopData.TopData.targetName)
}
::std::string* StockTopData_TopData::mutable_targetname() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.StockTopData.TopData.targetName)
  return targetname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StockTopData_TopData::release_targetname() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.StockTopData.TopData.targetName)
  
  return targetname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockTopData_TopData::set_allocated_targetname(::std::string* targetname) {
  if (targetname != NULL) {
    
  } else {
    
  }
  targetname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetname);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.StockTopData.TopData.targetName)
}

// repeated .tigeropen.push.pb.StockTopData.StockItem item = 2;
int StockTopData_TopData::item_size() const {
  return item_.size();
}
void StockTopData_TopData::clear_item() {
  item_.Clear();
}
const ::tigeropen::push::pb::StockTopData_StockItem& StockTopData_TopData::item(int index) const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.StockTopData.TopData.item)
  return item_.Get(index);
}
::tigeropen::push::pb::StockTopData_StockItem* StockTopData_TopData::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.StockTopData.TopData.item)
  return item_.Mutable(index);
}
::tigeropen::push::pb::StockTopData_StockItem* StockTopData_TopData::add_item() {
  // @@protoc_insertion_point(field_add:tigeropen.push.pb.StockTopData.TopData.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::StockTopData_StockItem >*
StockTopData_TopData::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:tigeropen.push.pb.StockTopData.TopData.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::StockTopData_StockItem >&
StockTopData_TopData::item() const {
  // @@protoc_insertion_point(field_list:tigeropen.push.pb.StockTopData.TopData.item)
  return item_;
}

inline const StockTopData_TopData* StockTopData_TopData::internal_default_instance() {
  return &StockTopData_TopData_default_instance_.get();
}
// -------------------------------------------------------------------

// StockTopData_StockItem

// optional string symbol = 1;
void StockTopData_StockItem::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StockTopData_StockItem::symbol() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.StockTopData.StockItem.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockTopData_StockItem::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.StockTopData.StockItem.symbol)
}
void StockTopData_StockItem::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.StockTopData.StockItem.symbol)
}
void StockTopData_StockItem::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.StockTopData.StockItem.symbol)
}
::std::string* StockTopData_StockItem::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.StockTopData.StockItem.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StockTopData_StockItem::release_symbol() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.StockTopData.StockItem.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockTopData_StockItem::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.StockTopData.StockItem.symbol)
}

// optional double latestPrice = 2;
void StockTopData_StockItem::clear_latestprice() {
  latestprice_ = 0;
}
double StockTopData_StockItem::latestprice() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.StockTopData.StockItem.latestPrice)
  return latestprice_;
}
void StockTopData_StockItem::set_latestprice(double value) {
  
  latestprice_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.StockTopData.StockItem.latestPrice)
}

// optional double targetValue = 3;
void StockTopData_StockItem::clear_targetvalue() {
  targetvalue_ = 0;
}
double StockTopData_StockItem::targetvalue() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.StockTopData.StockItem.targetValue)
  return targetvalue_;
}
void StockTopData_StockItem::set_targetvalue(double value) {
  
  targetvalue_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.StockTopData.StockItem.targetValue)
}

inline const StockTopData_StockItem* StockTopData_StockItem::internal_default_instance() {
  return &StockTopData_StockItem_default_instance_.get();
}
// -------------------------------------------------------------------

// StockTopData

// optional string market = 1;
void StockTopData::clear_market() {
  market_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StockTopData::market() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.StockTopData.market)
  return market_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockTopData::set_market(const ::std::string& value) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.StockTopData.market)
}
void StockTopData::set_market(const char* value) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.StockTopData.market)
}
void StockTopData::set_market(const char* value, size_t size) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.StockTopData.market)
}
::std::string* StockTopData::mutable_market() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.StockTopData.market)
  return market_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StockTopData::release_market() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.StockTopData.market)
  
  return market_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockTopData::set_allocated_market(::std::string* market) {
  if (market != NULL) {
    
  } else {
    
  }
  market_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.StockTopData.market)
}

// optional int64 timestamp = 2;
void StockTopData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 StockTopData::timestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.StockTopData.timestamp)
  return timestamp_;
}
void StockTopData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.StockTopData.timestamp)
}

// repeated .tigeropen.push.pb.StockTopData.TopData topData = 3;
int StockTopData::topdata_size() const {
  return topdata_.size();
}
void StockTopData::clear_topdata() {
  topdata_.Clear();
}
const ::tigeropen::push::pb::StockTopData_TopData& StockTopData::topdata(int index) const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.StockTopData.topData)
  return topdata_.Get(index);
}
::tigeropen::push::pb::StockTopData_TopData* StockTopData::mutable_topdata(int index) {
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.StockTopData.topData)
  return topdata_.Mutable(index);
}
::tigeropen::push::pb::StockTopData_TopData* StockTopData::add_topdata() {
  // @@protoc_insertion_point(field_add:tigeropen.push.pb.StockTopData.topData)
  return topdata_.Add();
}
::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::StockTopData_TopData >*
StockTopData::mutable_topdata() {
  // @@protoc_insertion_point(field_mutable_list:tigeropen.push.pb.StockTopData.topData)
  return &topdata_;
}
const ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::StockTopData_TopData >&
StockTopData::topdata() const {
  // @@protoc_insertion_point(field_list:tigeropen.push.pb.StockTopData.topData)
  return topdata_;
}

inline const StockTopData* StockTopData::internal_default_instance() {
  return &StockTopData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace push
}  // namespace tigeropen

// @@protoc_insertion_point(global_scope)
