// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OptionTopData.proto

#ifndef PROTOBUF_OptionTopData_2eproto__INCLUDED
#define PROTOBUF_OptionTopData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tigeropen {
namespace push {
namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_OptionTopData_2eproto();
void protobuf_InitDefaults_OptionTopData_2eproto();
void protobuf_AssignDesc_OptionTopData_2eproto();
void protobuf_ShutdownFile_OptionTopData_2eproto();

class OptionTopData;
class OptionTopData_BigOrder;
class OptionTopData_OptionItem;
class OptionTopData_TopData;

// ===================================================================

class OptionTopData_TopData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tigeropen.push.pb.OptionTopData.TopData) */ {
 public:
  OptionTopData_TopData();
  virtual ~OptionTopData_TopData();

  OptionTopData_TopData(const OptionTopData_TopData& from);

  inline OptionTopData_TopData& operator=(const OptionTopData_TopData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionTopData_TopData& default_instance();

  static const OptionTopData_TopData* internal_default_instance();

  void Swap(OptionTopData_TopData* other);

  // implements Message ----------------------------------------------

  inline OptionTopData_TopData* New() const { return New(NULL); }

  OptionTopData_TopData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptionTopData_TopData& from);
  void MergeFrom(const OptionTopData_TopData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OptionTopData_TopData* other);
  void UnsafeMergeFrom(const OptionTopData_TopData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string targetName = 1;
  void clear_targetname();
  static const int kTargetNameFieldNumber = 1;
  const ::std::string& targetname() const;
  void set_targetname(const ::std::string& value);
  void set_targetname(const char* value);
  void set_targetname(const char* value, size_t size);
  ::std::string* mutable_targetname();
  ::std::string* release_targetname();
  void set_allocated_targetname(::std::string* targetname);

  // repeated .tigeropen.push.pb.OptionTopData.BigOrder bigOrder = 2;
  int bigorder_size() const;
  void clear_bigorder();
  static const int kBigOrderFieldNumber = 2;
  const ::tigeropen::push::pb::OptionTopData_BigOrder& bigorder(int index) const;
  ::tigeropen::push::pb::OptionTopData_BigOrder* mutable_bigorder(int index);
  ::tigeropen::push::pb::OptionTopData_BigOrder* add_bigorder();
  ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_BigOrder >*
      mutable_bigorder();
  const ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_BigOrder >&
      bigorder() const;

  // repeated .tigeropen.push.pb.OptionTopData.OptionItem item = 3;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 3;
  const ::tigeropen::push::pb::OptionTopData_OptionItem& item(int index) const;
  ::tigeropen::push::pb::OptionTopData_OptionItem* mutable_item(int index);
  ::tigeropen::push::pb::OptionTopData_OptionItem* add_item();
  ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_OptionItem >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_OptionItem >&
      item() const;

  // @@protoc_insertion_point(class_scope:tigeropen.push.pb.OptionTopData.TopData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_BigOrder > bigorder_;
  ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_OptionItem > item_;
  ::google::protobuf::internal::ArenaStringPtr targetname_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_OptionTopData_2eproto_impl();
  friend void  protobuf_AddDesc_OptionTopData_2eproto_impl();
  friend void protobuf_AssignDesc_OptionTopData_2eproto();
  friend void protobuf_ShutdownFile_OptionTopData_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<OptionTopData_TopData> OptionTopData_TopData_default_instance_;

// -------------------------------------------------------------------

class OptionTopData_BigOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tigeropen.push.pb.OptionTopData.BigOrder) */ {
 public:
  OptionTopData_BigOrder();
  virtual ~OptionTopData_BigOrder();

  OptionTopData_BigOrder(const OptionTopData_BigOrder& from);

  inline OptionTopData_BigOrder& operator=(const OptionTopData_BigOrder& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionTopData_BigOrder& default_instance();

  static const OptionTopData_BigOrder* internal_default_instance();

  void Swap(OptionTopData_BigOrder* other);

  // implements Message ----------------------------------------------

  inline OptionTopData_BigOrder* New() const { return New(NULL); }

  OptionTopData_BigOrder* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptionTopData_BigOrder& from);
  void MergeFrom(const OptionTopData_BigOrder& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OptionTopData_BigOrder* other);
  void UnsafeMergeFrom(const OptionTopData_BigOrder& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional string expiry = 2;
  void clear_expiry();
  static const int kExpiryFieldNumber = 2;
  const ::std::string& expiry() const;
  void set_expiry(const ::std::string& value);
  void set_expiry(const char* value);
  void set_expiry(const char* value, size_t size);
  ::std::string* mutable_expiry();
  ::std::string* release_expiry();
  void set_allocated_expiry(::std::string* expiry);

  // optional string strike = 3;
  void clear_strike();
  static const int kStrikeFieldNumber = 3;
  const ::std::string& strike() const;
  void set_strike(const ::std::string& value);
  void set_strike(const char* value);
  void set_strike(const char* value, size_t size);
  ::std::string* mutable_strike();
  ::std::string* release_strike();
  void set_allocated_strike(::std::string* strike);

  // optional string right = 4;
  void clear_right();
  static const int kRightFieldNumber = 4;
  const ::std::string& right() const;
  void set_right(const ::std::string& value);
  void set_right(const char* value);
  void set_right(const char* value, size_t size);
  ::std::string* mutable_right();
  ::std::string* release_right();
  void set_allocated_right(::std::string* right);

  // optional string dir = 5;
  void clear_dir();
  static const int kDirFieldNumber = 5;
  const ::std::string& dir() const;
  void set_dir(const ::std::string& value);
  void set_dir(const char* value);
  void set_dir(const char* value, size_t size);
  ::std::string* mutable_dir();
  ::std::string* release_dir();
  void set_allocated_dir(::std::string* dir);

  // optional double volume = 6;
  void clear_volume();
  static const int kVolumeFieldNumber = 6;
  double volume() const;
  void set_volume(double value);

  // optional double price = 7;
  void clear_price();
  static const int kPriceFieldNumber = 7;
  double price() const;
  void set_price(double value);

  // optional double amount = 8;
  void clear_amount();
  static const int kAmountFieldNumber = 8;
  double amount() const;
  void set_amount(double value);

  // optional int64 tradeTime = 9;
  void clear_tradetime();
  static const int kTradeTimeFieldNumber = 9;
  ::google::protobuf::int64 tradetime() const;
  void set_tradetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tigeropen.push.pb.OptionTopData.BigOrder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr expiry_;
  ::google::protobuf::internal::ArenaStringPtr strike_;
  ::google::protobuf::internal::ArenaStringPtr right_;
  ::google::protobuf::internal::ArenaStringPtr dir_;
  double volume_;
  double price_;
  double amount_;
  ::google::protobuf::int64 tradetime_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_OptionTopData_2eproto_impl();
  friend void  protobuf_AddDesc_OptionTopData_2eproto_impl();
  friend void protobuf_AssignDesc_OptionTopData_2eproto();
  friend void protobuf_ShutdownFile_OptionTopData_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<OptionTopData_BigOrder> OptionTopData_BigOrder_default_instance_;

// -------------------------------------------------------------------

class OptionTopData_OptionItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tigeropen.push.pb.OptionTopData.OptionItem) */ {
 public:
  OptionTopData_OptionItem();
  virtual ~OptionTopData_OptionItem();

  OptionTopData_OptionItem(const OptionTopData_OptionItem& from);

  inline OptionTopData_OptionItem& operator=(const OptionTopData_OptionItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionTopData_OptionItem& default_instance();

  static const OptionTopData_OptionItem* internal_default_instance();

  void Swap(OptionTopData_OptionItem* other);

  // implements Message ----------------------------------------------

  inline OptionTopData_OptionItem* New() const { return New(NULL); }

  OptionTopData_OptionItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptionTopData_OptionItem& from);
  void MergeFrom(const OptionTopData_OptionItem& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OptionTopData_OptionItem* other);
  void UnsafeMergeFrom(const OptionTopData_OptionItem& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional string expiry = 2;
  void clear_expiry();
  static const int kExpiryFieldNumber = 2;
  const ::std::string& expiry() const;
  void set_expiry(const ::std::string& value);
  void set_expiry(const char* value);
  void set_expiry(const char* value, size_t size);
  ::std::string* mutable_expiry();
  ::std::string* release_expiry();
  void set_allocated_expiry(::std::string* expiry);

  // optional string strike = 3;
  void clear_strike();
  static const int kStrikeFieldNumber = 3;
  const ::std::string& strike() const;
  void set_strike(const ::std::string& value);
  void set_strike(const char* value);
  void set_strike(const char* value, size_t size);
  ::std::string* mutable_strike();
  ::std::string* release_strike();
  void set_allocated_strike(::std::string* strike);

  // optional string right = 4;
  void clear_right();
  static const int kRightFieldNumber = 4;
  const ::std::string& right() const;
  void set_right(const ::std::string& value);
  void set_right(const char* value);
  void set_right(const char* value, size_t size);
  ::std::string* mutable_right();
  ::std::string* release_right();
  void set_allocated_right(::std::string* right);

  // optional double totalAmount = 5;
  void clear_totalamount();
  static const int kTotalAmountFieldNumber = 5;
  double totalamount() const;
  void set_totalamount(double value);

  // optional double totalVolume = 6;
  void clear_totalvolume();
  static const int kTotalVolumeFieldNumber = 6;
  double totalvolume() const;
  void set_totalvolume(double value);

  // optional double totalOpenInt = 7;
  void clear_totalopenint();
  static const int kTotalOpenIntFieldNumber = 7;
  double totalopenint() const;
  void set_totalopenint(double value);

  // optional double volumeToOpenInt = 8;
  void clear_volumetoopenint();
  static const int kVolumeToOpenIntFieldNumber = 8;
  double volumetoopenint() const;
  void set_volumetoopenint(double value);

  // optional double latestPrice = 9;
  void clear_latestprice();
  static const int kLatestPriceFieldNumber = 9;
  double latestprice() const;
  void set_latestprice(double value);

  // optional int64 updateTime = 10;
  void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 10;
  ::google::protobuf::int64 updatetime() const;
  void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tigeropen.push.pb.OptionTopData.OptionItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr expiry_;
  ::google::protobuf::internal::ArenaStringPtr strike_;
  ::google::protobuf::internal::ArenaStringPtr right_;
  double totalamount_;
  double totalvolume_;
  double totalopenint_;
  double volumetoopenint_;
  double latestprice_;
  ::google::protobuf::int64 updatetime_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_OptionTopData_2eproto_impl();
  friend void  protobuf_AddDesc_OptionTopData_2eproto_impl();
  friend void protobuf_AssignDesc_OptionTopData_2eproto();
  friend void protobuf_ShutdownFile_OptionTopData_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<OptionTopData_OptionItem> OptionTopData_OptionItem_default_instance_;

// -------------------------------------------------------------------

class OptionTopData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tigeropen.push.pb.OptionTopData) */ {
 public:
  OptionTopData();
  virtual ~OptionTopData();

  OptionTopData(const OptionTopData& from);

  inline OptionTopData& operator=(const OptionTopData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionTopData& default_instance();

  static const OptionTopData* internal_default_instance();

  void Swap(OptionTopData* other);

  // implements Message ----------------------------------------------

  inline OptionTopData* New() const { return New(NULL); }

  OptionTopData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptionTopData& from);
  void MergeFrom(const OptionTopData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OptionTopData* other);
  void UnsafeMergeFrom(const OptionTopData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OptionTopData_TopData TopData;
  typedef OptionTopData_BigOrder BigOrder;
  typedef OptionTopData_OptionItem OptionItem;

  // accessors -------------------------------------------------------

  // optional string market = 1;
  void clear_market();
  static const int kMarketFieldNumber = 1;
  const ::std::string& market() const;
  void set_market(const ::std::string& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  ::std::string* mutable_market();
  ::std::string* release_market();
  void set_allocated_market(::std::string* market);

  // optional int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // repeated .tigeropen.push.pb.OptionTopData.TopData topData = 3;
  int topdata_size() const;
  void clear_topdata();
  static const int kTopDataFieldNumber = 3;
  const ::tigeropen::push::pb::OptionTopData_TopData& topdata(int index) const;
  ::tigeropen::push::pb::OptionTopData_TopData* mutable_topdata(int index);
  ::tigeropen::push::pb::OptionTopData_TopData* add_topdata();
  ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_TopData >*
      mutable_topdata();
  const ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_TopData >&
      topdata() const;

  // @@protoc_insertion_point(class_scope:tigeropen.push.pb.OptionTopData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_TopData > topdata_;
  ::google::protobuf::internal::ArenaStringPtr market_;
  ::google::protobuf::int64 timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_OptionTopData_2eproto_impl();
  friend void  protobuf_AddDesc_OptionTopData_2eproto_impl();
  friend void protobuf_AssignDesc_OptionTopData_2eproto();
  friend void protobuf_ShutdownFile_OptionTopData_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<OptionTopData> OptionTopData_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// OptionTopData_TopData

// optional string targetName = 1;
inline void OptionTopData_TopData::clear_targetname() {
  targetname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionTopData_TopData::targetname() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.TopData.targetName)
  return targetname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_TopData::set_targetname(const ::std::string& value) {
  
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.TopData.targetName)
}
inline void OptionTopData_TopData::set_targetname(const char* value) {
  
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.TopData.targetName)
}
inline void OptionTopData_TopData::set_targetname(const char* value, size_t size) {
  
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.TopData.targetName)
}
inline ::std::string* OptionTopData_TopData::mutable_targetname() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.TopData.targetName)
  return targetname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionTopData_TopData::release_targetname() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.TopData.targetName)
  
  return targetname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_TopData::set_allocated_targetname(::std::string* targetname) {
  if (targetname != NULL) {
    
  } else {
    
  }
  targetname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetname);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.TopData.targetName)
}

// repeated .tigeropen.push.pb.OptionTopData.BigOrder bigOrder = 2;
inline int OptionTopData_TopData::bigorder_size() const {
  return bigorder_.size();
}
inline void OptionTopData_TopData::clear_bigorder() {
  bigorder_.Clear();
}
inline const ::tigeropen::push::pb::OptionTopData_BigOrder& OptionTopData_TopData::bigorder(int index) const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.TopData.bigOrder)
  return bigorder_.Get(index);
}
inline ::tigeropen::push::pb::OptionTopData_BigOrder* OptionTopData_TopData::mutable_bigorder(int index) {
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.TopData.bigOrder)
  return bigorder_.Mutable(index);
}
inline ::tigeropen::push::pb::OptionTopData_BigOrder* OptionTopData_TopData::add_bigorder() {
  // @@protoc_insertion_point(field_add:tigeropen.push.pb.OptionTopData.TopData.bigOrder)
  return bigorder_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_BigOrder >*
OptionTopData_TopData::mutable_bigorder() {
  // @@protoc_insertion_point(field_mutable_list:tigeropen.push.pb.OptionTopData.TopData.bigOrder)
  return &bigorder_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_BigOrder >&
OptionTopData_TopData::bigorder() const {
  // @@protoc_insertion_point(field_list:tigeropen.push.pb.OptionTopData.TopData.bigOrder)
  return bigorder_;
}

// repeated .tigeropen.push.pb.OptionTopData.OptionItem item = 3;
inline int OptionTopData_TopData::item_size() const {
  return item_.size();
}
inline void OptionTopData_TopData::clear_item() {
  item_.Clear();
}
inline const ::tigeropen::push::pb::OptionTopData_OptionItem& OptionTopData_TopData::item(int index) const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.TopData.item)
  return item_.Get(index);
}
inline ::tigeropen::push::pb::OptionTopData_OptionItem* OptionTopData_TopData::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.TopData.item)
  return item_.Mutable(index);
}
inline ::tigeropen::push::pb::OptionTopData_OptionItem* OptionTopData_TopData::add_item() {
  // @@protoc_insertion_point(field_add:tigeropen.push.pb.OptionTopData.TopData.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_OptionItem >*
OptionTopData_TopData::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:tigeropen.push.pb.OptionTopData.TopData.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_OptionItem >&
OptionTopData_TopData::item() const {
  // @@protoc_insertion_point(field_list:tigeropen.push.pb.OptionTopData.TopData.item)
  return item_;
}

inline const OptionTopData_TopData* OptionTopData_TopData::internal_default_instance() {
  return &OptionTopData_TopData_default_instance_.get();
}
// -------------------------------------------------------------------

// OptionTopData_BigOrder

// optional string symbol = 1;
inline void OptionTopData_BigOrder::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionTopData_BigOrder::symbol() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.BigOrder.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_BigOrder::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.BigOrder.symbol)
}
inline void OptionTopData_BigOrder::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.BigOrder.symbol)
}
inline void OptionTopData_BigOrder::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.BigOrder.symbol)
}
inline ::std::string* OptionTopData_BigOrder::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.BigOrder.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionTopData_BigOrder::release_symbol() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.BigOrder.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_BigOrder::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.BigOrder.symbol)
}

// optional string expiry = 2;
inline void OptionTopData_BigOrder::clear_expiry() {
  expiry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionTopData_BigOrder::expiry() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.BigOrder.expiry)
  return expiry_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_BigOrder::set_expiry(const ::std::string& value) {
  
  expiry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.BigOrder.expiry)
}
inline void OptionTopData_BigOrder::set_expiry(const char* value) {
  
  expiry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.BigOrder.expiry)
}
inline void OptionTopData_BigOrder::set_expiry(const char* value, size_t size) {
  
  expiry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.BigOrder.expiry)
}
inline ::std::string* OptionTopData_BigOrder::mutable_expiry() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.BigOrder.expiry)
  return expiry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionTopData_BigOrder::release_expiry() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.BigOrder.expiry)
  
  return expiry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_BigOrder::set_allocated_expiry(::std::string* expiry) {
  if (expiry != NULL) {
    
  } else {
    
  }
  expiry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expiry);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.BigOrder.expiry)
}

// optional string strike = 3;
inline void OptionTopData_BigOrder::clear_strike() {
  strike_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionTopData_BigOrder::strike() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.BigOrder.strike)
  return strike_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_BigOrder::set_strike(const ::std::string& value) {
  
  strike_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.BigOrder.strike)
}
inline void OptionTopData_BigOrder::set_strike(const char* value) {
  
  strike_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.BigOrder.strike)
}
inline void OptionTopData_BigOrder::set_strike(const char* value, size_t size) {
  
  strike_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.BigOrder.strike)
}
inline ::std::string* OptionTopData_BigOrder::mutable_strike() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.BigOrder.strike)
  return strike_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionTopData_BigOrder::release_strike() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.BigOrder.strike)
  
  return strike_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_BigOrder::set_allocated_strike(::std::string* strike) {
  if (strike != NULL) {
    
  } else {
    
  }
  strike_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strike);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.BigOrder.strike)
}

// optional string right = 4;
inline void OptionTopData_BigOrder::clear_right() {
  right_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionTopData_BigOrder::right() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.BigOrder.right)
  return right_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_BigOrder::set_right(const ::std::string& value) {
  
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.BigOrder.right)
}
inline void OptionTopData_BigOrder::set_right(const char* value) {
  
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.BigOrder.right)
}
inline void OptionTopData_BigOrder::set_right(const char* value, size_t size) {
  
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.BigOrder.right)
}
inline ::std::string* OptionTopData_BigOrder::mutable_right() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.BigOrder.right)
  return right_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionTopData_BigOrder::release_right() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.BigOrder.right)
  
  return right_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_BigOrder::set_allocated_right(::std::string* right) {
  if (right != NULL) {
    
  } else {
    
  }
  right_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.BigOrder.right)
}

// optional string dir = 5;
inline void OptionTopData_BigOrder::clear_dir() {
  dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionTopData_BigOrder::dir() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.BigOrder.dir)
  return dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_BigOrder::set_dir(const ::std::string& value) {
  
  dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.BigOrder.dir)
}
inline void OptionTopData_BigOrder::set_dir(const char* value) {
  
  dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.BigOrder.dir)
}
inline void OptionTopData_BigOrder::set_dir(const char* value, size_t size) {
  
  dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.BigOrder.dir)
}
inline ::std::string* OptionTopData_BigOrder::mutable_dir() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.BigOrder.dir)
  return dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionTopData_BigOrder::release_dir() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.BigOrder.dir)
  
  return dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_BigOrder::set_allocated_dir(::std::string* dir) {
  if (dir != NULL) {
    
  } else {
    
  }
  dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dir);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.BigOrder.dir)
}

// optional double volume = 6;
inline void OptionTopData_BigOrder::clear_volume() {
  volume_ = 0;
}
inline double OptionTopData_BigOrder::volume() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.BigOrder.volume)
  return volume_;
}
inline void OptionTopData_BigOrder::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.BigOrder.volume)
}

// optional double price = 7;
inline void OptionTopData_BigOrder::clear_price() {
  price_ = 0;
}
inline double OptionTopData_BigOrder::price() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.BigOrder.price)
  return price_;
}
inline void OptionTopData_BigOrder::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.BigOrder.price)
}

// optional double amount = 8;
inline void OptionTopData_BigOrder::clear_amount() {
  amount_ = 0;
}
inline double OptionTopData_BigOrder::amount() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.BigOrder.amount)
  return amount_;
}
inline void OptionTopData_BigOrder::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.BigOrder.amount)
}

// optional int64 tradeTime = 9;
inline void OptionTopData_BigOrder::clear_tradetime() {
  tradetime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 OptionTopData_BigOrder::tradetime() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.BigOrder.tradeTime)
  return tradetime_;
}
inline void OptionTopData_BigOrder::set_tradetime(::google::protobuf::int64 value) {
  
  tradetime_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.BigOrder.tradeTime)
}

inline const OptionTopData_BigOrder* OptionTopData_BigOrder::internal_default_instance() {
  return &OptionTopData_BigOrder_default_instance_.get();
}
// -------------------------------------------------------------------

// OptionTopData_OptionItem

// optional string symbol = 1;
inline void OptionTopData_OptionItem::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionTopData_OptionItem::symbol() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_OptionItem::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.symbol)
}
inline void OptionTopData_OptionItem::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.OptionItem.symbol)
}
inline void OptionTopData_OptionItem::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.OptionItem.symbol)
}
inline ::std::string* OptionTopData_OptionItem::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.OptionItem.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionTopData_OptionItem::release_symbol() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.OptionItem.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_OptionItem::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.OptionItem.symbol)
}

// optional string expiry = 2;
inline void OptionTopData_OptionItem::clear_expiry() {
  expiry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionTopData_OptionItem::expiry() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.expiry)
  return expiry_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_OptionItem::set_expiry(const ::std::string& value) {
  
  expiry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.expiry)
}
inline void OptionTopData_OptionItem::set_expiry(const char* value) {
  
  expiry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.OptionItem.expiry)
}
inline void OptionTopData_OptionItem::set_expiry(const char* value, size_t size) {
  
  expiry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.OptionItem.expiry)
}
inline ::std::string* OptionTopData_OptionItem::mutable_expiry() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.OptionItem.expiry)
  return expiry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionTopData_OptionItem::release_expiry() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.OptionItem.expiry)
  
  return expiry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_OptionItem::set_allocated_expiry(::std::string* expiry) {
  if (expiry != NULL) {
    
  } else {
    
  }
  expiry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expiry);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.OptionItem.expiry)
}

// optional string strike = 3;
inline void OptionTopData_OptionItem::clear_strike() {
  strike_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionTopData_OptionItem::strike() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.strike)
  return strike_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_OptionItem::set_strike(const ::std::string& value) {
  
  strike_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.strike)
}
inline void OptionTopData_OptionItem::set_strike(const char* value) {
  
  strike_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.OptionItem.strike)
}
inline void OptionTopData_OptionItem::set_strike(const char* value, size_t size) {
  
  strike_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.OptionItem.strike)
}
inline ::std::string* OptionTopData_OptionItem::mutable_strike() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.OptionItem.strike)
  return strike_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionTopData_OptionItem::release_strike() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.OptionItem.strike)
  
  return strike_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_OptionItem::set_allocated_strike(::std::string* strike) {
  if (strike != NULL) {
    
  } else {
    
  }
  strike_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strike);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.OptionItem.strike)
}

// optional string right = 4;
inline void OptionTopData_OptionItem::clear_right() {
  right_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionTopData_OptionItem::right() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.right)
  return right_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_OptionItem::set_right(const ::std::string& value) {
  
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.right)
}
inline void OptionTopData_OptionItem::set_right(const char* value) {
  
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.OptionItem.right)
}
inline void OptionTopData_OptionItem::set_right(const char* value, size_t size) {
  
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.OptionItem.right)
}
inline ::std::string* OptionTopData_OptionItem::mutable_right() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.OptionItem.right)
  return right_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionTopData_OptionItem::release_right() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.OptionItem.right)
  
  return right_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData_OptionItem::set_allocated_right(::std::string* right) {
  if (right != NULL) {
    
  } else {
    
  }
  right_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.OptionItem.right)
}

// optional double totalAmount = 5;
inline void OptionTopData_OptionItem::clear_totalamount() {
  totalamount_ = 0;
}
inline double OptionTopData_OptionItem::totalamount() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.totalAmount)
  return totalamount_;
}
inline void OptionTopData_OptionItem::set_totalamount(double value) {
  
  totalamount_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.totalAmount)
}

// optional double totalVolume = 6;
inline void OptionTopData_OptionItem::clear_totalvolume() {
  totalvolume_ = 0;
}
inline double OptionTopData_OptionItem::totalvolume() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.totalVolume)
  return totalvolume_;
}
inline void OptionTopData_OptionItem::set_totalvolume(double value) {
  
  totalvolume_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.totalVolume)
}

// optional double totalOpenInt = 7;
inline void OptionTopData_OptionItem::clear_totalopenint() {
  totalopenint_ = 0;
}
inline double OptionTopData_OptionItem::totalopenint() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.totalOpenInt)
  return totalopenint_;
}
inline void OptionTopData_OptionItem::set_totalopenint(double value) {
  
  totalopenint_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.totalOpenInt)
}

// optional double volumeToOpenInt = 8;
inline void OptionTopData_OptionItem::clear_volumetoopenint() {
  volumetoopenint_ = 0;
}
inline double OptionTopData_OptionItem::volumetoopenint() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.volumeToOpenInt)
  return volumetoopenint_;
}
inline void OptionTopData_OptionItem::set_volumetoopenint(double value) {
  
  volumetoopenint_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.volumeToOpenInt)
}

// optional double latestPrice = 9;
inline void OptionTopData_OptionItem::clear_latestprice() {
  latestprice_ = 0;
}
inline double OptionTopData_OptionItem::latestprice() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.latestPrice)
  return latestprice_;
}
inline void OptionTopData_OptionItem::set_latestprice(double value) {
  
  latestprice_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.latestPrice)
}

// optional int64 updateTime = 10;
inline void OptionTopData_OptionItem::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 OptionTopData_OptionItem::updatetime() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.updateTime)
  return updatetime_;
}
inline void OptionTopData_OptionItem::set_updatetime(::google::protobuf::int64 value) {
  
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.updateTime)
}

inline const OptionTopData_OptionItem* OptionTopData_OptionItem::internal_default_instance() {
  return &OptionTopData_OptionItem_default_instance_.get();
}
// -------------------------------------------------------------------

// OptionTopData

// optional string market = 1;
inline void OptionTopData::clear_market() {
  market_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionTopData::market() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.market)
  return market_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData::set_market(const ::std::string& value) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.market)
}
inline void OptionTopData::set_market(const char* value) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.market)
}
inline void OptionTopData::set_market(const char* value, size_t size) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.market)
}
inline ::std::string* OptionTopData::mutable_market() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.market)
  return market_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionTopData::release_market() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.market)
  
  return market_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTopData::set_allocated_market(::std::string* market) {
  if (market != NULL) {
    
  } else {
    
  }
  market_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.market)
}

// optional int64 timestamp = 2;
inline void OptionTopData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 OptionTopData::timestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.timestamp)
  return timestamp_;
}
inline void OptionTopData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.timestamp)
}

// repeated .tigeropen.push.pb.OptionTopData.TopData topData = 3;
inline int OptionTopData::topdata_size() const {
  return topdata_.size();
}
inline void OptionTopData::clear_topdata() {
  topdata_.Clear();
}
inline const ::tigeropen::push::pb::OptionTopData_TopData& OptionTopData::topdata(int index) const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.topData)
  return topdata_.Get(index);
}
inline ::tigeropen::push::pb::OptionTopData_TopData* OptionTopData::mutable_topdata(int index) {
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.topData)
  return topdata_.Mutable(index);
}
inline ::tigeropen::push::pb::OptionTopData_TopData* OptionTopData::add_topdata() {
  // @@protoc_insertion_point(field_add:tigeropen.push.pb.OptionTopData.topData)
  return topdata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_TopData >*
OptionTopData::mutable_topdata() {
  // @@protoc_insertion_point(field_mutable_list:tigeropen.push.pb.OptionTopData.topData)
  return &topdata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_TopData >&
OptionTopData::topdata() const {
  // @@protoc_insertion_point(field_list:tigeropen.push.pb.OptionTopData.topData)
  return topdata_;
}

inline const OptionTopData* OptionTopData::internal_default_instance() {
  return &OptionTopData_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace push
}  // namespace tigeropen

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_OptionTopData_2eproto__INCLUDED
