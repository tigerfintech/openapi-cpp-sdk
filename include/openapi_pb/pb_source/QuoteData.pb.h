// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QuoteData.proto

#ifndef PROTOBUF_QuoteData_2eproto__INCLUDED
#define PROTOBUF_QuoteData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "SocketCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace tigeropen {
namespace push {
namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_QuoteData_2eproto();
void protobuf_InitDefaults_QuoteData_2eproto();
void protobuf_AssignDesc_QuoteData_2eproto();
void protobuf_ShutdownFile_QuoteData_2eproto();

class QuoteData;
class QuoteData_Minute;

// ===================================================================

class QuoteData_Minute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tigeropen.push.pb.QuoteData.Minute) */ {
 public:
  QuoteData_Minute();
  virtual ~QuoteData_Minute();

  QuoteData_Minute(const QuoteData_Minute& from);

  inline QuoteData_Minute& operator=(const QuoteData_Minute& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuoteData_Minute& default_instance();

  static const QuoteData_Minute* internal_default_instance();

  void Swap(QuoteData_Minute* other);

  // implements Message ----------------------------------------------

  inline QuoteData_Minute* New() const { return New(NULL); }

  QuoteData_Minute* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuoteData_Minute& from);
  void MergeFrom(const QuoteData_Minute& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QuoteData_Minute* other);
  void UnsafeMergeFrom(const QuoteData_Minute& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double p = 1;
  void clear_p();
  static const int kPFieldNumber = 1;
  double p() const;
  void set_p(double value);

  // optional double a = 2;
  void clear_a();
  static const int kAFieldNumber = 2;
  double a() const;
  void set_a(double value);

  // optional uint64 t = 3;
  void clear_t();
  static const int kTFieldNumber = 3;
  ::google::protobuf::uint64 t() const;
  void set_t(::google::protobuf::uint64 value);

  // optional sint64 v = 4;
  void clear_v();
  static const int kVFieldNumber = 4;
  ::google::protobuf::int64 v() const;
  void set_v(::google::protobuf::int64 value);

  // optional double o = 5;
  void clear_o();
  static const int kOFieldNumber = 5;
  double o() const;
  void set_o(double value);

  // optional double h = 6;
  void clear_h();
  static const int kHFieldNumber = 6;
  double h() const;
  void set_h(double value);

  // optional double l = 7;
  void clear_l();
  static const int kLFieldNumber = 7;
  double l() const;
  void set_l(double value);

  // @@protoc_insertion_point(class_scope:tigeropen.push.pb.QuoteData.Minute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double p_;
  double a_;
  ::google::protobuf::uint64 t_;
  ::google::protobuf::int64 v_;
  double o_;
  double h_;
  double l_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_QuoteData_2eproto_impl();
  friend void  protobuf_AddDesc_QuoteData_2eproto_impl();
  friend void protobuf_AssignDesc_QuoteData_2eproto();
  friend void protobuf_ShutdownFile_QuoteData_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QuoteData_Minute> QuoteData_Minute_default_instance_;

// -------------------------------------------------------------------

class QuoteData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tigeropen.push.pb.QuoteData) */ {
 public:
  QuoteData();
  virtual ~QuoteData();

  QuoteData(const QuoteData& from);

  inline QuoteData& operator=(const QuoteData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuoteData& default_instance();

  static const QuoteData* internal_default_instance();

  void Swap(QuoteData* other);

  // implements Message ----------------------------------------------

  inline QuoteData* New() const { return New(NULL); }

  QuoteData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuoteData& from);
  void MergeFrom(const QuoteData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QuoteData* other);
  void UnsafeMergeFrom(const QuoteData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef QuoteData_Minute Minute;

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::tigeropen::push::pb::SocketCommon_QuoteType type() const;
  void set_type(::tigeropen::push::pb::SocketCommon_QuoteType value);

  // optional uint64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional uint64 serverTimestamp = 4;
  void clear_servertimestamp();
  static const int kServerTimestampFieldNumber = 4;
  ::google::protobuf::uint64 servertimestamp() const;
  void set_servertimestamp(::google::protobuf::uint64 value);

  // optional double avgPrice = 5;
  void clear_avgprice();
  static const int kAvgPriceFieldNumber = 5;
  double avgprice() const;
  void set_avgprice(double value);

  // optional double latestPrice = 6;
  void clear_latestprice();
  static const int kLatestPriceFieldNumber = 6;
  double latestprice() const;
  void set_latestprice(double value);

  // optional uint64 latestPriceTimestamp = 7;
  void clear_latestpricetimestamp();
  static const int kLatestPriceTimestampFieldNumber = 7;
  ::google::protobuf::uint64 latestpricetimestamp() const;
  void set_latestpricetimestamp(::google::protobuf::uint64 value);

  // optional string latestTime = 8;
  void clear_latesttime();
  static const int kLatestTimeFieldNumber = 8;
  const ::std::string& latesttime() const;
  void set_latesttime(const ::std::string& value);
  void set_latesttime(const char* value);
  void set_latesttime(const char* value, size_t size);
  ::std::string* mutable_latesttime();
  ::std::string* release_latesttime();
  void set_allocated_latesttime(::std::string* latesttime);

  // optional double preClose = 9;
  void clear_preclose();
  static const int kPreCloseFieldNumber = 9;
  double preclose() const;
  void set_preclose(double value);

  // optional sint64 volume = 10;
  void clear_volume();
  static const int kVolumeFieldNumber = 10;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // optional double amount = 11;
  void clear_amount();
  static const int kAmountFieldNumber = 11;
  double amount() const;
  void set_amount(double value);

  // optional double open = 12;
  void clear_open();
  static const int kOpenFieldNumber = 12;
  double open() const;
  void set_open(double value);

  // optional double high = 13;
  void clear_high();
  static const int kHighFieldNumber = 13;
  double high() const;
  void set_high(double value);

  // optional double low = 14;
  void clear_low();
  static const int kLowFieldNumber = 14;
  double low() const;
  void set_low(double value);

  // optional string hourTradingTag = 15;
  void clear_hourtradingtag();
  static const int kHourTradingTagFieldNumber = 15;
  const ::std::string& hourtradingtag() const;
  void set_hourtradingtag(const ::std::string& value);
  void set_hourtradingtag(const char* value);
  void set_hourtradingtag(const char* value, size_t size);
  ::std::string* mutable_hourtradingtag();
  ::std::string* release_hourtradingtag();
  void set_allocated_hourtradingtag(::std::string* hourtradingtag);

  // optional string marketStatus = 16;
  void clear_marketstatus();
  static const int kMarketStatusFieldNumber = 16;
  const ::std::string& marketstatus() const;
  void set_marketstatus(const ::std::string& value);
  void set_marketstatus(const char* value);
  void set_marketstatus(const char* value, size_t size);
  ::std::string* mutable_marketstatus();
  ::std::string* release_marketstatus();
  void set_allocated_marketstatus(::std::string* marketstatus);

  // optional double askPrice = 17;
  void clear_askprice();
  static const int kAskPriceFieldNumber = 17;
  double askprice() const;
  void set_askprice(double value);

  // optional sint64 askSize = 18;
  void clear_asksize();
  static const int kAskSizeFieldNumber = 18;
  ::google::protobuf::int64 asksize() const;
  void set_asksize(::google::protobuf::int64 value);

  // optional uint64 askTimestamp = 19;
  void clear_asktimestamp();
  static const int kAskTimestampFieldNumber = 19;
  ::google::protobuf::uint64 asktimestamp() const;
  void set_asktimestamp(::google::protobuf::uint64 value);

  // optional double bidPrice = 20;
  void clear_bidprice();
  static const int kBidPriceFieldNumber = 20;
  double bidprice() const;
  void set_bidprice(double value);

  // optional sint64 bidSize = 21;
  void clear_bidsize();
  static const int kBidSizeFieldNumber = 21;
  ::google::protobuf::int64 bidsize() const;
  void set_bidsize(::google::protobuf::int64 value);

  // optional uint64 bidTimestamp = 22;
  void clear_bidtimestamp();
  static const int kBidTimestampFieldNumber = 22;
  ::google::protobuf::uint64 bidtimestamp() const;
  void set_bidtimestamp(::google::protobuf::uint64 value);

  // optional string identifier = 23;
  void clear_identifier();
  static const int kIdentifierFieldNumber = 23;
  const ::std::string& identifier() const;
  void set_identifier(const ::std::string& value);
  void set_identifier(const char* value);
  void set_identifier(const char* value, size_t size);
  ::std::string* mutable_identifier();
  ::std::string* release_identifier();
  void set_allocated_identifier(::std::string* identifier);

  // optional sint64 openInt = 24;
  void clear_openint();
  static const int kOpenIntFieldNumber = 24;
  ::google::protobuf::int64 openint() const;
  void set_openint(::google::protobuf::int64 value);

  // optional uint64 tradeTime = 25;
  void clear_tradetime();
  static const int kTradeTimeFieldNumber = 25;
  ::google::protobuf::uint64 tradetime() const;
  void set_tradetime(::google::protobuf::uint64 value);

  // optional double preSettlement = 26;
  void clear_presettlement();
  static const int kPreSettlementFieldNumber = 26;
  double presettlement() const;
  void set_presettlement(double value);

  // optional float minTick = 27;
  void clear_mintick();
  static const int kMinTickFieldNumber = 27;
  float mintick() const;
  void set_mintick(float value);

  // optional .tigeropen.push.pb.QuoteData.Minute mi = 28;
  bool has_mi() const;
  void clear_mi();
  static const int kMiFieldNumber = 28;
  const ::tigeropen::push::pb::QuoteData_Minute& mi() const;
  ::tigeropen::push::pb::QuoteData_Minute* mutable_mi();
  ::tigeropen::push::pb::QuoteData_Minute* release_mi();
  void set_allocated_mi(::tigeropen::push::pb::QuoteData_Minute* mi);

  // @@protoc_insertion_point(class_scope:tigeropen.push.pb.QuoteData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr latesttime_;
  ::google::protobuf::internal::ArenaStringPtr hourtradingtag_;
  ::google::protobuf::internal::ArenaStringPtr marketstatus_;
  ::google::protobuf::internal::ArenaStringPtr identifier_;
  ::tigeropen::push::pb::QuoteData_Minute* mi_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint64 servertimestamp_;
  double avgprice_;
  double latestprice_;
  ::google::protobuf::uint64 latestpricetimestamp_;
  double preclose_;
  ::google::protobuf::int64 volume_;
  double amount_;
  double open_;
  double high_;
  double low_;
  int type_;
  float mintick_;
  double askprice_;
  ::google::protobuf::int64 asksize_;
  ::google::protobuf::uint64 asktimestamp_;
  double bidprice_;
  ::google::protobuf::int64 bidsize_;
  ::google::protobuf::uint64 bidtimestamp_;
  ::google::protobuf::int64 openint_;
  ::google::protobuf::uint64 tradetime_;
  double presettlement_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_QuoteData_2eproto_impl();
  friend void  protobuf_AddDesc_QuoteData_2eproto_impl();
  friend void protobuf_AssignDesc_QuoteData_2eproto();
  friend void protobuf_ShutdownFile_QuoteData_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QuoteData> QuoteData_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// QuoteData_Minute

// optional double p = 1;
inline void QuoteData_Minute::clear_p() {
  p_ = 0;
}
inline double QuoteData_Minute::p() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.Minute.p)
  return p_;
}
inline void QuoteData_Minute::set_p(double value) {
  
  p_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.Minute.p)
}

// optional double a = 2;
inline void QuoteData_Minute::clear_a() {
  a_ = 0;
}
inline double QuoteData_Minute::a() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.Minute.a)
  return a_;
}
inline void QuoteData_Minute::set_a(double value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.Minute.a)
}

// optional uint64 t = 3;
inline void QuoteData_Minute::clear_t() {
  t_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 QuoteData_Minute::t() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.Minute.t)
  return t_;
}
inline void QuoteData_Minute::set_t(::google::protobuf::uint64 value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.Minute.t)
}

// optional sint64 v = 4;
inline void QuoteData_Minute::clear_v() {
  v_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QuoteData_Minute::v() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.Minute.v)
  return v_;
}
inline void QuoteData_Minute::set_v(::google::protobuf::int64 value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.Minute.v)
}

// optional double o = 5;
inline void QuoteData_Minute::clear_o() {
  o_ = 0;
}
inline double QuoteData_Minute::o() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.Minute.o)
  return o_;
}
inline void QuoteData_Minute::set_o(double value) {
  
  o_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.Minute.o)
}

// optional double h = 6;
inline void QuoteData_Minute::clear_h() {
  h_ = 0;
}
inline double QuoteData_Minute::h() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.Minute.h)
  return h_;
}
inline void QuoteData_Minute::set_h(double value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.Minute.h)
}

// optional double l = 7;
inline void QuoteData_Minute::clear_l() {
  l_ = 0;
}
inline double QuoteData_Minute::l() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.Minute.l)
  return l_;
}
inline void QuoteData_Minute::set_l(double value) {
  
  l_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.Minute.l)
}

inline const QuoteData_Minute* QuoteData_Minute::internal_default_instance() {
  return &QuoteData_Minute_default_instance_.get();
}
// -------------------------------------------------------------------

// QuoteData

// optional string symbol = 1;
inline void QuoteData::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteData::symbol() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteData::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.symbol)
}
inline void QuoteData::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteData.symbol)
}
inline void QuoteData::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteData.symbol)
}
inline ::std::string* QuoteData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteData.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteData::release_symbol() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteData.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteData.symbol)
}

// optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
inline void QuoteData::clear_type() {
  type_ = 0;
}
inline ::tigeropen::push::pb::SocketCommon_QuoteType QuoteData::type() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.type)
  return static_cast< ::tigeropen::push::pb::SocketCommon_QuoteType >(type_);
}
inline void QuoteData::set_type(::tigeropen::push::pb::SocketCommon_QuoteType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.type)
}

// optional uint64 timestamp = 3;
inline void QuoteData::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 QuoteData::timestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.timestamp)
  return timestamp_;
}
inline void QuoteData::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.timestamp)
}

// optional uint64 serverTimestamp = 4;
inline void QuoteData::clear_servertimestamp() {
  servertimestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 QuoteData::servertimestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.serverTimestamp)
  return servertimestamp_;
}
inline void QuoteData::set_servertimestamp(::google::protobuf::uint64 value) {
  
  servertimestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.serverTimestamp)
}

// optional double avgPrice = 5;
inline void QuoteData::clear_avgprice() {
  avgprice_ = 0;
}
inline double QuoteData::avgprice() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.avgPrice)
  return avgprice_;
}
inline void QuoteData::set_avgprice(double value) {
  
  avgprice_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.avgPrice)
}

// optional double latestPrice = 6;
inline void QuoteData::clear_latestprice() {
  latestprice_ = 0;
}
inline double QuoteData::latestprice() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.latestPrice)
  return latestprice_;
}
inline void QuoteData::set_latestprice(double value) {
  
  latestprice_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.latestPrice)
}

// optional uint64 latestPriceTimestamp = 7;
inline void QuoteData::clear_latestpricetimestamp() {
  latestpricetimestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 QuoteData::latestpricetimestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.latestPriceTimestamp)
  return latestpricetimestamp_;
}
inline void QuoteData::set_latestpricetimestamp(::google::protobuf::uint64 value) {
  
  latestpricetimestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.latestPriceTimestamp)
}

// optional string latestTime = 8;
inline void QuoteData::clear_latesttime() {
  latesttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteData::latesttime() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.latestTime)
  return latesttime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteData::set_latesttime(const ::std::string& value) {
  
  latesttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.latestTime)
}
inline void QuoteData::set_latesttime(const char* value) {
  
  latesttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteData.latestTime)
}
inline void QuoteData::set_latesttime(const char* value, size_t size) {
  
  latesttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteData.latestTime)
}
inline ::std::string* QuoteData::mutable_latesttime() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteData.latestTime)
  return latesttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteData::release_latesttime() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteData.latestTime)
  
  return latesttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteData::set_allocated_latesttime(::std::string* latesttime) {
  if (latesttime != NULL) {
    
  } else {
    
  }
  latesttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latesttime);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteData.latestTime)
}

// optional double preClose = 9;
inline void QuoteData::clear_preclose() {
  preclose_ = 0;
}
inline double QuoteData::preclose() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.preClose)
  return preclose_;
}
inline void QuoteData::set_preclose(double value) {
  
  preclose_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.preClose)
}

// optional sint64 volume = 10;
inline void QuoteData::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QuoteData::volume() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.volume)
  return volume_;
}
inline void QuoteData::set_volume(::google::protobuf::int64 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.volume)
}

// optional double amount = 11;
inline void QuoteData::clear_amount() {
  amount_ = 0;
}
inline double QuoteData::amount() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.amount)
  return amount_;
}
inline void QuoteData::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.amount)
}

// optional double open = 12;
inline void QuoteData::clear_open() {
  open_ = 0;
}
inline double QuoteData::open() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.open)
  return open_;
}
inline void QuoteData::set_open(double value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.open)
}

// optional double high = 13;
inline void QuoteData::clear_high() {
  high_ = 0;
}
inline double QuoteData::high() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.high)
  return high_;
}
inline void QuoteData::set_high(double value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.high)
}

// optional double low = 14;
inline void QuoteData::clear_low() {
  low_ = 0;
}
inline double QuoteData::low() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.low)
  return low_;
}
inline void QuoteData::set_low(double value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.low)
}

// optional string hourTradingTag = 15;
inline void QuoteData::clear_hourtradingtag() {
  hourtradingtag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteData::hourtradingtag() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.hourTradingTag)
  return hourtradingtag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteData::set_hourtradingtag(const ::std::string& value) {
  
  hourtradingtag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.hourTradingTag)
}
inline void QuoteData::set_hourtradingtag(const char* value) {
  
  hourtradingtag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteData.hourTradingTag)
}
inline void QuoteData::set_hourtradingtag(const char* value, size_t size) {
  
  hourtradingtag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteData.hourTradingTag)
}
inline ::std::string* QuoteData::mutable_hourtradingtag() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteData.hourTradingTag)
  return hourtradingtag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteData::release_hourtradingtag() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteData.hourTradingTag)
  
  return hourtradingtag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteData::set_allocated_hourtradingtag(::std::string* hourtradingtag) {
  if (hourtradingtag != NULL) {
    
  } else {
    
  }
  hourtradingtag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hourtradingtag);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteData.hourTradingTag)
}

// optional string marketStatus = 16;
inline void QuoteData::clear_marketstatus() {
  marketstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteData::marketstatus() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.marketStatus)
  return marketstatus_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteData::set_marketstatus(const ::std::string& value) {
  
  marketstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.marketStatus)
}
inline void QuoteData::set_marketstatus(const char* value) {
  
  marketstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteData.marketStatus)
}
inline void QuoteData::set_marketstatus(const char* value, size_t size) {
  
  marketstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteData.marketStatus)
}
inline ::std::string* QuoteData::mutable_marketstatus() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteData.marketStatus)
  return marketstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteData::release_marketstatus() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteData.marketStatus)
  
  return marketstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteData::set_allocated_marketstatus(::std::string* marketstatus) {
  if (marketstatus != NULL) {
    
  } else {
    
  }
  marketstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketstatus);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteData.marketStatus)
}

// optional double askPrice = 17;
inline void QuoteData::clear_askprice() {
  askprice_ = 0;
}
inline double QuoteData::askprice() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.askPrice)
  return askprice_;
}
inline void QuoteData::set_askprice(double value) {
  
  askprice_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.askPrice)
}

// optional sint64 askSize = 18;
inline void QuoteData::clear_asksize() {
  asksize_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QuoteData::asksize() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.askSize)
  return asksize_;
}
inline void QuoteData::set_asksize(::google::protobuf::int64 value) {
  
  asksize_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.askSize)
}

// optional uint64 askTimestamp = 19;
inline void QuoteData::clear_asktimestamp() {
  asktimestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 QuoteData::asktimestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.askTimestamp)
  return asktimestamp_;
}
inline void QuoteData::set_asktimestamp(::google::protobuf::uint64 value) {
  
  asktimestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.askTimestamp)
}

// optional double bidPrice = 20;
inline void QuoteData::clear_bidprice() {
  bidprice_ = 0;
}
inline double QuoteData::bidprice() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.bidPrice)
  return bidprice_;
}
inline void QuoteData::set_bidprice(double value) {
  
  bidprice_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.bidPrice)
}

// optional sint64 bidSize = 21;
inline void QuoteData::clear_bidsize() {
  bidsize_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QuoteData::bidsize() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.bidSize)
  return bidsize_;
}
inline void QuoteData::set_bidsize(::google::protobuf::int64 value) {
  
  bidsize_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.bidSize)
}

// optional uint64 bidTimestamp = 22;
inline void QuoteData::clear_bidtimestamp() {
  bidtimestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 QuoteData::bidtimestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.bidTimestamp)
  return bidtimestamp_;
}
inline void QuoteData::set_bidtimestamp(::google::protobuf::uint64 value) {
  
  bidtimestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.bidTimestamp)
}

// optional string identifier = 23;
inline void QuoteData::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuoteData::identifier() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.identifier)
  return identifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteData::set_identifier(const ::std::string& value) {
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.identifier)
}
inline void QuoteData::set_identifier(const char* value) {
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteData.identifier)
}
inline void QuoteData::set_identifier(const char* value, size_t size) {
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteData.identifier)
}
inline ::std::string* QuoteData::mutable_identifier() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteData.identifier)
  return identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuoteData::release_identifier() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteData.identifier)
  
  return identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuoteData::set_allocated_identifier(::std::string* identifier) {
  if (identifier != NULL) {
    
  } else {
    
  }
  identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteData.identifier)
}

// optional sint64 openInt = 24;
inline void QuoteData::clear_openint() {
  openint_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QuoteData::openint() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.openInt)
  return openint_;
}
inline void QuoteData::set_openint(::google::protobuf::int64 value) {
  
  openint_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.openInt)
}

// optional uint64 tradeTime = 25;
inline void QuoteData::clear_tradetime() {
  tradetime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 QuoteData::tradetime() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.tradeTime)
  return tradetime_;
}
inline void QuoteData::set_tradetime(::google::protobuf::uint64 value) {
  
  tradetime_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.tradeTime)
}

// optional double preSettlement = 26;
inline void QuoteData::clear_presettlement() {
  presettlement_ = 0;
}
inline double QuoteData::presettlement() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.preSettlement)
  return presettlement_;
}
inline void QuoteData::set_presettlement(double value) {
  
  presettlement_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.preSettlement)
}

// optional float minTick = 27;
inline void QuoteData::clear_mintick() {
  mintick_ = 0;
}
inline float QuoteData::mintick() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.minTick)
  return mintick_;
}
inline void QuoteData::set_mintick(float value) {
  
  mintick_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteData.minTick)
}

// optional .tigeropen.push.pb.QuoteData.Minute mi = 28;
inline bool QuoteData::has_mi() const {
  return this != internal_default_instance() && mi_ != NULL;
}
inline void QuoteData::clear_mi() {
  if (GetArenaNoVirtual() == NULL && mi_ != NULL) delete mi_;
  mi_ = NULL;
}
inline const ::tigeropen::push::pb::QuoteData_Minute& QuoteData::mi() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteData.mi)
  return mi_ != NULL ? *mi_
                         : *::tigeropen::push::pb::QuoteData_Minute::internal_default_instance();
}
inline ::tigeropen::push::pb::QuoteData_Minute* QuoteData::mutable_mi() {
  
  if (mi_ == NULL) {
    mi_ = new ::tigeropen::push::pb::QuoteData_Minute;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteData.mi)
  return mi_;
}
inline ::tigeropen::push::pb::QuoteData_Minute* QuoteData::release_mi() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteData.mi)
  
  ::tigeropen::push::pb::QuoteData_Minute* temp = mi_;
  mi_ = NULL;
  return temp;
}
inline void QuoteData::set_allocated_mi(::tigeropen::push::pb::QuoteData_Minute* mi) {
  delete mi_;
  mi_ = mi;
  if (mi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteData.mi)
}

inline const QuoteData* QuoteData::internal_default_instance() {
  return &QuoteData_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace push
}  // namespace tigeropen

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_QuoteData_2eproto__INCLUDED
