// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Request.proto

#ifndef PROTOBUF_Request_2eproto__INCLUDED
#define PROTOBUF_Request_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "SocketCommon.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace tigeropen {
namespace push {
namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Request_2eproto();
void protobuf_InitDefaults_Request_2eproto();
void protobuf_AssignDesc_Request_2eproto();
void protobuf_ShutdownFile_Request_2eproto();

class Request;
class Request_Connect;
class Request_Subscribe;

// ===================================================================

class Request_Connect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tigeropen.push.pb.Request.Connect) */ {
 public:
  Request_Connect();
  virtual ~Request_Connect();

  Request_Connect(const Request_Connect& from);

  inline Request_Connect& operator=(const Request_Connect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_Connect& default_instance();

  static const Request_Connect* internal_default_instance();

  void Swap(Request_Connect* other);

  // implements Message ----------------------------------------------

  inline Request_Connect* New() const { return New(NULL); }

  Request_Connect* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_Connect& from);
  void MergeFrom(const Request_Connect& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_Connect* other);
  void UnsafeMergeFrom(const Request_Connect& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tigerId = 1;
  void clear_tigerid();
  static const int kTigerIdFieldNumber = 1;
  const ::std::string& tigerid() const;
  void set_tigerid(const ::std::string& value);
  void set_tigerid(const char* value);
  void set_tigerid(const char* value, size_t size);
  ::std::string* mutable_tigerid();
  ::std::string* release_tigerid();
  void set_allocated_tigerid(::std::string* tigerid);

  // optional string sign = 2;
  void clear_sign();
  static const int kSignFieldNumber = 2;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // optional string sdkVersion = 3;
  void clear_sdkversion();
  static const int kSdkVersionFieldNumber = 3;
  const ::std::string& sdkversion() const;
  void set_sdkversion(const ::std::string& value);
  void set_sdkversion(const char* value);
  void set_sdkversion(const char* value, size_t size);
  ::std::string* mutable_sdkversion();
  ::std::string* release_sdkversion();
  void set_allocated_sdkversion(::std::string* sdkversion);

  // optional string acceptVersion = 4;
  void clear_acceptversion();
  static const int kAcceptVersionFieldNumber = 4;
  const ::std::string& acceptversion() const;
  void set_acceptversion(const ::std::string& value);
  void set_acceptversion(const char* value);
  void set_acceptversion(const char* value, size_t size);
  ::std::string* mutable_acceptversion();
  ::std::string* release_acceptversion();
  void set_allocated_acceptversion(::std::string* acceptversion);

  // optional uint32 sendInterval = 5;
  void clear_sendinterval();
  static const int kSendIntervalFieldNumber = 5;
  ::google::protobuf::uint32 sendinterval() const;
  void set_sendinterval(::google::protobuf::uint32 value);

  // optional uint32 receiveInterval = 6;
  void clear_receiveinterval();
  static const int kReceiveIntervalFieldNumber = 6;
  ::google::protobuf::uint32 receiveinterval() const;
  void set_receiveinterval(::google::protobuf::uint32 value);

  // optional bool useFullTick = 7;
  void clear_usefulltick();
  static const int kUseFullTickFieldNumber = 7;
  bool usefulltick() const;
  void set_usefulltick(bool value);

  // @@protoc_insertion_point(class_scope:tigeropen.push.pb.Request.Connect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tigerid_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  ::google::protobuf::internal::ArenaStringPtr sdkversion_;
  ::google::protobuf::internal::ArenaStringPtr acceptversion_;
  ::google::protobuf::uint32 sendinterval_;
  ::google::protobuf::uint32 receiveinterval_;
  bool usefulltick_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_Request_2eproto_impl();
  friend void  protobuf_AddDesc_Request_2eproto_impl();
  friend void protobuf_AssignDesc_Request_2eproto();
  friend void protobuf_ShutdownFile_Request_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Request_Connect> Request_Connect_default_instance_;

// -------------------------------------------------------------------

class Request_Subscribe : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tigeropen.push.pb.Request.Subscribe) */ {
 public:
  Request_Subscribe();
  virtual ~Request_Subscribe();

  Request_Subscribe(const Request_Subscribe& from);

  inline Request_Subscribe& operator=(const Request_Subscribe& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_Subscribe& default_instance();

  static const Request_Subscribe* internal_default_instance();

  void Swap(Request_Subscribe* other);

  // implements Message ----------------------------------------------

  inline Request_Subscribe* New() const { return New(NULL); }

  Request_Subscribe* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_Subscribe& from);
  void MergeFrom(const Request_Subscribe& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_Subscribe* other);
  void UnsafeMergeFrom(const Request_Subscribe& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tigeropen.push.pb.SocketCommon.DataType dataType = 1;
  void clear_datatype();
  static const int kDataTypeFieldNumber = 1;
  ::tigeropen::push::pb::SocketCommon_DataType datatype() const;
  void set_datatype(::tigeropen::push::pb::SocketCommon_DataType value);

  // optional string symbols = 2;
  void clear_symbols();
  static const int kSymbolsFieldNumber = 2;
  const ::std::string& symbols() const;
  void set_symbols(const ::std::string& value);
  void set_symbols(const char* value);
  void set_symbols(const char* value, size_t size);
  ::std::string* mutable_symbols();
  ::std::string* release_symbols();
  void set_allocated_symbols(::std::string* symbols);

  // optional string account = 3;
  void clear_account();
  static const int kAccountFieldNumber = 3;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional string market = 4;
  void clear_market();
  static const int kMarketFieldNumber = 4;
  const ::std::string& market() const;
  void set_market(const ::std::string& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  ::std::string* mutable_market();
  ::std::string* release_market();
  void set_allocated_market(::std::string* market);

  // @@protoc_insertion_point(class_scope:tigeropen.push.pb.Request.Subscribe)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbols_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr market_;
  int datatype_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_Request_2eproto_impl();
  friend void  protobuf_AddDesc_Request_2eproto_impl();
  friend void protobuf_AssignDesc_Request_2eproto();
  friend void protobuf_ShutdownFile_Request_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Request_Subscribe> Request_Subscribe_default_instance_;

// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tigeropen.push.pb.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static const Request* internal_default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  void UnsafeMergeFrom(const Request& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_Connect Connect;
  typedef Request_Subscribe Subscribe;

  // accessors -------------------------------------------------------

  // optional .tigeropen.push.pb.SocketCommon.Command command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  ::tigeropen::push::pb::SocketCommon_Command command() const;
  void set_command(::tigeropen::push::pb::SocketCommon_Command value);

  // optional uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional .tigeropen.push.pb.Request.Subscribe subscribe = 3;
  bool has_subscribe() const;
  void clear_subscribe();
  static const int kSubscribeFieldNumber = 3;
  const ::tigeropen::push::pb::Request_Subscribe& subscribe() const;
  ::tigeropen::push::pb::Request_Subscribe* mutable_subscribe();
  ::tigeropen::push::pb::Request_Subscribe* release_subscribe();
  void set_allocated_subscribe(::tigeropen::push::pb::Request_Subscribe* subscribe);

  // optional .tigeropen.push.pb.Request.Connect connect = 4;
  bool has_connect() const;
  void clear_connect();
  static const int kConnectFieldNumber = 4;
  const ::tigeropen::push::pb::Request_Connect& connect() const;
  ::tigeropen::push::pb::Request_Connect* mutable_connect();
  ::tigeropen::push::pb::Request_Connect* release_connect();
  void set_allocated_connect(::tigeropen::push::pb::Request_Connect* connect);

  // @@protoc_insertion_point(class_scope:tigeropen.push.pb.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tigeropen::push::pb::Request_Subscribe* subscribe_;
  ::tigeropen::push::pb::Request_Connect* connect_;
  int command_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_Request_2eproto_impl();
  friend void  protobuf_AddDesc_Request_2eproto_impl();
  friend void protobuf_AssignDesc_Request_2eproto();
  friend void protobuf_ShutdownFile_Request_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Request> Request_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Request_Connect

// optional string tigerId = 1;
inline void Request_Connect::clear_tigerid() {
  tigerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request_Connect::tigerid() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Connect.tigerId)
  return tigerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_Connect::set_tigerid(const ::std::string& value) {
  
  tigerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Connect.tigerId)
}
inline void Request_Connect::set_tigerid(const char* value) {
  
  tigerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.Request.Connect.tigerId)
}
inline void Request_Connect::set_tigerid(const char* value, size_t size) {
  
  tigerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.Request.Connect.tigerId)
}
inline ::std::string* Request_Connect::mutable_tigerid() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Request.Connect.tigerId)
  return tigerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request_Connect::release_tigerid() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Request.Connect.tigerId)
  
  return tigerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_Connect::set_allocated_tigerid(::std::string* tigerid) {
  if (tigerid != NULL) {
    
  } else {
    
  }
  tigerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tigerid);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Request.Connect.tigerId)
}

// optional string sign = 2;
inline void Request_Connect::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request_Connect::sign() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Connect.sign)
  return sign_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_Connect::set_sign(const ::std::string& value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Connect.sign)
}
inline void Request_Connect::set_sign(const char* value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.Request.Connect.sign)
}
inline void Request_Connect::set_sign(const char* value, size_t size) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.Request.Connect.sign)
}
inline ::std::string* Request_Connect::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Request.Connect.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request_Connect::release_sign() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Request.Connect.sign)
  
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_Connect::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Request.Connect.sign)
}

// optional string sdkVersion = 3;
inline void Request_Connect::clear_sdkversion() {
  sdkversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request_Connect::sdkversion() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Connect.sdkVersion)
  return sdkversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_Connect::set_sdkversion(const ::std::string& value) {
  
  sdkversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Connect.sdkVersion)
}
inline void Request_Connect::set_sdkversion(const char* value) {
  
  sdkversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.Request.Connect.sdkVersion)
}
inline void Request_Connect::set_sdkversion(const char* value, size_t size) {
  
  sdkversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.Request.Connect.sdkVersion)
}
inline ::std::string* Request_Connect::mutable_sdkversion() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Request.Connect.sdkVersion)
  return sdkversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request_Connect::release_sdkversion() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Request.Connect.sdkVersion)
  
  return sdkversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_Connect::set_allocated_sdkversion(::std::string* sdkversion) {
  if (sdkversion != NULL) {
    
  } else {
    
  }
  sdkversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdkversion);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Request.Connect.sdkVersion)
}

// optional string acceptVersion = 4;
inline void Request_Connect::clear_acceptversion() {
  acceptversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request_Connect::acceptversion() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Connect.acceptVersion)
  return acceptversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_Connect::set_acceptversion(const ::std::string& value) {
  
  acceptversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Connect.acceptVersion)
}
inline void Request_Connect::set_acceptversion(const char* value) {
  
  acceptversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.Request.Connect.acceptVersion)
}
inline void Request_Connect::set_acceptversion(const char* value, size_t size) {
  
  acceptversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.Request.Connect.acceptVersion)
}
inline ::std::string* Request_Connect::mutable_acceptversion() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Request.Connect.acceptVersion)
  return acceptversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request_Connect::release_acceptversion() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Request.Connect.acceptVersion)
  
  return acceptversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_Connect::set_allocated_acceptversion(::std::string* acceptversion) {
  if (acceptversion != NULL) {
    
  } else {
    
  }
  acceptversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acceptversion);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Request.Connect.acceptVersion)
}

// optional uint32 sendInterval = 5;
inline void Request_Connect::clear_sendinterval() {
  sendinterval_ = 0u;
}
inline ::google::protobuf::uint32 Request_Connect::sendinterval() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Connect.sendInterval)
  return sendinterval_;
}
inline void Request_Connect::set_sendinterval(::google::protobuf::uint32 value) {
  
  sendinterval_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Connect.sendInterval)
}

// optional uint32 receiveInterval = 6;
inline void Request_Connect::clear_receiveinterval() {
  receiveinterval_ = 0u;
}
inline ::google::protobuf::uint32 Request_Connect::receiveinterval() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Connect.receiveInterval)
  return receiveinterval_;
}
inline void Request_Connect::set_receiveinterval(::google::protobuf::uint32 value) {
  
  receiveinterval_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Connect.receiveInterval)
}

// optional bool useFullTick = 7;
inline void Request_Connect::clear_usefulltick() {
  usefulltick_ = false;
}
inline bool Request_Connect::usefulltick() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Connect.useFullTick)
  return usefulltick_;
}
inline void Request_Connect::set_usefulltick(bool value) {
  
  usefulltick_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Connect.useFullTick)
}

inline const Request_Connect* Request_Connect::internal_default_instance() {
  return &Request_Connect_default_instance_.get();
}
// -------------------------------------------------------------------

// Request_Subscribe

// optional .tigeropen.push.pb.SocketCommon.DataType dataType = 1;
inline void Request_Subscribe::clear_datatype() {
  datatype_ = 0;
}
inline ::tigeropen::push::pb::SocketCommon_DataType Request_Subscribe::datatype() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Subscribe.dataType)
  return static_cast< ::tigeropen::push::pb::SocketCommon_DataType >(datatype_);
}
inline void Request_Subscribe::set_datatype(::tigeropen::push::pb::SocketCommon_DataType value) {
  
  datatype_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Subscribe.dataType)
}

// optional string symbols = 2;
inline void Request_Subscribe::clear_symbols() {
  symbols_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request_Subscribe::symbols() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Subscribe.symbols)
  return symbols_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_Subscribe::set_symbols(const ::std::string& value) {
  
  symbols_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Subscribe.symbols)
}
inline void Request_Subscribe::set_symbols(const char* value) {
  
  symbols_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.Request.Subscribe.symbols)
}
inline void Request_Subscribe::set_symbols(const char* value, size_t size) {
  
  symbols_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.Request.Subscribe.symbols)
}
inline ::std::string* Request_Subscribe::mutable_symbols() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Request.Subscribe.symbols)
  return symbols_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request_Subscribe::release_symbols() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Request.Subscribe.symbols)
  
  return symbols_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_Subscribe::set_allocated_symbols(::std::string* symbols) {
  if (symbols != NULL) {
    
  } else {
    
  }
  symbols_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbols);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Request.Subscribe.symbols)
}

// optional string account = 3;
inline void Request_Subscribe::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request_Subscribe::account() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Subscribe.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_Subscribe::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Subscribe.account)
}
inline void Request_Subscribe::set_account(const char* value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.Request.Subscribe.account)
}
inline void Request_Subscribe::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.Request.Subscribe.account)
}
inline ::std::string* Request_Subscribe::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Request.Subscribe.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request_Subscribe::release_account() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Request.Subscribe.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_Subscribe::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Request.Subscribe.account)
}

// optional string market = 4;
inline void Request_Subscribe::clear_market() {
  market_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request_Subscribe::market() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.Subscribe.market)
  return market_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_Subscribe::set_market(const ::std::string& value) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.Subscribe.market)
}
inline void Request_Subscribe::set_market(const char* value) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.Request.Subscribe.market)
}
inline void Request_Subscribe::set_market(const char* value, size_t size) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.Request.Subscribe.market)
}
inline ::std::string* Request_Subscribe::mutable_market() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Request.Subscribe.market)
  return market_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request_Subscribe::release_market() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Request.Subscribe.market)
  
  return market_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_Subscribe::set_allocated_market(::std::string* market) {
  if (market != NULL) {
    
  } else {
    
  }
  market_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Request.Subscribe.market)
}

inline const Request_Subscribe* Request_Subscribe::internal_default_instance() {
  return &Request_Subscribe_default_instance_.get();
}
// -------------------------------------------------------------------

// Request

// optional .tigeropen.push.pb.SocketCommon.Command command = 1;
inline void Request::clear_command() {
  command_ = 0;
}
inline ::tigeropen::push::pb::SocketCommon_Command Request::command() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.command)
  return static_cast< ::tigeropen::push::pb::SocketCommon_Command >(command_);
}
inline void Request::set_command(::tigeropen::push::pb::SocketCommon_Command value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.command)
}

// optional uint32 id = 2;
inline void Request::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Request::id() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.id)
  return id_;
}
inline void Request::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.Request.id)
}

// optional .tigeropen.push.pb.Request.Subscribe subscribe = 3;
inline bool Request::has_subscribe() const {
  return this != internal_default_instance() && subscribe_ != NULL;
}
inline void Request::clear_subscribe() {
  if (GetArenaNoVirtual() == NULL && subscribe_ != NULL) delete subscribe_;
  subscribe_ = NULL;
}
inline const ::tigeropen::push::pb::Request_Subscribe& Request::subscribe() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.subscribe)
  return subscribe_ != NULL ? *subscribe_
                         : *::tigeropen::push::pb::Request_Subscribe::internal_default_instance();
}
inline ::tigeropen::push::pb::Request_Subscribe* Request::mutable_subscribe() {
  
  if (subscribe_ == NULL) {
    subscribe_ = new ::tigeropen::push::pb::Request_Subscribe;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Request.subscribe)
  return subscribe_;
}
inline ::tigeropen::push::pb::Request_Subscribe* Request::release_subscribe() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Request.subscribe)
  
  ::tigeropen::push::pb::Request_Subscribe* temp = subscribe_;
  subscribe_ = NULL;
  return temp;
}
inline void Request::set_allocated_subscribe(::tigeropen::push::pb::Request_Subscribe* subscribe) {
  delete subscribe_;
  subscribe_ = subscribe;
  if (subscribe) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Request.subscribe)
}

// optional .tigeropen.push.pb.Request.Connect connect = 4;
inline bool Request::has_connect() const {
  return this != internal_default_instance() && connect_ != NULL;
}
inline void Request::clear_connect() {
  if (GetArenaNoVirtual() == NULL && connect_ != NULL) delete connect_;
  connect_ = NULL;
}
inline const ::tigeropen::push::pb::Request_Connect& Request::connect() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.Request.connect)
  return connect_ != NULL ? *connect_
                         : *::tigeropen::push::pb::Request_Connect::internal_default_instance();
}
inline ::tigeropen::push::pb::Request_Connect* Request::mutable_connect() {
  
  if (connect_ == NULL) {
    connect_ = new ::tigeropen::push::pb::Request_Connect;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.Request.connect)
  return connect_;
}
inline ::tigeropen::push::pb::Request_Connect* Request::release_connect() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.Request.connect)
  
  ::tigeropen::push::pb::Request_Connect* temp = connect_;
  connect_ = NULL;
  return temp;
}
inline void Request::set_allocated_connect(::tigeropen::push::pb::Request_Connect* connect) {
  delete connect_;
  connect_ = connect;
  if (connect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.Request.connect)
}

inline const Request* Request::internal_default_instance() {
  return &Request_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace push
}  // namespace tigeropen

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Request_2eproto__INCLUDED
