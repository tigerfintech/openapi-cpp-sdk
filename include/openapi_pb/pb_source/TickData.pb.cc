// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TickData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TickData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tigeropen {
namespace push {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* TickData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TickData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TickData_Tick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TickData_Tick_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TickData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_TickData_2eproto() {
  protobuf_AddDesc_TickData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TickData.proto");
  GOOGLE_CHECK(file != NULL);
  TickData_descriptor_ = file->message_type(0);
  static const int TickData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickData, ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickData, source_),
  };
  TickData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TickData_descriptor_,
      TickData::internal_default_instance(),
      TickData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TickData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickData, _internal_metadata_));
  TickData_Tick_descriptor_ = TickData_descriptor_->nested_type(0);
  static const int TickData_Tick_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickData_Tick, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickData_Tick, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickData_Tick, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickData_Tick, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickData_Tick, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickData_Tick, cond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickData_Tick, partcode_),
  };
  TickData_Tick_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TickData_Tick_descriptor_,
      TickData_Tick::internal_default_instance(),
      TickData_Tick_offsets_,
      -1,
      -1,
      -1,
      sizeof(TickData_Tick),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickData_Tick, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TickData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TickData_descriptor_, TickData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TickData_Tick_descriptor_, TickData_Tick::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TickData_2eproto() {
  TickData_default_instance_.Shutdown();
  delete TickData_reflection_;
  TickData_Tick_default_instance_.Shutdown();
  delete TickData_Tick_reflection_;
}

void protobuf_InitDefaults_TickData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  TickData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TickData_Tick_default_instance_.DefaultConstruct();
  TickData_default_instance_.get_mutable()->InitAsDefaultInstance();
  TickData_Tick_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_TickData_2eproto_once_);
void protobuf_InitDefaults_TickData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_TickData_2eproto_once_,
                 &protobuf_InitDefaults_TickData_2eproto_impl);
}
void protobuf_AddDesc_TickData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_TickData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016TickData.proto\022\021tigeropen.push.pb\"\335\001\n\010"
    "TickData\022\016\n\006symbol\030\001 \001(\t\022/\n\005ticks\030\002 \003(\0132"
    " .tigeropen.push.pb.TickData.Tick\022\021\n\ttim"
    "estamp\030\003 \001(\003\022\016\n\006source\030\004 \001(\t\032m\n\004Tick\022\n\n\002"
    "sn\030\001 \001(\003\022\014\n\004time\030\002 \001(\003\022\r\n\005price\030\003 \001(\002\022\016\n"
    "\006volume\030\004 \001(\005\022\014\n\004type\030\005 \001(\t\022\014\n\004cond\030\006 \001("
    "\t\022\020\n\010partCode\030\007 \001(\tb\006proto3", 267);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TickData.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TickData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_TickData_2eproto_once_);
void protobuf_AddDesc_TickData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_TickData_2eproto_once_,
                 &protobuf_AddDesc_TickData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TickData_2eproto {
  StaticDescriptorInitializer_TickData_2eproto() {
    protobuf_AddDesc_TickData_2eproto();
  }
} static_descriptor_initializer_TickData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TickData_Tick::kSnFieldNumber;
const int TickData_Tick::kTimeFieldNumber;
const int TickData_Tick::kPriceFieldNumber;
const int TickData_Tick::kVolumeFieldNumber;
const int TickData_Tick::kTypeFieldNumber;
const int TickData_Tick::kCondFieldNumber;
const int TickData_Tick::kPartCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TickData_Tick::TickData_Tick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_TickData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.TickData.Tick)
}

void TickData_Tick::InitAsDefaultInstance() {
}

TickData_Tick::TickData_Tick(const TickData_Tick& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.TickData.Tick)
}

void TickData_Tick::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cond_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sn_, 0, reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&sn_) + sizeof(volume_));
  _cached_size_ = 0;
}

TickData_Tick::~TickData_Tick() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.TickData.Tick)
  SharedDtor();
}

void TickData_Tick::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cond_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TickData_Tick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TickData_Tick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TickData_Tick_descriptor_;
}

const TickData_Tick& TickData_Tick::default_instance() {
  protobuf_InitDefaults_TickData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TickData_Tick> TickData_Tick_default_instance_;

TickData_Tick* TickData_Tick::New(::google::protobuf::Arena* arena) const {
  TickData_Tick* n = new TickData_Tick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TickData_Tick::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.TickData.Tick)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TickData_Tick, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TickData_Tick*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sn_, volume_);
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cond_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TickData_Tick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.TickData.Tick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 sn = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_price;
        break;
      }

      // optional float price = 3;
      case 3: {
        if (tag == 29) {
         parse_price:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_volume;
        break;
      }

      // optional int32 volume = 4;
      case 4: {
        if (tag == 32) {
         parse_volume:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_type;
        break;
      }

      // optional string type = 5;
      case 5: {
        if (tag == 42) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.TickData.Tick.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cond;
        break;
      }

      // optional string cond = 6;
      case 6: {
        if (tag == 50) {
         parse_cond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cond()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cond().data(), this->cond().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.TickData.Tick.cond"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_partCode;
        break;
      }

      // optional string partCode = 7;
      case 7: {
        if (tag == 58) {
         parse_partCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partcode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partcode().data(), this->partcode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.TickData.Tick.partCode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.TickData.Tick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.TickData.Tick)
  return false;
#undef DO_
}

void TickData_Tick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.TickData.Tick)
  // optional int64 sn = 1;
  if (this->sn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sn(), output);
  }

  // optional int64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // optional float price = 3;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->price(), output);
  }

  // optional int32 volume = 4;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->volume(), output);
  }

  // optional string type = 5;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TickData.Tick.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->type(), output);
  }

  // optional string cond = 6;
  if (this->cond().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cond().data(), this->cond().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TickData.Tick.cond");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->cond(), output);
  }

  // optional string partCode = 7;
  if (this->partcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partcode().data(), this->partcode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TickData.Tick.partCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->partcode(), output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.TickData.Tick)
}

::google::protobuf::uint8* TickData_Tick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.TickData.Tick)
  // optional int64 sn = 1;
  if (this->sn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sn(), target);
  }

  // optional int64 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // optional float price = 3;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->price(), target);
  }

  // optional int32 volume = 4;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->volume(), target);
  }

  // optional string type = 5;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TickData.Tick.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type(), target);
  }

  // optional string cond = 6;
  if (this->cond().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cond().data(), this->cond().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TickData.Tick.cond");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cond(), target);
  }

  // optional string partCode = 7;
  if (this->partcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partcode().data(), this->partcode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TickData.Tick.partCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->partcode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.TickData.Tick)
  return target;
}

size_t TickData_Tick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.TickData.Tick)
  size_t total_size = 0;

  // optional int64 sn = 1;
  if (this->sn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sn());
  }

  // optional int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // optional float price = 3;
  if (this->price() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 volume = 4;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // optional string type = 5;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional string cond = 6;
  if (this->cond().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cond());
  }

  // optional string partCode = 7;
  if (this->partcode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TickData_Tick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.TickData.Tick)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TickData_Tick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TickData_Tick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.TickData.Tick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.TickData.Tick)
    UnsafeMergeFrom(*source);
  }
}

void TickData_Tick::MergeFrom(const TickData_Tick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.TickData.Tick)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TickData_Tick::UnsafeMergeFrom(const TickData_Tick& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.sn() != 0) {
    set_sn(from.sn());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.cond().size() > 0) {

    cond_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cond_);
  }
  if (from.partcode().size() > 0) {

    partcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partcode_);
  }
}

void TickData_Tick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.TickData.Tick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TickData_Tick::CopyFrom(const TickData_Tick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.TickData.Tick)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TickData_Tick::IsInitialized() const {

  return true;
}

void TickData_Tick::Swap(TickData_Tick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TickData_Tick::InternalSwap(TickData_Tick* other) {
  std::swap(sn_, other->sn_);
  std::swap(time_, other->time_);
  std::swap(price_, other->price_);
  std::swap(volume_, other->volume_);
  type_.Swap(&other->type_);
  cond_.Swap(&other->cond_);
  partcode_.Swap(&other->partcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TickData_Tick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TickData_Tick_descriptor_;
  metadata.reflection = TickData_Tick_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TickData::kSymbolFieldNumber;
const int TickData::kTicksFieldNumber;
const int TickData::kTimestampFieldNumber;
const int TickData::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TickData::TickData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_TickData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.TickData)
}

void TickData::InitAsDefaultInstance() {
}

TickData::TickData(const TickData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.TickData)
}

void TickData::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

TickData::~TickData() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.TickData)
  SharedDtor();
}

void TickData::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TickData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TickData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TickData_descriptor_;
}

const TickData& TickData::default_instance() {
  protobuf_InitDefaults_TickData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TickData> TickData_default_instance_;

TickData* TickData::New(::google::protobuf::Arena* arena) const {
  TickData* n = new TickData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TickData::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.TickData)
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticks_.Clear();
}

bool TickData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.TickData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.TickData.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ticks;
        break;
      }

      // repeated .tigeropen.push.pb.TickData.Tick ticks = 2;
      case 2: {
        if (tag == 18) {
         parse_ticks:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ticks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ticks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_ticks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_source;
        break;
      }

      // optional string source = 4;
      case 4: {
        if (tag == 34) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.TickData.source"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.TickData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.TickData)
  return false;
#undef DO_
}

void TickData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.TickData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TickData.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // repeated .tigeropen.push.pb.TickData.Tick ticks = 2;
  for (unsigned int i = 0, n = this->ticks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ticks(i), output);
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional string source = 4;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TickData.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->source(), output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.TickData)
}

::google::protobuf::uint8* TickData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.TickData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TickData.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // repeated .tigeropen.push.pb.TickData.Tick ticks = 2;
  for (unsigned int i = 0, n = this->ticks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->ticks(i), false, target);
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // optional string source = 4;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.TickData.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->source(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.TickData)
  return target;
}

size_t TickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.TickData)
  size_t total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional string source = 4;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // repeated .tigeropen.push.pb.TickData.Tick ticks = 2;
  {
    unsigned int count = this->ticks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ticks(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TickData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.TickData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TickData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TickData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.TickData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.TickData)
    UnsafeMergeFrom(*source);
  }
}

void TickData::MergeFrom(const TickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.TickData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TickData::UnsafeMergeFrom(const TickData& from) {
  GOOGLE_DCHECK(&from != this);
  ticks_.MergeFrom(from.ticks_);
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
}

void TickData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.TickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TickData::CopyFrom(const TickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.TickData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TickData::IsInitialized() const {

  return true;
}

void TickData::Swap(TickData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TickData::InternalSwap(TickData* other) {
  symbol_.Swap(&other->symbol_);
  ticks_.UnsafeArenaSwap(&other->ticks_);
  std::swap(timestamp_, other->timestamp_);
  source_.Swap(&other->source_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TickData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TickData_descriptor_;
  metadata.reflection = TickData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TickData_Tick

// optional int64 sn = 1;
void TickData_Tick::clear_sn() {
  sn_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TickData_Tick::sn() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TickData.Tick.sn)
  return sn_;
}
void TickData_Tick::set_sn(::google::protobuf::int64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TickData.Tick.sn)
}

// optional int64 time = 2;
void TickData_Tick::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TickData_Tick::time() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TickData.Tick.time)
  return time_;
}
void TickData_Tick::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TickData.Tick.time)
}

// optional float price = 3;
void TickData_Tick::clear_price() {
  price_ = 0;
}
float TickData_Tick::price() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TickData.Tick.price)
  return price_;
}
void TickData_Tick::set_price(float value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TickData.Tick.price)
}

// optional int32 volume = 4;
void TickData_Tick::clear_volume() {
  volume_ = 0;
}
::google::protobuf::int32 TickData_Tick::volume() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TickData.Tick.volume)
  return volume_;
}
void TickData_Tick::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TickData.Tick.volume)
}

// optional string type = 5;
void TickData_Tick::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TickData_Tick::type() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TickData.Tick.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TickData_Tick::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TickData.Tick.type)
}
void TickData_Tick::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.TickData.Tick.type)
}
void TickData_Tick::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.TickData.Tick.type)
}
::std::string* TickData_Tick::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.TickData.Tick.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TickData_Tick::release_type() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.TickData.Tick.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TickData_Tick::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.TickData.Tick.type)
}

// optional string cond = 6;
void TickData_Tick::clear_cond() {
  cond_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TickData_Tick::cond() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TickData.Tick.cond)
  return cond_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TickData_Tick::set_cond(const ::std::string& value) {
  
  cond_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TickData.Tick.cond)
}
void TickData_Tick::set_cond(const char* value) {
  
  cond_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.TickData.Tick.cond)
}
void TickData_Tick::set_cond(const char* value, size_t size) {
  
  cond_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.TickData.Tick.cond)
}
::std::string* TickData_Tick::mutable_cond() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.TickData.Tick.cond)
  return cond_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TickData_Tick::release_cond() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.TickData.Tick.cond)
  
  return cond_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TickData_Tick::set_allocated_cond(::std::string* cond) {
  if (cond != NULL) {
    
  } else {
    
  }
  cond_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cond);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.TickData.Tick.cond)
}

// optional string partCode = 7;
void TickData_Tick::clear_partcode() {
  partcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TickData_Tick::partcode() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TickData.Tick.partCode)
  return partcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TickData_Tick::set_partcode(const ::std::string& value) {
  
  partcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TickData.Tick.partCode)
}
void TickData_Tick::set_partcode(const char* value) {
  
  partcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.TickData.Tick.partCode)
}
void TickData_Tick::set_partcode(const char* value, size_t size) {
  
  partcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.TickData.Tick.partCode)
}
::std::string* TickData_Tick::mutable_partcode() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.TickData.Tick.partCode)
  return partcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TickData_Tick::release_partcode() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.TickData.Tick.partCode)
  
  return partcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TickData_Tick::set_allocated_partcode(::std::string* partcode) {
  if (partcode != NULL) {
    
  } else {
    
  }
  partcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partcode);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.TickData.Tick.partCode)
}

inline const TickData_Tick* TickData_Tick::internal_default_instance() {
  return &TickData_Tick_default_instance_.get();
}
// -------------------------------------------------------------------

// TickData

// optional string symbol = 1;
void TickData::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TickData::symbol() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TickData.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TickData::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TickData.symbol)
}
void TickData::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.TickData.symbol)
}
void TickData::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.TickData.symbol)
}
::std::string* TickData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.TickData.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TickData::release_symbol() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.TickData.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TickData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.TickData.symbol)
}

// repeated .tigeropen.push.pb.TickData.Tick ticks = 2;
int TickData::ticks_size() const {
  return ticks_.size();
}
void TickData::clear_ticks() {
  ticks_.Clear();
}
const ::tigeropen::push::pb::TickData_Tick& TickData::ticks(int index) const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TickData.ticks)
  return ticks_.Get(index);
}
::tigeropen::push::pb::TickData_Tick* TickData::mutable_ticks(int index) {
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.TickData.ticks)
  return ticks_.Mutable(index);
}
::tigeropen::push::pb::TickData_Tick* TickData::add_ticks() {
  // @@protoc_insertion_point(field_add:tigeropen.push.pb.TickData.ticks)
  return ticks_.Add();
}
::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::TickData_Tick >*
TickData::mutable_ticks() {
  // @@protoc_insertion_point(field_mutable_list:tigeropen.push.pb.TickData.ticks)
  return &ticks_;
}
const ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::TickData_Tick >&
TickData::ticks() const {
  // @@protoc_insertion_point(field_list:tigeropen.push.pb.TickData.ticks)
  return ticks_;
}

// optional int64 timestamp = 3;
void TickData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TickData::timestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TickData.timestamp)
  return timestamp_;
}
void TickData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TickData.timestamp)
}

// optional string source = 4;
void TickData::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TickData::source() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.TickData.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TickData::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.TickData.source)
}
void TickData::set_source(const char* value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.TickData.source)
}
void TickData::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.TickData.source)
}
::std::string* TickData::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.TickData.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TickData::release_source() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.TickData.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TickData::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.TickData.source)
}

inline const TickData* TickData::internal_default_instance() {
  return &TickData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace push
}  // namespace tigeropen

// @@protoc_insertion_point(global_scope)
