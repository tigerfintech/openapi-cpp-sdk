// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AssetData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AssetData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tigeropen {
namespace push {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* AssetData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssetData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AssetData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_AssetData_2eproto() {
  protobuf_AddDesc_AssetData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AssetData.proto");
  GOOGLE_CHECK(file != NULL);
  AssetData_descriptor_ = file->message_type(0);
  static const int AssetData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, segtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, availablefunds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, excessliquidity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, netliquidation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, equitywithloan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, buyingpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, cashbalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, grosspositionvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, initmarginreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, maintmarginreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, timestamp_),
  };
  AssetData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AssetData_descriptor_,
      AssetData::internal_default_instance(),
      AssetData_offsets_,
      -1,
      -1,
      -1,
      sizeof(AssetData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetData, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AssetData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AssetData_descriptor_, AssetData::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AssetData_2eproto() {
  AssetData_default_instance_.Shutdown();
  delete AssetData_reflection_;
}

void protobuf_InitDefaults_AssetData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  AssetData_default_instance_.DefaultConstruct();
  AssetData_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_AssetData_2eproto_once_);
void protobuf_InitDefaults_AssetData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_AssetData_2eproto_once_,
                 &protobuf_InitDefaults_AssetData_2eproto_impl);
}
void protobuf_AddDesc_AssetData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_AssetData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017AssetData.proto\022\021tigeropen.push.pb\"\250\002\n"
    "\tAssetData\022\017\n\007account\030\001 \001(\t\022\020\n\010currency\030"
    "\002 \001(\t\022\017\n\007segType\030\003 \001(\t\022\026\n\016availableFunds"
    "\030\004 \001(\001\022\027\n\017excessLiquidity\030\005 \001(\001\022\026\n\016netLi"
    "quidation\030\006 \001(\001\022\026\n\016equityWithLoan\030\007 \001(\001\022"
    "\023\n\013buyingPower\030\010 \001(\001\022\023\n\013cashBalance\030\t \001("
    "\001\022\032\n\022grossPositionValue\030\n \001(\001\022\025\n\rinitMar"
    "ginReq\030\013 \001(\001\022\026\n\016maintMarginReq\030\014 \001(\001\022\021\n\t"
    "timestamp\030\r \001(\004b\006proto3", 343);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AssetData.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AssetData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_AssetData_2eproto_once_);
void protobuf_AddDesc_AssetData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_AssetData_2eproto_once_,
                 &protobuf_AddDesc_AssetData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AssetData_2eproto {
  StaticDescriptorInitializer_AssetData_2eproto() {
    protobuf_AddDesc_AssetData_2eproto();
  }
} static_descriptor_initializer_AssetData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AssetData::kAccountFieldNumber;
const int AssetData::kCurrencyFieldNumber;
const int AssetData::kSegTypeFieldNumber;
const int AssetData::kAvailableFundsFieldNumber;
const int AssetData::kExcessLiquidityFieldNumber;
const int AssetData::kNetLiquidationFieldNumber;
const int AssetData::kEquityWithLoanFieldNumber;
const int AssetData::kBuyingPowerFieldNumber;
const int AssetData::kCashBalanceFieldNumber;
const int AssetData::kGrossPositionValueFieldNumber;
const int AssetData::kInitMarginReqFieldNumber;
const int AssetData::kMaintMarginReqFieldNumber;
const int AssetData::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AssetData::AssetData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_AssetData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.AssetData)
}

void AssetData::InitAsDefaultInstance() {
}

AssetData::AssetData(const AssetData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.AssetData)
}

void AssetData::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  segtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&availablefunds_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&availablefunds_) + sizeof(timestamp_));
  _cached_size_ = 0;
}

AssetData::~AssetData() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.AssetData)
  SharedDtor();
}

void AssetData::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  segtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AssetData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssetData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssetData_descriptor_;
}

const AssetData& AssetData::default_instance() {
  protobuf_InitDefaults_AssetData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AssetData> AssetData_default_instance_;

AssetData* AssetData::New(::google::protobuf::Arena* arena) const {
  AssetData* n = new AssetData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AssetData::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.AssetData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AssetData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AssetData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(availablefunds_, buyingpower_);
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  segtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(cashbalance_, timestamp_);

#undef ZR_HELPER_
#undef ZR_

}

bool AssetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.AssetData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.AssetData.account"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_currency;
        break;
      }

      // optional string currency = 2;
      case 2: {
        if (tag == 18) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.AssetData.currency"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_segType;
        break;
      }

      // optional string segType = 3;
      case 3: {
        if (tag == 26) {
         parse_segType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_segtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->segtype().data(), this->segtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.AssetData.segType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_availableFunds;
        break;
      }

      // optional double availableFunds = 4;
      case 4: {
        if (tag == 33) {
         parse_availableFunds:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &availablefunds_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_excessLiquidity;
        break;
      }

      // optional double excessLiquidity = 5;
      case 5: {
        if (tag == 41) {
         parse_excessLiquidity:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &excessliquidity_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_netLiquidation;
        break;
      }

      // optional double netLiquidation = 6;
      case 6: {
        if (tag == 49) {
         parse_netLiquidation:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &netliquidation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_equityWithLoan;
        break;
      }

      // optional double equityWithLoan = 7;
      case 7: {
        if (tag == 57) {
         parse_equityWithLoan:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &equitywithloan_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_buyingPower;
        break;
      }

      // optional double buyingPower = 8;
      case 8: {
        if (tag == 65) {
         parse_buyingPower:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buyingpower_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_cashBalance;
        break;
      }

      // optional double cashBalance = 9;
      case 9: {
        if (tag == 73) {
         parse_cashBalance:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashbalance_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_grossPositionValue;
        break;
      }

      // optional double grossPositionValue = 10;
      case 10: {
        if (tag == 81) {
         parse_grossPositionValue:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &grosspositionvalue_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_initMarginReq;
        break;
      }

      // optional double initMarginReq = 11;
      case 11: {
        if (tag == 89) {
         parse_initMarginReq:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &initmarginreq_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_maintMarginReq;
        break;
      }

      // optional double maintMarginReq = 12;
      case 12: {
        if (tag == 97) {
         parse_maintMarginReq:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maintmarginreq_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 13;
      case 13: {
        if (tag == 104) {
         parse_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.AssetData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.AssetData)
  return false;
#undef DO_
}

void AssetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.AssetData)
  // optional string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.AssetData.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // optional string currency = 2;
  if (this->currency().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.AssetData.currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->currency(), output);
  }

  // optional string segType = 3;
  if (this->segtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->segtype().data(), this->segtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.AssetData.segType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->segtype(), output);
  }

  // optional double availableFunds = 4;
  if (this->availablefunds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->availablefunds(), output);
  }

  // optional double excessLiquidity = 5;
  if (this->excessliquidity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->excessliquidity(), output);
  }

  // optional double netLiquidation = 6;
  if (this->netliquidation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->netliquidation(), output);
  }

  // optional double equityWithLoan = 7;
  if (this->equitywithloan() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->equitywithloan(), output);
  }

  // optional double buyingPower = 8;
  if (this->buyingpower() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->buyingpower(), output);
  }

  // optional double cashBalance = 9;
  if (this->cashbalance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->cashbalance(), output);
  }

  // optional double grossPositionValue = 10;
  if (this->grosspositionvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->grosspositionvalue(), output);
  }

  // optional double initMarginReq = 11;
  if (this->initmarginreq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->initmarginreq(), output);
  }

  // optional double maintMarginReq = 12;
  if (this->maintmarginreq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->maintmarginreq(), output);
  }

  // optional uint64 timestamp = 13;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.AssetData)
}

::google::protobuf::uint8* AssetData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.AssetData)
  // optional string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.AssetData.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string currency = 2;
  if (this->currency().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.AssetData.currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->currency(), target);
  }

  // optional string segType = 3;
  if (this->segtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->segtype().data(), this->segtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.AssetData.segType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->segtype(), target);
  }

  // optional double availableFunds = 4;
  if (this->availablefunds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->availablefunds(), target);
  }

  // optional double excessLiquidity = 5;
  if (this->excessliquidity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->excessliquidity(), target);
  }

  // optional double netLiquidation = 6;
  if (this->netliquidation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->netliquidation(), target);
  }

  // optional double equityWithLoan = 7;
  if (this->equitywithloan() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->equitywithloan(), target);
  }

  // optional double buyingPower = 8;
  if (this->buyingpower() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->buyingpower(), target);
  }

  // optional double cashBalance = 9;
  if (this->cashbalance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->cashbalance(), target);
  }

  // optional double grossPositionValue = 10;
  if (this->grosspositionvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->grosspositionvalue(), target);
  }

  // optional double initMarginReq = 11;
  if (this->initmarginreq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->initmarginreq(), target);
  }

  // optional double maintMarginReq = 12;
  if (this->maintmarginreq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->maintmarginreq(), target);
  }

  // optional uint64 timestamp = 13;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.AssetData)
  return target;
}

size_t AssetData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.AssetData)
  size_t total_size = 0;

  // optional string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // optional string currency = 2;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency());
  }

  // optional string segType = 3;
  if (this->segtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->segtype());
  }

  // optional double availableFunds = 4;
  if (this->availablefunds() != 0) {
    total_size += 1 + 8;
  }

  // optional double excessLiquidity = 5;
  if (this->excessliquidity() != 0) {
    total_size += 1 + 8;
  }

  // optional double netLiquidation = 6;
  if (this->netliquidation() != 0) {
    total_size += 1 + 8;
  }

  // optional double equityWithLoan = 7;
  if (this->equitywithloan() != 0) {
    total_size += 1 + 8;
  }

  // optional double buyingPower = 8;
  if (this->buyingpower() != 0) {
    total_size += 1 + 8;
  }

  // optional double cashBalance = 9;
  if (this->cashbalance() != 0) {
    total_size += 1 + 8;
  }

  // optional double grossPositionValue = 10;
  if (this->grosspositionvalue() != 0) {
    total_size += 1 + 8;
  }

  // optional double initMarginReq = 11;
  if (this->initmarginreq() != 0) {
    total_size += 1 + 8;
  }

  // optional double maintMarginReq = 12;
  if (this->maintmarginreq() != 0) {
    total_size += 1 + 8;
  }

  // optional uint64 timestamp = 13;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssetData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.AssetData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AssetData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AssetData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.AssetData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.AssetData)
    UnsafeMergeFrom(*source);
  }
}

void AssetData::MergeFrom(const AssetData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.AssetData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AssetData::UnsafeMergeFrom(const AssetData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.segtype().size() > 0) {

    segtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.segtype_);
  }
  if (from.availablefunds() != 0) {
    set_availablefunds(from.availablefunds());
  }
  if (from.excessliquidity() != 0) {
    set_excessliquidity(from.excessliquidity());
  }
  if (from.netliquidation() != 0) {
    set_netliquidation(from.netliquidation());
  }
  if (from.equitywithloan() != 0) {
    set_equitywithloan(from.equitywithloan());
  }
  if (from.buyingpower() != 0) {
    set_buyingpower(from.buyingpower());
  }
  if (from.cashbalance() != 0) {
    set_cashbalance(from.cashbalance());
  }
  if (from.grosspositionvalue() != 0) {
    set_grosspositionvalue(from.grosspositionvalue());
  }
  if (from.initmarginreq() != 0) {
    set_initmarginreq(from.initmarginreq());
  }
  if (from.maintmarginreq() != 0) {
    set_maintmarginreq(from.maintmarginreq());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void AssetData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.AssetData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetData::CopyFrom(const AssetData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.AssetData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AssetData::IsInitialized() const {

  return true;
}

void AssetData::Swap(AssetData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AssetData::InternalSwap(AssetData* other) {
  account_.Swap(&other->account_);
  currency_.Swap(&other->currency_);
  segtype_.Swap(&other->segtype_);
  std::swap(availablefunds_, other->availablefunds_);
  std::swap(excessliquidity_, other->excessliquidity_);
  std::swap(netliquidation_, other->netliquidation_);
  std::swap(equitywithloan_, other->equitywithloan_);
  std::swap(buyingpower_, other->buyingpower_);
  std::swap(cashbalance_, other->cashbalance_);
  std::swap(grosspositionvalue_, other->grosspositionvalue_);
  std::swap(initmarginreq_, other->initmarginreq_);
  std::swap(maintmarginreq_, other->maintmarginreq_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AssetData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssetData_descriptor_;
  metadata.reflection = AssetData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AssetData

// optional string account = 1;
void AssetData::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AssetData::account() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.AssetData.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AssetData::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.AssetData.account)
}
void AssetData::set_account(const char* value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.AssetData.account)
}
void AssetData::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.AssetData.account)
}
::std::string* AssetData::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.AssetData.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AssetData::release_account() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.AssetData.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AssetData::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.AssetData.account)
}

// optional string currency = 2;
void AssetData::clear_currency() {
  currency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AssetData::currency() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.AssetData.currency)
  return currency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AssetData::set_currency(const ::std::string& value) {
  
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.AssetData.currency)
}
void AssetData::set_currency(const char* value) {
  
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.AssetData.currency)
}
void AssetData::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.AssetData.currency)
}
::std::string* AssetData::mutable_currency() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.AssetData.currency)
  return currency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AssetData::release_currency() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.AssetData.currency)
  
  return currency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AssetData::set_allocated_currency(::std::string* currency) {
  if (currency != NULL) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.AssetData.currency)
}

// optional string segType = 3;
void AssetData::clear_segtype() {
  segtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AssetData::segtype() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.AssetData.segType)
  return segtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AssetData::set_segtype(const ::std::string& value) {
  
  segtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.AssetData.segType)
}
void AssetData::set_segtype(const char* value) {
  
  segtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.AssetData.segType)
}
void AssetData::set_segtype(const char* value, size_t size) {
  
  segtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.AssetData.segType)
}
::std::string* AssetData::mutable_segtype() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.AssetData.segType)
  return segtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AssetData::release_segtype() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.AssetData.segType)
  
  return segtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AssetData::set_allocated_segtype(::std::string* segtype) {
  if (segtype != NULL) {
    
  } else {
    
  }
  segtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), segtype);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.AssetData.segType)
}

// optional double availableFunds = 4;
void AssetData::clear_availablefunds() {
  availablefunds_ = 0;
}
double AssetData::availablefunds() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.AssetData.availableFunds)
  return availablefunds_;
}
void AssetData::set_availablefunds(double value) {
  
  availablefunds_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.AssetData.availableFunds)
}

// optional double excessLiquidity = 5;
void AssetData::clear_excessliquidity() {
  excessliquidity_ = 0;
}
double AssetData::excessliquidity() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.AssetData.excessLiquidity)
  return excessliquidity_;
}
void AssetData::set_excessliquidity(double value) {
  
  excessliquidity_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.AssetData.excessLiquidity)
}

// optional double netLiquidation = 6;
void AssetData::clear_netliquidation() {
  netliquidation_ = 0;
}
double AssetData::netliquidation() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.AssetData.netLiquidation)
  return netliquidation_;
}
void AssetData::set_netliquidation(double value) {
  
  netliquidation_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.AssetData.netLiquidation)
}

// optional double equityWithLoan = 7;
void AssetData::clear_equitywithloan() {
  equitywithloan_ = 0;
}
double AssetData::equitywithloan() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.AssetData.equityWithLoan)
  return equitywithloan_;
}
void AssetData::set_equitywithloan(double value) {
  
  equitywithloan_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.AssetData.equityWithLoan)
}

// optional double buyingPower = 8;
void AssetData::clear_buyingpower() {
  buyingpower_ = 0;
}
double AssetData::buyingpower() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.AssetData.buyingPower)
  return buyingpower_;
}
void AssetData::set_buyingpower(double value) {
  
  buyingpower_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.AssetData.buyingPower)
}

// optional double cashBalance = 9;
void AssetData::clear_cashbalance() {
  cashbalance_ = 0;
}
double AssetData::cashbalance() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.AssetData.cashBalance)
  return cashbalance_;
}
void AssetData::set_cashbalance(double value) {
  
  cashbalance_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.AssetData.cashBalance)
}

// optional double grossPositionValue = 10;
void AssetData::clear_grosspositionvalue() {
  grosspositionvalue_ = 0;
}
double AssetData::grosspositionvalue() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.AssetData.grossPositionValue)
  return grosspositionvalue_;
}
void AssetData::set_grosspositionvalue(double value) {
  
  grosspositionvalue_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.AssetData.grossPositionValue)
}

// optional double initMarginReq = 11;
void AssetData::clear_initmarginreq() {
  initmarginreq_ = 0;
}
double AssetData::initmarginreq() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.AssetData.initMarginReq)
  return initmarginreq_;
}
void AssetData::set_initmarginreq(double value) {
  
  initmarginreq_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.AssetData.initMarginReq)
}

// optional double maintMarginReq = 12;
void AssetData::clear_maintmarginreq() {
  maintmarginreq_ = 0;
}
double AssetData::maintmarginreq() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.AssetData.maintMarginReq)
  return maintmarginreq_;
}
void AssetData::set_maintmarginreq(double value) {
  
  maintmarginreq_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.AssetData.maintMarginReq)
}

// optional uint64 timestamp = 13;
void AssetData::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AssetData::timestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.AssetData.timestamp)
  return timestamp_;
}
void AssetData::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.AssetData.timestamp)
}

inline const AssetData* AssetData::internal_default_instance() {
  return &AssetData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace push
}  // namespace tigeropen

// @@protoc_insertion_point(global_scope)
