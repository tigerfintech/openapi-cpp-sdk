// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OptionTopData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OptionTopData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tigeropen {
namespace push {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* OptionTopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptionTopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OptionTopData_TopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptionTopData_TopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OptionTopData_BigOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptionTopData_BigOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* OptionTopData_OptionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptionTopData_OptionItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OptionTopData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_OptionTopData_2eproto() {
  protobuf_AddDesc_OptionTopData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OptionTopData.proto");
  GOOGLE_CHECK(file != NULL);
  OptionTopData_descriptor_ = file->message_type(0);
  static const int OptionTopData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData, market_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData, topdata_),
  };
  OptionTopData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OptionTopData_descriptor_,
      OptionTopData::internal_default_instance(),
      OptionTopData_offsets_,
      -1,
      -1,
      -1,
      sizeof(OptionTopData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData, _internal_metadata_));
  OptionTopData_TopData_descriptor_ = OptionTopData_descriptor_->nested_type(0);
  static const int OptionTopData_TopData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_TopData, targetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_TopData, bigorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_TopData, item_),
  };
  OptionTopData_TopData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OptionTopData_TopData_descriptor_,
      OptionTopData_TopData::internal_default_instance(),
      OptionTopData_TopData_offsets_,
      -1,
      -1,
      -1,
      sizeof(OptionTopData_TopData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_TopData, _internal_metadata_));
  OptionTopData_BigOrder_descriptor_ = OptionTopData_descriptor_->nested_type(1);
  static const int OptionTopData_BigOrder_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_BigOrder, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_BigOrder, expiry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_BigOrder, strike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_BigOrder, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_BigOrder, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_BigOrder, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_BigOrder, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_BigOrder, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_BigOrder, tradetime_),
  };
  OptionTopData_BigOrder_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OptionTopData_BigOrder_descriptor_,
      OptionTopData_BigOrder::internal_default_instance(),
      OptionTopData_BigOrder_offsets_,
      -1,
      -1,
      -1,
      sizeof(OptionTopData_BigOrder),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_BigOrder, _internal_metadata_));
  OptionTopData_OptionItem_descriptor_ = OptionTopData_descriptor_->nested_type(2);
  static const int OptionTopData_OptionItem_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_OptionItem, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_OptionItem, expiry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_OptionItem, strike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_OptionItem, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_OptionItem, totalamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_OptionItem, totalvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_OptionItem, totalopenint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_OptionItem, volumetoopenint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_OptionItem, latestprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_OptionItem, updatetime_),
  };
  OptionTopData_OptionItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OptionTopData_OptionItem_descriptor_,
      OptionTopData_OptionItem::internal_default_instance(),
      OptionTopData_OptionItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(OptionTopData_OptionItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionTopData_OptionItem, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OptionTopData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OptionTopData_descriptor_, OptionTopData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OptionTopData_TopData_descriptor_, OptionTopData_TopData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OptionTopData_BigOrder_descriptor_, OptionTopData_BigOrder::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OptionTopData_OptionItem_descriptor_, OptionTopData_OptionItem::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OptionTopData_2eproto() {
  OptionTopData_default_instance_.Shutdown();
  delete OptionTopData_reflection_;
  OptionTopData_TopData_default_instance_.Shutdown();
  delete OptionTopData_TopData_reflection_;
  OptionTopData_BigOrder_default_instance_.Shutdown();
  delete OptionTopData_BigOrder_reflection_;
  OptionTopData_OptionItem_default_instance_.Shutdown();
  delete OptionTopData_OptionItem_reflection_;
}

void protobuf_InitDefaults_OptionTopData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  OptionTopData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  OptionTopData_TopData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  OptionTopData_BigOrder_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  OptionTopData_OptionItem_default_instance_.DefaultConstruct();
  OptionTopData_default_instance_.get_mutable()->InitAsDefaultInstance();
  OptionTopData_TopData_default_instance_.get_mutable()->InitAsDefaultInstance();
  OptionTopData_BigOrder_default_instance_.get_mutable()->InitAsDefaultInstance();
  OptionTopData_OptionItem_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_OptionTopData_2eproto_once_);
void protobuf_InitDefaults_OptionTopData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_OptionTopData_2eproto_once_,
                 &protobuf_InitDefaults_OptionTopData_2eproto_impl);
}
void protobuf_AddDesc_OptionTopData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_OptionTopData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023OptionTopData.proto\022\021tigeropen.push.pb"
    "\"\360\004\n\rOptionTopData\022\016\n\006market\030\001 \001(\t\022\021\n\tti"
    "mestamp\030\002 \001(\003\0229\n\007topData\030\003 \003(\0132(.tigerop"
    "en.push.pb.OptionTopData.TopData\032\225\001\n\007Top"
    "Data\022\022\n\ntargetName\030\001 \001(\t\022;\n\010bigOrder\030\002 \003"
    "(\0132).tigeropen.push.pb.OptionTopData.Big"
    "Order\0229\n\004item\030\003 \003(\0132+.tigeropen.push.pb."
    "OptionTopData.OptionItem\032\230\001\n\010BigOrder\022\016\n"
    "\006symbol\030\001 \001(\t\022\016\n\006expiry\030\002 \001(\t\022\016\n\006strike\030"
    "\003 \001(\t\022\r\n\005right\030\004 \001(\t\022\013\n\003dir\030\005 \001(\t\022\016\n\006vol"
    "ume\030\006 \001(\001\022\r\n\005price\030\007 \001(\001\022\016\n\006amount\030\010 \001(\001"
    "\022\021\n\ttradeTime\030\t \001(\003\032\315\001\n\nOptionItem\022\016\n\006sy"
    "mbol\030\001 \001(\t\022\016\n\006expiry\030\002 \001(\t\022\016\n\006strike\030\003 \001"
    "(\t\022\r\n\005right\030\004 \001(\t\022\023\n\013totalAmount\030\005 \001(\001\022\023"
    "\n\013totalVolume\030\006 \001(\001\022\024\n\014totalOpenInt\030\007 \001("
    "\001\022\027\n\017volumeToOpenInt\030\010 \001(\001\022\023\n\013latestPric"
    "e\030\t \001(\001\022\022\n\nupdateTime\030\n \001(\003b\006proto3", 675);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OptionTopData.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OptionTopData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_OptionTopData_2eproto_once_);
void protobuf_AddDesc_OptionTopData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_OptionTopData_2eproto_once_,
                 &protobuf_AddDesc_OptionTopData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OptionTopData_2eproto {
  StaticDescriptorInitializer_OptionTopData_2eproto() {
    protobuf_AddDesc_OptionTopData_2eproto();
  }
} static_descriptor_initializer_OptionTopData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionTopData_TopData::kTargetNameFieldNumber;
const int OptionTopData_TopData::kBigOrderFieldNumber;
const int OptionTopData_TopData::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionTopData_TopData::OptionTopData_TopData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_OptionTopData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.OptionTopData.TopData)
}

void OptionTopData_TopData::InitAsDefaultInstance() {
}

OptionTopData_TopData::OptionTopData_TopData(const OptionTopData_TopData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.OptionTopData.TopData)
}

void OptionTopData_TopData::SharedCtor() {
  targetname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

OptionTopData_TopData::~OptionTopData_TopData() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.OptionTopData.TopData)
  SharedDtor();
}

void OptionTopData_TopData::SharedDtor() {
  targetname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionTopData_TopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptionTopData_TopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptionTopData_TopData_descriptor_;
}

const OptionTopData_TopData& OptionTopData_TopData::default_instance() {
  protobuf_InitDefaults_OptionTopData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OptionTopData_TopData> OptionTopData_TopData_default_instance_;

OptionTopData_TopData* OptionTopData_TopData::New(::google::protobuf::Arena* arena) const {
  OptionTopData_TopData* n = new OptionTopData_TopData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OptionTopData_TopData::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.OptionTopData.TopData)
  targetname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigorder_.Clear();
  item_.Clear();
}

bool OptionTopData_TopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.OptionTopData.TopData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string targetName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->targetname().data(), this->targetname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.OptionTopData.TopData.targetName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bigOrder;
        break;
      }

      // repeated .tigeropen.push.pb.OptionTopData.BigOrder bigOrder = 2;
      case 2: {
        if (tag == 18) {
         parse_bigOrder:
          DO_(input->IncrementRecursionDepth());
         parse_loop_bigOrder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bigorder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_bigOrder;
        if (input->ExpectTag(26)) goto parse_loop_item;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tigeropen.push.pb.OptionTopData.OptionItem item = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_item;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.OptionTopData.TopData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.OptionTopData.TopData)
  return false;
#undef DO_
}

void OptionTopData_TopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.OptionTopData.TopData)
  // optional string targetName = 1;
  if (this->targetname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.TopData.targetName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->targetname(), output);
  }

  // repeated .tigeropen.push.pb.OptionTopData.BigOrder bigOrder = 2;
  for (unsigned int i = 0, n = this->bigorder_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bigorder(i), output);
  }

  // repeated .tigeropen.push.pb.OptionTopData.OptionItem item = 3;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.OptionTopData.TopData)
}

::google::protobuf::uint8* OptionTopData_TopData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.OptionTopData.TopData)
  // optional string targetName = 1;
  if (this->targetname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.TopData.targetName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->targetname(), target);
  }

  // repeated .tigeropen.push.pb.OptionTopData.BigOrder bigOrder = 2;
  for (unsigned int i = 0, n = this->bigorder_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->bigorder(i), false, target);
  }

  // repeated .tigeropen.push.pb.OptionTopData.OptionItem item = 3;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->item(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.OptionTopData.TopData)
  return target;
}

size_t OptionTopData_TopData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.OptionTopData.TopData)
  size_t total_size = 0;

  // optional string targetName = 1;
  if (this->targetname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetname());
  }

  // repeated .tigeropen.push.pb.OptionTopData.BigOrder bigOrder = 2;
  {
    unsigned int count = this->bigorder_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bigorder(i));
    }
  }

  // repeated .tigeropen.push.pb.OptionTopData.OptionItem item = 3;
  {
    unsigned int count = this->item_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptionTopData_TopData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.OptionTopData.TopData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OptionTopData_TopData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionTopData_TopData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.OptionTopData.TopData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.OptionTopData.TopData)
    UnsafeMergeFrom(*source);
  }
}

void OptionTopData_TopData::MergeFrom(const OptionTopData_TopData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.OptionTopData.TopData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OptionTopData_TopData::UnsafeMergeFrom(const OptionTopData_TopData& from) {
  GOOGLE_DCHECK(&from != this);
  bigorder_.MergeFrom(from.bigorder_);
  item_.MergeFrom(from.item_);
  if (from.targetname().size() > 0) {

    targetname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetname_);
  }
}

void OptionTopData_TopData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.OptionTopData.TopData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionTopData_TopData::CopyFrom(const OptionTopData_TopData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.OptionTopData.TopData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OptionTopData_TopData::IsInitialized() const {

  return true;
}

void OptionTopData_TopData::Swap(OptionTopData_TopData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionTopData_TopData::InternalSwap(OptionTopData_TopData* other) {
  targetname_.Swap(&other->targetname_);
  bigorder_.UnsafeArenaSwap(&other->bigorder_);
  item_.UnsafeArenaSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OptionTopData_TopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptionTopData_TopData_descriptor_;
  metadata.reflection = OptionTopData_TopData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionTopData_BigOrder::kSymbolFieldNumber;
const int OptionTopData_BigOrder::kExpiryFieldNumber;
const int OptionTopData_BigOrder::kStrikeFieldNumber;
const int OptionTopData_BigOrder::kRightFieldNumber;
const int OptionTopData_BigOrder::kDirFieldNumber;
const int OptionTopData_BigOrder::kVolumeFieldNumber;
const int OptionTopData_BigOrder::kPriceFieldNumber;
const int OptionTopData_BigOrder::kAmountFieldNumber;
const int OptionTopData_BigOrder::kTradeTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionTopData_BigOrder::OptionTopData_BigOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_OptionTopData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.OptionTopData.BigOrder)
}

void OptionTopData_BigOrder::InitAsDefaultInstance() {
}

OptionTopData_BigOrder::OptionTopData_BigOrder(const OptionTopData_BigOrder& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.OptionTopData.BigOrder)
}

void OptionTopData_BigOrder::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strike_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&volume_, 0, reinterpret_cast<char*>(&tradetime_) -
    reinterpret_cast<char*>(&volume_) + sizeof(tradetime_));
  _cached_size_ = 0;
}

OptionTopData_BigOrder::~OptionTopData_BigOrder() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.OptionTopData.BigOrder)
  SharedDtor();
}

void OptionTopData_BigOrder::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strike_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionTopData_BigOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptionTopData_BigOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptionTopData_BigOrder_descriptor_;
}

const OptionTopData_BigOrder& OptionTopData_BigOrder::default_instance() {
  protobuf_InitDefaults_OptionTopData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OptionTopData_BigOrder> OptionTopData_BigOrder_default_instance_;

OptionTopData_BigOrder* OptionTopData_BigOrder::New(::google::protobuf::Arena* arena) const {
  OptionTopData_BigOrder* n = new OptionTopData_BigOrder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OptionTopData_BigOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.OptionTopData.BigOrder)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OptionTopData_BigOrder, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OptionTopData_BigOrder*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(volume_, amount_);
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strike_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetime_ = GOOGLE_LONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

}

bool OptionTopData_BigOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.OptionTopData.BigOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.OptionTopData.BigOrder.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_expiry;
        break;
      }

      // optional string expiry = 2;
      case 2: {
        if (tag == 18) {
         parse_expiry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expiry()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->expiry().data(), this->expiry().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.OptionTopData.BigOrder.expiry"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_strike;
        break;
      }

      // optional string strike = 3;
      case 3: {
        if (tag == 26) {
         parse_strike:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strike()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strike().data(), this->strike().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.OptionTopData.BigOrder.strike"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_right;
        break;
      }

      // optional string right = 4;
      case 4: {
        if (tag == 34) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_right()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->right().data(), this->right().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.OptionTopData.BigOrder.right"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dir;
        break;
      }

      // optional string dir = 5;
      case 5: {
        if (tag == 42) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dir().data(), this->dir().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.OptionTopData.BigOrder.dir"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_volume;
        break;
      }

      // optional double volume = 6;
      case 6: {
        if (tag == 49) {
         parse_volume:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_price;
        break;
      }

      // optional double price = 7;
      case 7: {
        if (tag == 57) {
         parse_price:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_amount;
        break;
      }

      // optional double amount = 8;
      case 8: {
        if (tag == 65) {
         parse_amount:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_tradeTime;
        break;
      }

      // optional int64 tradeTime = 9;
      case 9: {
        if (tag == 72) {
         parse_tradeTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradetime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.OptionTopData.BigOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.OptionTopData.BigOrder)
  return false;
#undef DO_
}

void OptionTopData_BigOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.OptionTopData.BigOrder)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.BigOrder.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string expiry = 2;
  if (this->expiry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expiry().data(), this->expiry().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.BigOrder.expiry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->expiry(), output);
  }

  // optional string strike = 3;
  if (this->strike().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strike().data(), this->strike().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.BigOrder.strike");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->strike(), output);
  }

  // optional string right = 4;
  if (this->right().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->right().data(), this->right().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.BigOrder.right");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->right(), output);
  }

  // optional string dir = 5;
  if (this->dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dir().data(), this->dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.BigOrder.dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->dir(), output);
  }

  // optional double volume = 6;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->volume(), output);
  }

  // optional double price = 7;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->price(), output);
  }

  // optional double amount = 8;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->amount(), output);
  }

  // optional int64 tradeTime = 9;
  if (this->tradetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->tradetime(), output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.OptionTopData.BigOrder)
}

::google::protobuf::uint8* OptionTopData_BigOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.OptionTopData.BigOrder)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.BigOrder.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string expiry = 2;
  if (this->expiry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expiry().data(), this->expiry().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.BigOrder.expiry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->expiry(), target);
  }

  // optional string strike = 3;
  if (this->strike().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strike().data(), this->strike().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.BigOrder.strike");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strike(), target);
  }

  // optional string right = 4;
  if (this->right().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->right().data(), this->right().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.BigOrder.right");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->right(), target);
  }

  // optional string dir = 5;
  if (this->dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dir().data(), this->dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.BigOrder.dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dir(), target);
  }

  // optional double volume = 6;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->volume(), target);
  }

  // optional double price = 7;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->price(), target);
  }

  // optional double amount = 8;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->amount(), target);
  }

  // optional int64 tradeTime = 9;
  if (this->tradetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->tradetime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.OptionTopData.BigOrder)
  return target;
}

size_t OptionTopData_BigOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.OptionTopData.BigOrder)
  size_t total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string expiry = 2;
  if (this->expiry().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->expiry());
  }

  // optional string strike = 3;
  if (this->strike().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strike());
  }

  // optional string right = 4;
  if (this->right().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->right());
  }

  // optional string dir = 5;
  if (this->dir().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dir());
  }

  // optional double volume = 6;
  if (this->volume() != 0) {
    total_size += 1 + 8;
  }

  // optional double price = 7;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // optional double amount = 8;
  if (this->amount() != 0) {
    total_size += 1 + 8;
  }

  // optional int64 tradeTime = 9;
  if (this->tradetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tradetime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptionTopData_BigOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.OptionTopData.BigOrder)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OptionTopData_BigOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionTopData_BigOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.OptionTopData.BigOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.OptionTopData.BigOrder)
    UnsafeMergeFrom(*source);
  }
}

void OptionTopData_BigOrder::MergeFrom(const OptionTopData_BigOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.OptionTopData.BigOrder)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OptionTopData_BigOrder::UnsafeMergeFrom(const OptionTopData_BigOrder& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.expiry().size() > 0) {

    expiry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expiry_);
  }
  if (from.strike().size() > 0) {

    strike_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strike_);
  }
  if (from.right().size() > 0) {

    right_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.right_);
  }
  if (from.dir().size() > 0) {

    dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dir_);
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.tradetime() != 0) {
    set_tradetime(from.tradetime());
  }
}

void OptionTopData_BigOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.OptionTopData.BigOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionTopData_BigOrder::CopyFrom(const OptionTopData_BigOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.OptionTopData.BigOrder)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OptionTopData_BigOrder::IsInitialized() const {

  return true;
}

void OptionTopData_BigOrder::Swap(OptionTopData_BigOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionTopData_BigOrder::InternalSwap(OptionTopData_BigOrder* other) {
  symbol_.Swap(&other->symbol_);
  expiry_.Swap(&other->expiry_);
  strike_.Swap(&other->strike_);
  right_.Swap(&other->right_);
  dir_.Swap(&other->dir_);
  std::swap(volume_, other->volume_);
  std::swap(price_, other->price_);
  std::swap(amount_, other->amount_);
  std::swap(tradetime_, other->tradetime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OptionTopData_BigOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptionTopData_BigOrder_descriptor_;
  metadata.reflection = OptionTopData_BigOrder_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionTopData_OptionItem::kSymbolFieldNumber;
const int OptionTopData_OptionItem::kExpiryFieldNumber;
const int OptionTopData_OptionItem::kStrikeFieldNumber;
const int OptionTopData_OptionItem::kRightFieldNumber;
const int OptionTopData_OptionItem::kTotalAmountFieldNumber;
const int OptionTopData_OptionItem::kTotalVolumeFieldNumber;
const int OptionTopData_OptionItem::kTotalOpenIntFieldNumber;
const int OptionTopData_OptionItem::kVolumeToOpenIntFieldNumber;
const int OptionTopData_OptionItem::kLatestPriceFieldNumber;
const int OptionTopData_OptionItem::kUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionTopData_OptionItem::OptionTopData_OptionItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_OptionTopData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.OptionTopData.OptionItem)
}

void OptionTopData_OptionItem::InitAsDefaultInstance() {
}

OptionTopData_OptionItem::OptionTopData_OptionItem(const OptionTopData_OptionItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.OptionTopData.OptionItem)
}

void OptionTopData_OptionItem::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strike_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&totalamount_, 0, reinterpret_cast<char*>(&updatetime_) -
    reinterpret_cast<char*>(&totalamount_) + sizeof(updatetime_));
  _cached_size_ = 0;
}

OptionTopData_OptionItem::~OptionTopData_OptionItem() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.OptionTopData.OptionItem)
  SharedDtor();
}

void OptionTopData_OptionItem::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strike_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionTopData_OptionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptionTopData_OptionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptionTopData_OptionItem_descriptor_;
}

const OptionTopData_OptionItem& OptionTopData_OptionItem::default_instance() {
  protobuf_InitDefaults_OptionTopData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OptionTopData_OptionItem> OptionTopData_OptionItem_default_instance_;

OptionTopData_OptionItem* OptionTopData_OptionItem::New(::google::protobuf::Arena* arena) const {
  OptionTopData_OptionItem* n = new OptionTopData_OptionItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OptionTopData_OptionItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.OptionTopData.OptionItem)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OptionTopData_OptionItem, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OptionTopData_OptionItem*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(totalamount_, volumetoopenint_);
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strike_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(latestprice_, updatetime_);

#undef ZR_HELPER_
#undef ZR_

}

bool OptionTopData_OptionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.OptionTopData.OptionItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.OptionTopData.OptionItem.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_expiry;
        break;
      }

      // optional string expiry = 2;
      case 2: {
        if (tag == 18) {
         parse_expiry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expiry()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->expiry().data(), this->expiry().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.OptionTopData.OptionItem.expiry"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_strike;
        break;
      }

      // optional string strike = 3;
      case 3: {
        if (tag == 26) {
         parse_strike:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strike()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strike().data(), this->strike().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.OptionTopData.OptionItem.strike"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_right;
        break;
      }

      // optional string right = 4;
      case 4: {
        if (tag == 34) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_right()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->right().data(), this->right().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.OptionTopData.OptionItem.right"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_totalAmount;
        break;
      }

      // optional double totalAmount = 5;
      case 5: {
        if (tag == 41) {
         parse_totalAmount:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalamount_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_totalVolume;
        break;
      }

      // optional double totalVolume = 6;
      case 6: {
        if (tag == 49) {
         parse_totalVolume:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalvolume_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_totalOpenInt;
        break;
      }

      // optional double totalOpenInt = 7;
      case 7: {
        if (tag == 57) {
         parse_totalOpenInt:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalopenint_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_volumeToOpenInt;
        break;
      }

      // optional double volumeToOpenInt = 8;
      case 8: {
        if (tag == 65) {
         parse_volumeToOpenInt:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volumetoopenint_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_latestPrice;
        break;
      }

      // optional double latestPrice = 9;
      case 9: {
        if (tag == 73) {
         parse_latestPrice:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latestprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_updateTime;
        break;
      }

      // optional int64 updateTime = 10;
      case 10: {
        if (tag == 80) {
         parse_updateTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.OptionTopData.OptionItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.OptionTopData.OptionItem)
  return false;
#undef DO_
}

void OptionTopData_OptionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.OptionTopData.OptionItem)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.OptionItem.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string expiry = 2;
  if (this->expiry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expiry().data(), this->expiry().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.OptionItem.expiry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->expiry(), output);
  }

  // optional string strike = 3;
  if (this->strike().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strike().data(), this->strike().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.OptionItem.strike");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->strike(), output);
  }

  // optional string right = 4;
  if (this->right().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->right().data(), this->right().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.OptionItem.right");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->right(), output);
  }

  // optional double totalAmount = 5;
  if (this->totalamount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->totalamount(), output);
  }

  // optional double totalVolume = 6;
  if (this->totalvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->totalvolume(), output);
  }

  // optional double totalOpenInt = 7;
  if (this->totalopenint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->totalopenint(), output);
  }

  // optional double volumeToOpenInt = 8;
  if (this->volumetoopenint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->volumetoopenint(), output);
  }

  // optional double latestPrice = 9;
  if (this->latestprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->latestprice(), output);
  }

  // optional int64 updateTime = 10;
  if (this->updatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->updatetime(), output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.OptionTopData.OptionItem)
}

::google::protobuf::uint8* OptionTopData_OptionItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.OptionTopData.OptionItem)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.OptionItem.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string expiry = 2;
  if (this->expiry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expiry().data(), this->expiry().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.OptionItem.expiry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->expiry(), target);
  }

  // optional string strike = 3;
  if (this->strike().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strike().data(), this->strike().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.OptionItem.strike");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strike(), target);
  }

  // optional string right = 4;
  if (this->right().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->right().data(), this->right().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.OptionItem.right");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->right(), target);
  }

  // optional double totalAmount = 5;
  if (this->totalamount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->totalamount(), target);
  }

  // optional double totalVolume = 6;
  if (this->totalvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->totalvolume(), target);
  }

  // optional double totalOpenInt = 7;
  if (this->totalopenint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->totalopenint(), target);
  }

  // optional double volumeToOpenInt = 8;
  if (this->volumetoopenint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->volumetoopenint(), target);
  }

  // optional double latestPrice = 9;
  if (this->latestprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->latestprice(), target);
  }

  // optional int64 updateTime = 10;
  if (this->updatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->updatetime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.OptionTopData.OptionItem)
  return target;
}

size_t OptionTopData_OptionItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.OptionTopData.OptionItem)
  size_t total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string expiry = 2;
  if (this->expiry().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->expiry());
  }

  // optional string strike = 3;
  if (this->strike().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strike());
  }

  // optional string right = 4;
  if (this->right().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->right());
  }

  // optional double totalAmount = 5;
  if (this->totalamount() != 0) {
    total_size += 1 + 8;
  }

  // optional double totalVolume = 6;
  if (this->totalvolume() != 0) {
    total_size += 1 + 8;
  }

  // optional double totalOpenInt = 7;
  if (this->totalopenint() != 0) {
    total_size += 1 + 8;
  }

  // optional double volumeToOpenInt = 8;
  if (this->volumetoopenint() != 0) {
    total_size += 1 + 8;
  }

  // optional double latestPrice = 9;
  if (this->latestprice() != 0) {
    total_size += 1 + 8;
  }

  // optional int64 updateTime = 10;
  if (this->updatetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->updatetime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptionTopData_OptionItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.OptionTopData.OptionItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OptionTopData_OptionItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionTopData_OptionItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.OptionTopData.OptionItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.OptionTopData.OptionItem)
    UnsafeMergeFrom(*source);
  }
}

void OptionTopData_OptionItem::MergeFrom(const OptionTopData_OptionItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.OptionTopData.OptionItem)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OptionTopData_OptionItem::UnsafeMergeFrom(const OptionTopData_OptionItem& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.expiry().size() > 0) {

    expiry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expiry_);
  }
  if (from.strike().size() > 0) {

    strike_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strike_);
  }
  if (from.right().size() > 0) {

    right_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.right_);
  }
  if (from.totalamount() != 0) {
    set_totalamount(from.totalamount());
  }
  if (from.totalvolume() != 0) {
    set_totalvolume(from.totalvolume());
  }
  if (from.totalopenint() != 0) {
    set_totalopenint(from.totalopenint());
  }
  if (from.volumetoopenint() != 0) {
    set_volumetoopenint(from.volumetoopenint());
  }
  if (from.latestprice() != 0) {
    set_latestprice(from.latestprice());
  }
  if (from.updatetime() != 0) {
    set_updatetime(from.updatetime());
  }
}

void OptionTopData_OptionItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.OptionTopData.OptionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionTopData_OptionItem::CopyFrom(const OptionTopData_OptionItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.OptionTopData.OptionItem)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OptionTopData_OptionItem::IsInitialized() const {

  return true;
}

void OptionTopData_OptionItem::Swap(OptionTopData_OptionItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionTopData_OptionItem::InternalSwap(OptionTopData_OptionItem* other) {
  symbol_.Swap(&other->symbol_);
  expiry_.Swap(&other->expiry_);
  strike_.Swap(&other->strike_);
  right_.Swap(&other->right_);
  std::swap(totalamount_, other->totalamount_);
  std::swap(totalvolume_, other->totalvolume_);
  std::swap(totalopenint_, other->totalopenint_);
  std::swap(volumetoopenint_, other->volumetoopenint_);
  std::swap(latestprice_, other->latestprice_);
  std::swap(updatetime_, other->updatetime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OptionTopData_OptionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptionTopData_OptionItem_descriptor_;
  metadata.reflection = OptionTopData_OptionItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionTopData::kMarketFieldNumber;
const int OptionTopData::kTimestampFieldNumber;
const int OptionTopData::kTopDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionTopData::OptionTopData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_OptionTopData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.OptionTopData)
}

void OptionTopData::InitAsDefaultInstance() {
}

OptionTopData::OptionTopData(const OptionTopData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.OptionTopData)
}

void OptionTopData::SharedCtor() {
  market_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

OptionTopData::~OptionTopData() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.OptionTopData)
  SharedDtor();
}

void OptionTopData::SharedDtor() {
  market_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionTopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptionTopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptionTopData_descriptor_;
}

const OptionTopData& OptionTopData::default_instance() {
  protobuf_InitDefaults_OptionTopData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OptionTopData> OptionTopData_default_instance_;

OptionTopData* OptionTopData::New(::google::protobuf::Arena* arena) const {
  OptionTopData* n = new OptionTopData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OptionTopData::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.OptionTopData)
  market_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  topdata_.Clear();
}

bool OptionTopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.OptionTopData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string market = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->market().data(), this->market().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.OptionTopData.market"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_topData;
        break;
      }

      // repeated .tigeropen.push.pb.OptionTopData.TopData topData = 3;
      case 3: {
        if (tag == 26) {
         parse_topData:
          DO_(input->IncrementRecursionDepth());
         parse_loop_topData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_topdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_topData;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.OptionTopData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.OptionTopData)
  return false;
#undef DO_
}

void OptionTopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.OptionTopData)
  // optional string market = 1;
  if (this->market().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->market().data(), this->market().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.market");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->market(), output);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // repeated .tigeropen.push.pb.OptionTopData.TopData topData = 3;
  for (unsigned int i = 0, n = this->topdata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->topdata(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.OptionTopData)
}

::google::protobuf::uint8* OptionTopData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.OptionTopData)
  // optional string market = 1;
  if (this->market().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->market().data(), this->market().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.OptionTopData.market");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->market(), target);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // repeated .tigeropen.push.pb.OptionTopData.TopData topData = 3;
  for (unsigned int i = 0, n = this->topdata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->topdata(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.OptionTopData)
  return target;
}

size_t OptionTopData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.OptionTopData)
  size_t total_size = 0;

  // optional string market = 1;
  if (this->market().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->market());
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // repeated .tigeropen.push.pb.OptionTopData.TopData topData = 3;
  {
    unsigned int count = this->topdata_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topdata(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptionTopData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.OptionTopData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OptionTopData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionTopData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.OptionTopData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.OptionTopData)
    UnsafeMergeFrom(*source);
  }
}

void OptionTopData::MergeFrom(const OptionTopData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.OptionTopData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OptionTopData::UnsafeMergeFrom(const OptionTopData& from) {
  GOOGLE_DCHECK(&from != this);
  topdata_.MergeFrom(from.topdata_);
  if (from.market().size() > 0) {

    market_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void OptionTopData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.OptionTopData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionTopData::CopyFrom(const OptionTopData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.OptionTopData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OptionTopData::IsInitialized() const {

  return true;
}

void OptionTopData::Swap(OptionTopData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionTopData::InternalSwap(OptionTopData* other) {
  market_.Swap(&other->market_);
  std::swap(timestamp_, other->timestamp_);
  topdata_.UnsafeArenaSwap(&other->topdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OptionTopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptionTopData_descriptor_;
  metadata.reflection = OptionTopData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OptionTopData_TopData

// optional string targetName = 1;
void OptionTopData_TopData::clear_targetname() {
  targetname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OptionTopData_TopData::targetname() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.TopData.targetName)
  return targetname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_TopData::set_targetname(const ::std::string& value) {
  
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.TopData.targetName)
}
void OptionTopData_TopData::set_targetname(const char* value) {
  
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.TopData.targetName)
}
void OptionTopData_TopData::set_targetname(const char* value, size_t size) {
  
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.TopData.targetName)
}
::std::string* OptionTopData_TopData::mutable_targetname() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.TopData.targetName)
  return targetname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OptionTopData_TopData::release_targetname() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.TopData.targetName)
  
  return targetname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_TopData::set_allocated_targetname(::std::string* targetname) {
  if (targetname != NULL) {
    
  } else {
    
  }
  targetname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetname);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.TopData.targetName)
}

// repeated .tigeropen.push.pb.OptionTopData.BigOrder bigOrder = 2;
int OptionTopData_TopData::bigorder_size() const {
  return bigorder_.size();
}
void OptionTopData_TopData::clear_bigorder() {
  bigorder_.Clear();
}
const ::tigeropen::push::pb::OptionTopData_BigOrder& OptionTopData_TopData::bigorder(int index) const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.TopData.bigOrder)
  return bigorder_.Get(index);
}
::tigeropen::push::pb::OptionTopData_BigOrder* OptionTopData_TopData::mutable_bigorder(int index) {
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.TopData.bigOrder)
  return bigorder_.Mutable(index);
}
::tigeropen::push::pb::OptionTopData_BigOrder* OptionTopData_TopData::add_bigorder() {
  // @@protoc_insertion_point(field_add:tigeropen.push.pb.OptionTopData.TopData.bigOrder)
  return bigorder_.Add();
}
::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_BigOrder >*
OptionTopData_TopData::mutable_bigorder() {
  // @@protoc_insertion_point(field_mutable_list:tigeropen.push.pb.OptionTopData.TopData.bigOrder)
  return &bigorder_;
}
const ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_BigOrder >&
OptionTopData_TopData::bigorder() const {
  // @@protoc_insertion_point(field_list:tigeropen.push.pb.OptionTopData.TopData.bigOrder)
  return bigorder_;
}

// repeated .tigeropen.push.pb.OptionTopData.OptionItem item = 3;
int OptionTopData_TopData::item_size() const {
  return item_.size();
}
void OptionTopData_TopData::clear_item() {
  item_.Clear();
}
const ::tigeropen::push::pb::OptionTopData_OptionItem& OptionTopData_TopData::item(int index) const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.TopData.item)
  return item_.Get(index);
}
::tigeropen::push::pb::OptionTopData_OptionItem* OptionTopData_TopData::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.TopData.item)
  return item_.Mutable(index);
}
::tigeropen::push::pb::OptionTopData_OptionItem* OptionTopData_TopData::add_item() {
  // @@protoc_insertion_point(field_add:tigeropen.push.pb.OptionTopData.TopData.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_OptionItem >*
OptionTopData_TopData::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:tigeropen.push.pb.OptionTopData.TopData.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_OptionItem >&
OptionTopData_TopData::item() const {
  // @@protoc_insertion_point(field_list:tigeropen.push.pb.OptionTopData.TopData.item)
  return item_;
}

inline const OptionTopData_TopData* OptionTopData_TopData::internal_default_instance() {
  return &OptionTopData_TopData_default_instance_.get();
}
// -------------------------------------------------------------------

// OptionTopData_BigOrder

// optional string symbol = 1;
void OptionTopData_BigOrder::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OptionTopData_BigOrder::symbol() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.BigOrder.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_BigOrder::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.BigOrder.symbol)
}
void OptionTopData_BigOrder::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.BigOrder.symbol)
}
void OptionTopData_BigOrder::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.BigOrder.symbol)
}
::std::string* OptionTopData_BigOrder::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.BigOrder.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OptionTopData_BigOrder::release_symbol() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.BigOrder.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_BigOrder::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.BigOrder.symbol)
}

// optional string expiry = 2;
void OptionTopData_BigOrder::clear_expiry() {
  expiry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OptionTopData_BigOrder::expiry() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.BigOrder.expiry)
  return expiry_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_BigOrder::set_expiry(const ::std::string& value) {
  
  expiry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.BigOrder.expiry)
}
void OptionTopData_BigOrder::set_expiry(const char* value) {
  
  expiry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.BigOrder.expiry)
}
void OptionTopData_BigOrder::set_expiry(const char* value, size_t size) {
  
  expiry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.BigOrder.expiry)
}
::std::string* OptionTopData_BigOrder::mutable_expiry() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.BigOrder.expiry)
  return expiry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OptionTopData_BigOrder::release_expiry() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.BigOrder.expiry)
  
  return expiry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_BigOrder::set_allocated_expiry(::std::string* expiry) {
  if (expiry != NULL) {
    
  } else {
    
  }
  expiry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expiry);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.BigOrder.expiry)
}

// optional string strike = 3;
void OptionTopData_BigOrder::clear_strike() {
  strike_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OptionTopData_BigOrder::strike() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.BigOrder.strike)
  return strike_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_BigOrder::set_strike(const ::std::string& value) {
  
  strike_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.BigOrder.strike)
}
void OptionTopData_BigOrder::set_strike(const char* value) {
  
  strike_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.BigOrder.strike)
}
void OptionTopData_BigOrder::set_strike(const char* value, size_t size) {
  
  strike_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.BigOrder.strike)
}
::std::string* OptionTopData_BigOrder::mutable_strike() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.BigOrder.strike)
  return strike_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OptionTopData_BigOrder::release_strike() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.BigOrder.strike)
  
  return strike_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_BigOrder::set_allocated_strike(::std::string* strike) {
  if (strike != NULL) {
    
  } else {
    
  }
  strike_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strike);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.BigOrder.strike)
}

// optional string right = 4;
void OptionTopData_BigOrder::clear_right() {
  right_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OptionTopData_BigOrder::right() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.BigOrder.right)
  return right_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_BigOrder::set_right(const ::std::string& value) {
  
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.BigOrder.right)
}
void OptionTopData_BigOrder::set_right(const char* value) {
  
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.BigOrder.right)
}
void OptionTopData_BigOrder::set_right(const char* value, size_t size) {
  
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.BigOrder.right)
}
::std::string* OptionTopData_BigOrder::mutable_right() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.BigOrder.right)
  return right_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OptionTopData_BigOrder::release_right() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.BigOrder.right)
  
  return right_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_BigOrder::set_allocated_right(::std::string* right) {
  if (right != NULL) {
    
  } else {
    
  }
  right_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.BigOrder.right)
}

// optional string dir = 5;
void OptionTopData_BigOrder::clear_dir() {
  dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OptionTopData_BigOrder::dir() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.BigOrder.dir)
  return dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_BigOrder::set_dir(const ::std::string& value) {
  
  dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.BigOrder.dir)
}
void OptionTopData_BigOrder::set_dir(const char* value) {
  
  dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.BigOrder.dir)
}
void OptionTopData_BigOrder::set_dir(const char* value, size_t size) {
  
  dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.BigOrder.dir)
}
::std::string* OptionTopData_BigOrder::mutable_dir() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.BigOrder.dir)
  return dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OptionTopData_BigOrder::release_dir() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.BigOrder.dir)
  
  return dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_BigOrder::set_allocated_dir(::std::string* dir) {
  if (dir != NULL) {
    
  } else {
    
  }
  dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dir);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.BigOrder.dir)
}

// optional double volume = 6;
void OptionTopData_BigOrder::clear_volume() {
  volume_ = 0;
}
double OptionTopData_BigOrder::volume() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.BigOrder.volume)
  return volume_;
}
void OptionTopData_BigOrder::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.BigOrder.volume)
}

// optional double price = 7;
void OptionTopData_BigOrder::clear_price() {
  price_ = 0;
}
double OptionTopData_BigOrder::price() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.BigOrder.price)
  return price_;
}
void OptionTopData_BigOrder::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.BigOrder.price)
}

// optional double amount = 8;
void OptionTopData_BigOrder::clear_amount() {
  amount_ = 0;
}
double OptionTopData_BigOrder::amount() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.BigOrder.amount)
  return amount_;
}
void OptionTopData_BigOrder::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.BigOrder.amount)
}

// optional int64 tradeTime = 9;
void OptionTopData_BigOrder::clear_tradetime() {
  tradetime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OptionTopData_BigOrder::tradetime() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.BigOrder.tradeTime)
  return tradetime_;
}
void OptionTopData_BigOrder::set_tradetime(::google::protobuf::int64 value) {
  
  tradetime_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.BigOrder.tradeTime)
}

inline const OptionTopData_BigOrder* OptionTopData_BigOrder::internal_default_instance() {
  return &OptionTopData_BigOrder_default_instance_.get();
}
// -------------------------------------------------------------------

// OptionTopData_OptionItem

// optional string symbol = 1;
void OptionTopData_OptionItem::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OptionTopData_OptionItem::symbol() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_OptionItem::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.symbol)
}
void OptionTopData_OptionItem::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.OptionItem.symbol)
}
void OptionTopData_OptionItem::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.OptionItem.symbol)
}
::std::string* OptionTopData_OptionItem::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.OptionItem.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OptionTopData_OptionItem::release_symbol() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.OptionItem.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_OptionItem::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.OptionItem.symbol)
}

// optional string expiry = 2;
void OptionTopData_OptionItem::clear_expiry() {
  expiry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OptionTopData_OptionItem::expiry() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.expiry)
  return expiry_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_OptionItem::set_expiry(const ::std::string& value) {
  
  expiry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.expiry)
}
void OptionTopData_OptionItem::set_expiry(const char* value) {
  
  expiry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.OptionItem.expiry)
}
void OptionTopData_OptionItem::set_expiry(const char* value, size_t size) {
  
  expiry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.OptionItem.expiry)
}
::std::string* OptionTopData_OptionItem::mutable_expiry() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.OptionItem.expiry)
  return expiry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OptionTopData_OptionItem::release_expiry() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.OptionItem.expiry)
  
  return expiry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_OptionItem::set_allocated_expiry(::std::string* expiry) {
  if (expiry != NULL) {
    
  } else {
    
  }
  expiry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expiry);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.OptionItem.expiry)
}

// optional string strike = 3;
void OptionTopData_OptionItem::clear_strike() {
  strike_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OptionTopData_OptionItem::strike() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.strike)
  return strike_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_OptionItem::set_strike(const ::std::string& value) {
  
  strike_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.strike)
}
void OptionTopData_OptionItem::set_strike(const char* value) {
  
  strike_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.OptionItem.strike)
}
void OptionTopData_OptionItem::set_strike(const char* value, size_t size) {
  
  strike_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.OptionItem.strike)
}
::std::string* OptionTopData_OptionItem::mutable_strike() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.OptionItem.strike)
  return strike_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OptionTopData_OptionItem::release_strike() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.OptionItem.strike)
  
  return strike_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_OptionItem::set_allocated_strike(::std::string* strike) {
  if (strike != NULL) {
    
  } else {
    
  }
  strike_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strike);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.OptionItem.strike)
}

// optional string right = 4;
void OptionTopData_OptionItem::clear_right() {
  right_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OptionTopData_OptionItem::right() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.right)
  return right_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_OptionItem::set_right(const ::std::string& value) {
  
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.right)
}
void OptionTopData_OptionItem::set_right(const char* value) {
  
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.OptionItem.right)
}
void OptionTopData_OptionItem::set_right(const char* value, size_t size) {
  
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.OptionItem.right)
}
::std::string* OptionTopData_OptionItem::mutable_right() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.OptionItem.right)
  return right_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OptionTopData_OptionItem::release_right() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.OptionItem.right)
  
  return right_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData_OptionItem::set_allocated_right(::std::string* right) {
  if (right != NULL) {
    
  } else {
    
  }
  right_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.OptionItem.right)
}

// optional double totalAmount = 5;
void OptionTopData_OptionItem::clear_totalamount() {
  totalamount_ = 0;
}
double OptionTopData_OptionItem::totalamount() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.totalAmount)
  return totalamount_;
}
void OptionTopData_OptionItem::set_totalamount(double value) {
  
  totalamount_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.totalAmount)
}

// optional double totalVolume = 6;
void OptionTopData_OptionItem::clear_totalvolume() {
  totalvolume_ = 0;
}
double OptionTopData_OptionItem::totalvolume() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.totalVolume)
  return totalvolume_;
}
void OptionTopData_OptionItem::set_totalvolume(double value) {
  
  totalvolume_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.totalVolume)
}

// optional double totalOpenInt = 7;
void OptionTopData_OptionItem::clear_totalopenint() {
  totalopenint_ = 0;
}
double OptionTopData_OptionItem::totalopenint() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.totalOpenInt)
  return totalopenint_;
}
void OptionTopData_OptionItem::set_totalopenint(double value) {
  
  totalopenint_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.totalOpenInt)
}

// optional double volumeToOpenInt = 8;
void OptionTopData_OptionItem::clear_volumetoopenint() {
  volumetoopenint_ = 0;
}
double OptionTopData_OptionItem::volumetoopenint() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.volumeToOpenInt)
  return volumetoopenint_;
}
void OptionTopData_OptionItem::set_volumetoopenint(double value) {
  
  volumetoopenint_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.volumeToOpenInt)
}

// optional double latestPrice = 9;
void OptionTopData_OptionItem::clear_latestprice() {
  latestprice_ = 0;
}
double OptionTopData_OptionItem::latestprice() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.latestPrice)
  return latestprice_;
}
void OptionTopData_OptionItem::set_latestprice(double value) {
  
  latestprice_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.latestPrice)
}

// optional int64 updateTime = 10;
void OptionTopData_OptionItem::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OptionTopData_OptionItem::updatetime() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.OptionItem.updateTime)
  return updatetime_;
}
void OptionTopData_OptionItem::set_updatetime(::google::protobuf::int64 value) {
  
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.OptionItem.updateTime)
}

inline const OptionTopData_OptionItem* OptionTopData_OptionItem::internal_default_instance() {
  return &OptionTopData_OptionItem_default_instance_.get();
}
// -------------------------------------------------------------------

// OptionTopData

// optional string market = 1;
void OptionTopData::clear_market() {
  market_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OptionTopData::market() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.market)
  return market_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData::set_market(const ::std::string& value) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.market)
}
void OptionTopData::set_market(const char* value) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.OptionTopData.market)
}
void OptionTopData::set_market(const char* value, size_t size) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.OptionTopData.market)
}
::std::string* OptionTopData::mutable_market() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.market)
  return market_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OptionTopData::release_market() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.OptionTopData.market)
  
  return market_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OptionTopData::set_allocated_market(::std::string* market) {
  if (market != NULL) {
    
  } else {
    
  }
  market_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.OptionTopData.market)
}

// optional int64 timestamp = 2;
void OptionTopData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OptionTopData::timestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.timestamp)
  return timestamp_;
}
void OptionTopData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.OptionTopData.timestamp)
}

// repeated .tigeropen.push.pb.OptionTopData.TopData topData = 3;
int OptionTopData::topdata_size() const {
  return topdata_.size();
}
void OptionTopData::clear_topdata() {
  topdata_.Clear();
}
const ::tigeropen::push::pb::OptionTopData_TopData& OptionTopData::topdata(int index) const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.OptionTopData.topData)
  return topdata_.Get(index);
}
::tigeropen::push::pb::OptionTopData_TopData* OptionTopData::mutable_topdata(int index) {
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.OptionTopData.topData)
  return topdata_.Mutable(index);
}
::tigeropen::push::pb::OptionTopData_TopData* OptionTopData::add_topdata() {
  // @@protoc_insertion_point(field_add:tigeropen.push.pb.OptionTopData.topData)
  return topdata_.Add();
}
::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_TopData >*
OptionTopData::mutable_topdata() {
  // @@protoc_insertion_point(field_mutable_list:tigeropen.push.pb.OptionTopData.topData)
  return &topdata_;
}
const ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::OptionTopData_TopData >&
OptionTopData::topdata() const {
  // @@protoc_insertion_point(field_list:tigeropen.push.pb.OptionTopData.topData)
  return topdata_;
}

inline const OptionTopData* OptionTopData::internal_default_instance() {
  return &OptionTopData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace push
}  // namespace tigeropen

// @@protoc_insertion_point(global_scope)
