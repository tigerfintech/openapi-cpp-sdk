// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PushData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PushData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tigeropen {
namespace push {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* PushData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushData_reflection_ = NULL;
struct PushDataOneofInstance {
  const ::tigeropen::push::pb::QuoteData* quotedata_;
  const ::tigeropen::push::pb::QuoteDepthData* quotedepthdata_;
  const ::tigeropen::push::pb::TradeTickData* tradetickdata_;
  const ::tigeropen::push::pb::PositionData* positiondata_;
  const ::tigeropen::push::pb::AssetData* assetdata_;
  const ::tigeropen::push::pb::OrderStatusData* orderstatusdata_;
  const ::tigeropen::push::pb::OrderTransactionData* ordertransactiondata_;
  const ::tigeropen::push::pb::StockTopData* stocktopdata_;
  const ::tigeropen::push::pb::OptionTopData* optiontopdata_;
  const ::tigeropen::push::pb::KlineData* klinedata_;
  const ::tigeropen::push::pb::TickData* tickdata_;
}* PushData_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_PushData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_PushData_2eproto() {
  protobuf_AddDesc_PushData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PushData.proto");
  GOOGLE_CHECK(file != NULL);
  PushData_descriptor_ = file->message_type(0);
  static const int PushData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushData, datatype_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(PushData_default_oneof_instance_, quotedata_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(PushData_default_oneof_instance_, quotedepthdata_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(PushData_default_oneof_instance_, tradetickdata_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(PushData_default_oneof_instance_, positiondata_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(PushData_default_oneof_instance_, assetdata_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(PushData_default_oneof_instance_, orderstatusdata_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(PushData_default_oneof_instance_, ordertransactiondata_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(PushData_default_oneof_instance_, stocktopdata_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(PushData_default_oneof_instance_, optiontopdata_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(PushData_default_oneof_instance_, klinedata_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(PushData_default_oneof_instance_, tickdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushData, body_),
  };
  PushData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PushData_descriptor_,
      PushData::internal_default_instance(),
      PushData_offsets_,
      -1,
      -1,
      -1,
      PushData_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushData, _oneof_case_[0]),
      sizeof(PushData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushData, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PushData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PushData_descriptor_, PushData::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PushData_2eproto() {
  PushData_default_instance_.Shutdown();
  delete PushData_default_oneof_instance_;
  delete PushData_reflection_;
}

void protobuf_InitDefaults_PushData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tigeropen::push::pb::protobuf_InitDefaults_SocketCommon_2eproto();
  ::tigeropen::push::pb::protobuf_InitDefaults_OrderStatusData_2eproto();
  ::tigeropen::push::pb::protobuf_InitDefaults_PositionData_2eproto();
  ::tigeropen::push::pb::protobuf_InitDefaults_AssetData_2eproto();
  ::tigeropen::push::pb::protobuf_InitDefaults_QuoteData_2eproto();
  ::tigeropen::push::pb::protobuf_InitDefaults_QuoteDepthData_2eproto();
  ::tigeropen::push::pb::protobuf_InitDefaults_TradeTickData_2eproto();
  ::tigeropen::push::pb::protobuf_InitDefaults_OrderTransactionData_2eproto();
  ::tigeropen::push::pb::protobuf_InitDefaults_StockTopData_2eproto();
  ::tigeropen::push::pb::protobuf_InitDefaults_OptionTopData_2eproto();
  ::tigeropen::push::pb::protobuf_InitDefaults_KlineData_2eproto();
  ::tigeropen::push::pb::protobuf_InitDefaults_TickData_2eproto();
  PushData_default_instance_.DefaultConstruct();
  PushData_default_oneof_instance_ = new PushDataOneofInstance();
  PushData_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_PushData_2eproto_once_);
void protobuf_InitDefaults_PushData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_PushData_2eproto_once_,
                 &protobuf_InitDefaults_PushData_2eproto_impl);
}
void protobuf_AddDesc_PushData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_PushData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016PushData.proto\022\021tigeropen.push.pb\032\022Soc"
    "ketCommon.proto\032\025OrderStatusData.proto\032\022"
    "PositionData.proto\032\017AssetData.proto\032\017Quo"
    "teData.proto\032\024QuoteDepthData.proto\032\023Trad"
    "eTickData.proto\032\032OrderTransactionData.pr"
    "oto\032\022StockTopData.proto\032\023OptionTopData.p"
    "roto\032\017KlineData.proto\032\016TickData.proto\"\305\005"
    "\n\010PushData\022:\n\010dataType\030\001 \001(\0162(.tigeropen"
    ".push.pb.SocketCommon.DataType\0221\n\tquoteD"
    "ata\030\002 \001(\0132\034.tigeropen.push.pb.QuoteDataH"
    "\000\022;\n\016quoteDepthData\030\003 \001(\0132!.tigeropen.pu"
    "sh.pb.QuoteDepthDataH\000\0229\n\rtradeTickData\030"
    "\004 \001(\0132 .tigeropen.push.pb.TradeTickDataH"
    "\000\0227\n\014positionData\030\005 \001(\0132\037.tigeropen.push"
    ".pb.PositionDataH\000\0221\n\tassetData\030\006 \001(\0132\034."
    "tigeropen.push.pb.AssetDataH\000\022=\n\017orderSt"
    "atusData\030\007 \001(\0132\".tigeropen.push.pb.Order"
    "StatusDataH\000\022G\n\024orderTransactionData\030\010 \001"
    "(\0132\'.tigeropen.push.pb.OrderTransactionD"
    "ataH\000\0227\n\014stockTopData\030\t \001(\0132\037.tigeropen."
    "push.pb.StockTopDataH\000\0229\n\roptionTopData\030"
    "\n \001(\0132 .tigeropen.push.pb.OptionTopDataH"
    "\000\0221\n\tklineData\030\013 \001(\0132\034.tigeropen.push.pb"
    ".KlineDataH\000\022/\n\010tickData\030\014 \001(\0132\033.tigerop"
    "en.push.pb.TickDataH\000B\006\n\004bodyP\000P\001P\002P\003P\004P"
    "\005P\006P\007P\010P\tP\nP\013b\006proto3", 1021);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PushData.proto", &protobuf_RegisterTypes);
  ::tigeropen::push::pb::protobuf_AddDesc_SocketCommon_2eproto();
  ::tigeropen::push::pb::protobuf_AddDesc_OrderStatusData_2eproto();
  ::tigeropen::push::pb::protobuf_AddDesc_PositionData_2eproto();
  ::tigeropen::push::pb::protobuf_AddDesc_AssetData_2eproto();
  ::tigeropen::push::pb::protobuf_AddDesc_QuoteData_2eproto();
  ::tigeropen::push::pb::protobuf_AddDesc_QuoteDepthData_2eproto();
  ::tigeropen::push::pb::protobuf_AddDesc_TradeTickData_2eproto();
  ::tigeropen::push::pb::protobuf_AddDesc_OrderTransactionData_2eproto();
  ::tigeropen::push::pb::protobuf_AddDesc_StockTopData_2eproto();
  ::tigeropen::push::pb::protobuf_AddDesc_OptionTopData_2eproto();
  ::tigeropen::push::pb::protobuf_AddDesc_KlineData_2eproto();
  ::tigeropen::push::pb::protobuf_AddDesc_TickData_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PushData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PushData_2eproto_once_);
void protobuf_AddDesc_PushData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PushData_2eproto_once_,
                 &protobuf_AddDesc_PushData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PushData_2eproto {
  StaticDescriptorInitializer_PushData_2eproto() {
    protobuf_AddDesc_PushData_2eproto();
  }
} static_descriptor_initializer_PushData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushData::kDataTypeFieldNumber;
const int PushData::kQuoteDataFieldNumber;
const int PushData::kQuoteDepthDataFieldNumber;
const int PushData::kTradeTickDataFieldNumber;
const int PushData::kPositionDataFieldNumber;
const int PushData::kAssetDataFieldNumber;
const int PushData::kOrderStatusDataFieldNumber;
const int PushData::kOrderTransactionDataFieldNumber;
const int PushData::kStockTopDataFieldNumber;
const int PushData::kOptionTopDataFieldNumber;
const int PushData::kKlineDataFieldNumber;
const int PushData::kTickDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushData::PushData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PushData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.PushData)
}

void PushData::InitAsDefaultInstance() {
  PushData_default_oneof_instance_->quotedata_ = const_cast< ::tigeropen::push::pb::QuoteData*>(
      ::tigeropen::push::pb::QuoteData::internal_default_instance());
  PushData_default_oneof_instance_->quotedepthdata_ = const_cast< ::tigeropen::push::pb::QuoteDepthData*>(
      ::tigeropen::push::pb::QuoteDepthData::internal_default_instance());
  PushData_default_oneof_instance_->tradetickdata_ = const_cast< ::tigeropen::push::pb::TradeTickData*>(
      ::tigeropen::push::pb::TradeTickData::internal_default_instance());
  PushData_default_oneof_instance_->positiondata_ = const_cast< ::tigeropen::push::pb::PositionData*>(
      ::tigeropen::push::pb::PositionData::internal_default_instance());
  PushData_default_oneof_instance_->assetdata_ = const_cast< ::tigeropen::push::pb::AssetData*>(
      ::tigeropen::push::pb::AssetData::internal_default_instance());
  PushData_default_oneof_instance_->orderstatusdata_ = const_cast< ::tigeropen::push::pb::OrderStatusData*>(
      ::tigeropen::push::pb::OrderStatusData::internal_default_instance());
  PushData_default_oneof_instance_->ordertransactiondata_ = const_cast< ::tigeropen::push::pb::OrderTransactionData*>(
      ::tigeropen::push::pb::OrderTransactionData::internal_default_instance());
  PushData_default_oneof_instance_->stocktopdata_ = const_cast< ::tigeropen::push::pb::StockTopData*>(
      ::tigeropen::push::pb::StockTopData::internal_default_instance());
  PushData_default_oneof_instance_->optiontopdata_ = const_cast< ::tigeropen::push::pb::OptionTopData*>(
      ::tigeropen::push::pb::OptionTopData::internal_default_instance());
  PushData_default_oneof_instance_->klinedata_ = const_cast< ::tigeropen::push::pb::KlineData*>(
      ::tigeropen::push::pb::KlineData::internal_default_instance());
  PushData_default_oneof_instance_->tickdata_ = const_cast< ::tigeropen::push::pb::TickData*>(
      ::tigeropen::push::pb::TickData::internal_default_instance());
}

PushData::PushData(const PushData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.PushData)
}

void PushData::SharedCtor() {
  datatype_ = 0;
  clear_has_body();
  _cached_size_ = 0;
}

PushData::~PushData() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.PushData)
  SharedDtor();
}

void PushData::SharedDtor() {
  if (has_body()) {
    clear_body();
  }
}

void PushData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushData_descriptor_;
}

const PushData& PushData::default_instance() {
  protobuf_InitDefaults_PushData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PushData> PushData_default_instance_;

PushData* PushData::New(::google::protobuf::Arena* arena) const {
  PushData* n = new PushData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PushData::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:tigeropen.push.pb.PushData)
  switch (body_case()) {
    case kQuoteData: {
      delete body_.quotedata_;
      break;
    }
    case kQuoteDepthData: {
      delete body_.quotedepthdata_;
      break;
    }
    case kTradeTickData: {
      delete body_.tradetickdata_;
      break;
    }
    case kPositionData: {
      delete body_.positiondata_;
      break;
    }
    case kAssetData: {
      delete body_.assetdata_;
      break;
    }
    case kOrderStatusData: {
      delete body_.orderstatusdata_;
      break;
    }
    case kOrderTransactionData: {
      delete body_.ordertransactiondata_;
      break;
    }
    case kStockTopData: {
      delete body_.stocktopdata_;
      break;
    }
    case kOptionTopData: {
      delete body_.optiontopdata_;
      break;
    }
    case kKlineData: {
      delete body_.klinedata_;
      break;
    }
    case kTickData: {
      delete body_.tickdata_;
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void PushData::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.PushData)
  datatype_ = 0;
  clear_body();
}

bool PushData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.PushData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tigeropen.push.pb.SocketCommon.DataType dataType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_datatype(static_cast< ::tigeropen::push::pb::SocketCommon_DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_quoteData;
        break;
      }

      // optional .tigeropen.push.pb.QuoteData quoteData = 2;
      case 2: {
        if (tag == 18) {
         parse_quoteData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quotedata()));
        } else {
          goto handle_unusual;
        }
        goto after_tickdata;
        break;
      }

      // optional .tigeropen.push.pb.QuoteDepthData quoteDepthData = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quotedepthdata()));
        } else {
          goto handle_unusual;
        }
        goto after_tickdata;
        break;
      }

      // optional .tigeropen.push.pb.TradeTickData tradeTickData = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tradetickdata()));
        } else {
          goto handle_unusual;
        }
        goto after_tickdata;
        break;
      }

      // optional .tigeropen.push.pb.PositionData positionData = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positiondata()));
        } else {
          goto handle_unusual;
        }
        goto after_tickdata;
        break;
      }

      // optional .tigeropen.push.pb.AssetData assetData = 6;
      case 6: {
        if (tag == 50) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assetdata()));
        } else {
          goto handle_unusual;
        }
        goto after_tickdata;
        break;
      }

      // optional .tigeropen.push.pb.OrderStatusData orderStatusData = 7;
      case 7: {
        if (tag == 58) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orderstatusdata()));
        } else {
          goto handle_unusual;
        }
        goto after_tickdata;
        break;
      }

      // optional .tigeropen.push.pb.OrderTransactionData orderTransactionData = 8;
      case 8: {
        if (tag == 66) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ordertransactiondata()));
        } else {
          goto handle_unusual;
        }
        goto after_tickdata;
        break;
      }

      // optional .tigeropen.push.pb.StockTopData stockTopData = 9;
      case 9: {
        if (tag == 74) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stocktopdata()));
        } else {
          goto handle_unusual;
        }
        goto after_tickdata;
        break;
      }

      // optional .tigeropen.push.pb.OptionTopData optionTopData = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optiontopdata()));
        } else {
          goto handle_unusual;
        }
        goto after_tickdata;
        break;
      }

      // optional .tigeropen.push.pb.KlineData klineData = 11;
      case 11: {
        if (tag == 90) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_klinedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_tickData;
        break;
      }

      // optional .tigeropen.push.pb.TickData tickData = 12;
      case 12: {
        if (tag == 98) {
         parse_tickData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tickdata()));
        } else {
          goto handle_unusual;
        }
       after_tickdata:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.PushData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.PushData)
  return false;
#undef DO_
}

void PushData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.PushData)
  // optional .tigeropen.push.pb.SocketCommon.DataType dataType = 1;
  if (this->datatype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->datatype(), output);
  }

  // optional .tigeropen.push.pb.QuoteData quoteData = 2;
  if (has_quotedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *body_.quotedata_, output);
  }

  // optional .tigeropen.push.pb.QuoteDepthData quoteDepthData = 3;
  if (has_quotedepthdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *body_.quotedepthdata_, output);
  }

  // optional .tigeropen.push.pb.TradeTickData tradeTickData = 4;
  if (has_tradetickdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *body_.tradetickdata_, output);
  }

  // optional .tigeropen.push.pb.PositionData positionData = 5;
  if (has_positiondata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *body_.positiondata_, output);
  }

  // optional .tigeropen.push.pb.AssetData assetData = 6;
  if (has_assetdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *body_.assetdata_, output);
  }

  // optional .tigeropen.push.pb.OrderStatusData orderStatusData = 7;
  if (has_orderstatusdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *body_.orderstatusdata_, output);
  }

  // optional .tigeropen.push.pb.OrderTransactionData orderTransactionData = 8;
  if (has_ordertransactiondata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *body_.ordertransactiondata_, output);
  }

  // optional .tigeropen.push.pb.StockTopData stockTopData = 9;
  if (has_stocktopdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *body_.stocktopdata_, output);
  }

  // optional .tigeropen.push.pb.OptionTopData optionTopData = 10;
  if (has_optiontopdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *body_.optiontopdata_, output);
  }

  // optional .tigeropen.push.pb.KlineData klineData = 11;
  if (has_klinedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *body_.klinedata_, output);
  }

  // optional .tigeropen.push.pb.TickData tickData = 12;
  if (has_tickdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *body_.tickdata_, output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.PushData)
}

::google::protobuf::uint8* PushData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.PushData)
  // optional .tigeropen.push.pb.SocketCommon.DataType dataType = 1;
  if (this->datatype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->datatype(), target);
  }

  // optional .tigeropen.push.pb.QuoteData quoteData = 2;
  if (has_quotedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *body_.quotedata_, false, target);
  }

  // optional .tigeropen.push.pb.QuoteDepthData quoteDepthData = 3;
  if (has_quotedepthdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *body_.quotedepthdata_, false, target);
  }

  // optional .tigeropen.push.pb.TradeTickData tradeTickData = 4;
  if (has_tradetickdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *body_.tradetickdata_, false, target);
  }

  // optional .tigeropen.push.pb.PositionData positionData = 5;
  if (has_positiondata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *body_.positiondata_, false, target);
  }

  // optional .tigeropen.push.pb.AssetData assetData = 6;
  if (has_assetdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *body_.assetdata_, false, target);
  }

  // optional .tigeropen.push.pb.OrderStatusData orderStatusData = 7;
  if (has_orderstatusdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *body_.orderstatusdata_, false, target);
  }

  // optional .tigeropen.push.pb.OrderTransactionData orderTransactionData = 8;
  if (has_ordertransactiondata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *body_.ordertransactiondata_, false, target);
  }

  // optional .tigeropen.push.pb.StockTopData stockTopData = 9;
  if (has_stocktopdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *body_.stocktopdata_, false, target);
  }

  // optional .tigeropen.push.pb.OptionTopData optionTopData = 10;
  if (has_optiontopdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *body_.optiontopdata_, false, target);
  }

  // optional .tigeropen.push.pb.KlineData klineData = 11;
  if (has_klinedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *body_.klinedata_, false, target);
  }

  // optional .tigeropen.push.pb.TickData tickData = 12;
  if (has_tickdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *body_.tickdata_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.PushData)
  return target;
}

size_t PushData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.PushData)
  size_t total_size = 0;

  // optional .tigeropen.push.pb.SocketCommon.DataType dataType = 1;
  if (this->datatype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
  }

  switch (body_case()) {
    // optional .tigeropen.push.pb.QuoteData quoteData = 2;
    case kQuoteData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.quotedata_);
      break;
    }
    // optional .tigeropen.push.pb.QuoteDepthData quoteDepthData = 3;
    case kQuoteDepthData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.quotedepthdata_);
      break;
    }
    // optional .tigeropen.push.pb.TradeTickData tradeTickData = 4;
    case kTradeTickData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.tradetickdata_);
      break;
    }
    // optional .tigeropen.push.pb.PositionData positionData = 5;
    case kPositionData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.positiondata_);
      break;
    }
    // optional .tigeropen.push.pb.AssetData assetData = 6;
    case kAssetData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.assetdata_);
      break;
    }
    // optional .tigeropen.push.pb.OrderStatusData orderStatusData = 7;
    case kOrderStatusData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.orderstatusdata_);
      break;
    }
    // optional .tigeropen.push.pb.OrderTransactionData orderTransactionData = 8;
    case kOrderTransactionData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.ordertransactiondata_);
      break;
    }
    // optional .tigeropen.push.pb.StockTopData stockTopData = 9;
    case kStockTopData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.stocktopdata_);
      break;
    }
    // optional .tigeropen.push.pb.OptionTopData optionTopData = 10;
    case kOptionTopData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.optiontopdata_);
      break;
    }
    // optional .tigeropen.push.pb.KlineData klineData = 11;
    case kKlineData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.klinedata_);
      break;
    }
    // optional .tigeropen.push.pb.TickData tickData = 12;
    case kTickData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.tickdata_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.PushData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PushData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PushData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.PushData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.PushData)
    UnsafeMergeFrom(*source);
  }
}

void PushData::MergeFrom(const PushData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.PushData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PushData::UnsafeMergeFrom(const PushData& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.body_case()) {
    case kQuoteData: {
      mutable_quotedata()->::tigeropen::push::pb::QuoteData::MergeFrom(from.quotedata());
      break;
    }
    case kQuoteDepthData: {
      mutable_quotedepthdata()->::tigeropen::push::pb::QuoteDepthData::MergeFrom(from.quotedepthdata());
      break;
    }
    case kTradeTickData: {
      mutable_tradetickdata()->::tigeropen::push::pb::TradeTickData::MergeFrom(from.tradetickdata());
      break;
    }
    case kPositionData: {
      mutable_positiondata()->::tigeropen::push::pb::PositionData::MergeFrom(from.positiondata());
      break;
    }
    case kAssetData: {
      mutable_assetdata()->::tigeropen::push::pb::AssetData::MergeFrom(from.assetdata());
      break;
    }
    case kOrderStatusData: {
      mutable_orderstatusdata()->::tigeropen::push::pb::OrderStatusData::MergeFrom(from.orderstatusdata());
      break;
    }
    case kOrderTransactionData: {
      mutable_ordertransactiondata()->::tigeropen::push::pb::OrderTransactionData::MergeFrom(from.ordertransactiondata());
      break;
    }
    case kStockTopData: {
      mutable_stocktopdata()->::tigeropen::push::pb::StockTopData::MergeFrom(from.stocktopdata());
      break;
    }
    case kOptionTopData: {
      mutable_optiontopdata()->::tigeropen::push::pb::OptionTopData::MergeFrom(from.optiontopdata());
      break;
    }
    case kKlineData: {
      mutable_klinedata()->::tigeropen::push::pb::KlineData::MergeFrom(from.klinedata());
      break;
    }
    case kTickData: {
      mutable_tickdata()->::tigeropen::push::pb::TickData::MergeFrom(from.tickdata());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  if (from.datatype() != 0) {
    set_datatype(from.datatype());
  }
}

void PushData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.PushData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushData::CopyFrom(const PushData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.PushData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PushData::IsInitialized() const {

  return true;
}

void PushData::Swap(PushData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushData::InternalSwap(PushData* other) {
  std::swap(datatype_, other->datatype_);
  std::swap(body_, other->body_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PushData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushData_descriptor_;
  metadata.reflection = PushData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PushData

// optional .tigeropen.push.pb.SocketCommon.DataType dataType = 1;
void PushData::clear_datatype() {
  datatype_ = 0;
}
::tigeropen::push::pb::SocketCommon_DataType PushData::datatype() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.dataType)
  return static_cast< ::tigeropen::push::pb::SocketCommon_DataType >(datatype_);
}
void PushData::set_datatype(::tigeropen::push::pb::SocketCommon_DataType value) {
  
  datatype_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.PushData.dataType)
}

// optional .tigeropen.push.pb.QuoteData quoteData = 2;
bool PushData::has_quotedata() const {
  return body_case() == kQuoteData;
}
void PushData::set_has_quotedata() {
  _oneof_case_[0] = kQuoteData;
}
void PushData::clear_quotedata() {
  if (has_quotedata()) {
    delete body_.quotedata_;
    clear_has_body();
  }
}
 const ::tigeropen::push::pb::QuoteData& PushData::quotedata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.quoteData)
  return has_quotedata()
      ? *body_.quotedata_
      : ::tigeropen::push::pb::QuoteData::default_instance();
}
::tigeropen::push::pb::QuoteData* PushData::mutable_quotedata() {
  if (!has_quotedata()) {
    clear_body();
    set_has_quotedata();
    body_.quotedata_ = new ::tigeropen::push::pb::QuoteData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.quoteData)
  return body_.quotedata_;
}
::tigeropen::push::pb::QuoteData* PushData::release_quotedata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.quoteData)
  if (has_quotedata()) {
    clear_has_body();
    ::tigeropen::push::pb::QuoteData* temp = body_.quotedata_;
    body_.quotedata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PushData::set_allocated_quotedata(::tigeropen::push::pb::QuoteData* quotedata) {
  clear_body();
  if (quotedata) {
    set_has_quotedata();
    body_.quotedata_ = quotedata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.quoteData)
}

// optional .tigeropen.push.pb.QuoteDepthData quoteDepthData = 3;
bool PushData::has_quotedepthdata() const {
  return body_case() == kQuoteDepthData;
}
void PushData::set_has_quotedepthdata() {
  _oneof_case_[0] = kQuoteDepthData;
}
void PushData::clear_quotedepthdata() {
  if (has_quotedepthdata()) {
    delete body_.quotedepthdata_;
    clear_has_body();
  }
}
 const ::tigeropen::push::pb::QuoteDepthData& PushData::quotedepthdata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.quoteDepthData)
  return has_quotedepthdata()
      ? *body_.quotedepthdata_
      : ::tigeropen::push::pb::QuoteDepthData::default_instance();
}
::tigeropen::push::pb::QuoteDepthData* PushData::mutable_quotedepthdata() {
  if (!has_quotedepthdata()) {
    clear_body();
    set_has_quotedepthdata();
    body_.quotedepthdata_ = new ::tigeropen::push::pb::QuoteDepthData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.quoteDepthData)
  return body_.quotedepthdata_;
}
::tigeropen::push::pb::QuoteDepthData* PushData::release_quotedepthdata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.quoteDepthData)
  if (has_quotedepthdata()) {
    clear_has_body();
    ::tigeropen::push::pb::QuoteDepthData* temp = body_.quotedepthdata_;
    body_.quotedepthdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PushData::set_allocated_quotedepthdata(::tigeropen::push::pb::QuoteDepthData* quotedepthdata) {
  clear_body();
  if (quotedepthdata) {
    set_has_quotedepthdata();
    body_.quotedepthdata_ = quotedepthdata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.quoteDepthData)
}

// optional .tigeropen.push.pb.TradeTickData tradeTickData = 4;
bool PushData::has_tradetickdata() const {
  return body_case() == kTradeTickData;
}
void PushData::set_has_tradetickdata() {
  _oneof_case_[0] = kTradeTickData;
}
void PushData::clear_tradetickdata() {
  if (has_tradetickdata()) {
    delete body_.tradetickdata_;
    clear_has_body();
  }
}
 const ::tigeropen::push::pb::TradeTickData& PushData::tradetickdata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.tradeTickData)
  return has_tradetickdata()
      ? *body_.tradetickdata_
      : ::tigeropen::push::pb::TradeTickData::default_instance();
}
::tigeropen::push::pb::TradeTickData* PushData::mutable_tradetickdata() {
  if (!has_tradetickdata()) {
    clear_body();
    set_has_tradetickdata();
    body_.tradetickdata_ = new ::tigeropen::push::pb::TradeTickData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.tradeTickData)
  return body_.tradetickdata_;
}
::tigeropen::push::pb::TradeTickData* PushData::release_tradetickdata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.tradeTickData)
  if (has_tradetickdata()) {
    clear_has_body();
    ::tigeropen::push::pb::TradeTickData* temp = body_.tradetickdata_;
    body_.tradetickdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PushData::set_allocated_tradetickdata(::tigeropen::push::pb::TradeTickData* tradetickdata) {
  clear_body();
  if (tradetickdata) {
    set_has_tradetickdata();
    body_.tradetickdata_ = tradetickdata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.tradeTickData)
}

// optional .tigeropen.push.pb.PositionData positionData = 5;
bool PushData::has_positiondata() const {
  return body_case() == kPositionData;
}
void PushData::set_has_positiondata() {
  _oneof_case_[0] = kPositionData;
}
void PushData::clear_positiondata() {
  if (has_positiondata()) {
    delete body_.positiondata_;
    clear_has_body();
  }
}
 const ::tigeropen::push::pb::PositionData& PushData::positiondata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.positionData)
  return has_positiondata()
      ? *body_.positiondata_
      : ::tigeropen::push::pb::PositionData::default_instance();
}
::tigeropen::push::pb::PositionData* PushData::mutable_positiondata() {
  if (!has_positiondata()) {
    clear_body();
    set_has_positiondata();
    body_.positiondata_ = new ::tigeropen::push::pb::PositionData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.positionData)
  return body_.positiondata_;
}
::tigeropen::push::pb::PositionData* PushData::release_positiondata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.positionData)
  if (has_positiondata()) {
    clear_has_body();
    ::tigeropen::push::pb::PositionData* temp = body_.positiondata_;
    body_.positiondata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PushData::set_allocated_positiondata(::tigeropen::push::pb::PositionData* positiondata) {
  clear_body();
  if (positiondata) {
    set_has_positiondata();
    body_.positiondata_ = positiondata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.positionData)
}

// optional .tigeropen.push.pb.AssetData assetData = 6;
bool PushData::has_assetdata() const {
  return body_case() == kAssetData;
}
void PushData::set_has_assetdata() {
  _oneof_case_[0] = kAssetData;
}
void PushData::clear_assetdata() {
  if (has_assetdata()) {
    delete body_.assetdata_;
    clear_has_body();
  }
}
 const ::tigeropen::push::pb::AssetData& PushData::assetdata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.assetData)
  return has_assetdata()
      ? *body_.assetdata_
      : ::tigeropen::push::pb::AssetData::default_instance();
}
::tigeropen::push::pb::AssetData* PushData::mutable_assetdata() {
  if (!has_assetdata()) {
    clear_body();
    set_has_assetdata();
    body_.assetdata_ = new ::tigeropen::push::pb::AssetData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.assetData)
  return body_.assetdata_;
}
::tigeropen::push::pb::AssetData* PushData::release_assetdata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.assetData)
  if (has_assetdata()) {
    clear_has_body();
    ::tigeropen::push::pb::AssetData* temp = body_.assetdata_;
    body_.assetdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PushData::set_allocated_assetdata(::tigeropen::push::pb::AssetData* assetdata) {
  clear_body();
  if (assetdata) {
    set_has_assetdata();
    body_.assetdata_ = assetdata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.assetData)
}

// optional .tigeropen.push.pb.OrderStatusData orderStatusData = 7;
bool PushData::has_orderstatusdata() const {
  return body_case() == kOrderStatusData;
}
void PushData::set_has_orderstatusdata() {
  _oneof_case_[0] = kOrderStatusData;
}
void PushData::clear_orderstatusdata() {
  if (has_orderstatusdata()) {
    delete body_.orderstatusdata_;
    clear_has_body();
  }
}
 const ::tigeropen::push::pb::OrderStatusData& PushData::orderstatusdata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.orderStatusData)
  return has_orderstatusdata()
      ? *body_.orderstatusdata_
      : ::tigeropen::push::pb::OrderStatusData::default_instance();
}
::tigeropen::push::pb::OrderStatusData* PushData::mutable_orderstatusdata() {
  if (!has_orderstatusdata()) {
    clear_body();
    set_has_orderstatusdata();
    body_.orderstatusdata_ = new ::tigeropen::push::pb::OrderStatusData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.orderStatusData)
  return body_.orderstatusdata_;
}
::tigeropen::push::pb::OrderStatusData* PushData::release_orderstatusdata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.orderStatusData)
  if (has_orderstatusdata()) {
    clear_has_body();
    ::tigeropen::push::pb::OrderStatusData* temp = body_.orderstatusdata_;
    body_.orderstatusdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PushData::set_allocated_orderstatusdata(::tigeropen::push::pb::OrderStatusData* orderstatusdata) {
  clear_body();
  if (orderstatusdata) {
    set_has_orderstatusdata();
    body_.orderstatusdata_ = orderstatusdata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.orderStatusData)
}

// optional .tigeropen.push.pb.OrderTransactionData orderTransactionData = 8;
bool PushData::has_ordertransactiondata() const {
  return body_case() == kOrderTransactionData;
}
void PushData::set_has_ordertransactiondata() {
  _oneof_case_[0] = kOrderTransactionData;
}
void PushData::clear_ordertransactiondata() {
  if (has_ordertransactiondata()) {
    delete body_.ordertransactiondata_;
    clear_has_body();
  }
}
 const ::tigeropen::push::pb::OrderTransactionData& PushData::ordertransactiondata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.orderTransactionData)
  return has_ordertransactiondata()
      ? *body_.ordertransactiondata_
      : ::tigeropen::push::pb::OrderTransactionData::default_instance();
}
::tigeropen::push::pb::OrderTransactionData* PushData::mutable_ordertransactiondata() {
  if (!has_ordertransactiondata()) {
    clear_body();
    set_has_ordertransactiondata();
    body_.ordertransactiondata_ = new ::tigeropen::push::pb::OrderTransactionData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.orderTransactionData)
  return body_.ordertransactiondata_;
}
::tigeropen::push::pb::OrderTransactionData* PushData::release_ordertransactiondata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.orderTransactionData)
  if (has_ordertransactiondata()) {
    clear_has_body();
    ::tigeropen::push::pb::OrderTransactionData* temp = body_.ordertransactiondata_;
    body_.ordertransactiondata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PushData::set_allocated_ordertransactiondata(::tigeropen::push::pb::OrderTransactionData* ordertransactiondata) {
  clear_body();
  if (ordertransactiondata) {
    set_has_ordertransactiondata();
    body_.ordertransactiondata_ = ordertransactiondata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.orderTransactionData)
}

// optional .tigeropen.push.pb.StockTopData stockTopData = 9;
bool PushData::has_stocktopdata() const {
  return body_case() == kStockTopData;
}
void PushData::set_has_stocktopdata() {
  _oneof_case_[0] = kStockTopData;
}
void PushData::clear_stocktopdata() {
  if (has_stocktopdata()) {
    delete body_.stocktopdata_;
    clear_has_body();
  }
}
 const ::tigeropen::push::pb::StockTopData& PushData::stocktopdata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.stockTopData)
  return has_stocktopdata()
      ? *body_.stocktopdata_
      : ::tigeropen::push::pb::StockTopData::default_instance();
}
::tigeropen::push::pb::StockTopData* PushData::mutable_stocktopdata() {
  if (!has_stocktopdata()) {
    clear_body();
    set_has_stocktopdata();
    body_.stocktopdata_ = new ::tigeropen::push::pb::StockTopData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.stockTopData)
  return body_.stocktopdata_;
}
::tigeropen::push::pb::StockTopData* PushData::release_stocktopdata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.stockTopData)
  if (has_stocktopdata()) {
    clear_has_body();
    ::tigeropen::push::pb::StockTopData* temp = body_.stocktopdata_;
    body_.stocktopdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PushData::set_allocated_stocktopdata(::tigeropen::push::pb::StockTopData* stocktopdata) {
  clear_body();
  if (stocktopdata) {
    set_has_stocktopdata();
    body_.stocktopdata_ = stocktopdata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.stockTopData)
}

// optional .tigeropen.push.pb.OptionTopData optionTopData = 10;
bool PushData::has_optiontopdata() const {
  return body_case() == kOptionTopData;
}
void PushData::set_has_optiontopdata() {
  _oneof_case_[0] = kOptionTopData;
}
void PushData::clear_optiontopdata() {
  if (has_optiontopdata()) {
    delete body_.optiontopdata_;
    clear_has_body();
  }
}
 const ::tigeropen::push::pb::OptionTopData& PushData::optiontopdata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.optionTopData)
  return has_optiontopdata()
      ? *body_.optiontopdata_
      : ::tigeropen::push::pb::OptionTopData::default_instance();
}
::tigeropen::push::pb::OptionTopData* PushData::mutable_optiontopdata() {
  if (!has_optiontopdata()) {
    clear_body();
    set_has_optiontopdata();
    body_.optiontopdata_ = new ::tigeropen::push::pb::OptionTopData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.optionTopData)
  return body_.optiontopdata_;
}
::tigeropen::push::pb::OptionTopData* PushData::release_optiontopdata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.optionTopData)
  if (has_optiontopdata()) {
    clear_has_body();
    ::tigeropen::push::pb::OptionTopData* temp = body_.optiontopdata_;
    body_.optiontopdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PushData::set_allocated_optiontopdata(::tigeropen::push::pb::OptionTopData* optiontopdata) {
  clear_body();
  if (optiontopdata) {
    set_has_optiontopdata();
    body_.optiontopdata_ = optiontopdata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.optionTopData)
}

// optional .tigeropen.push.pb.KlineData klineData = 11;
bool PushData::has_klinedata() const {
  return body_case() == kKlineData;
}
void PushData::set_has_klinedata() {
  _oneof_case_[0] = kKlineData;
}
void PushData::clear_klinedata() {
  if (has_klinedata()) {
    delete body_.klinedata_;
    clear_has_body();
  }
}
 const ::tigeropen::push::pb::KlineData& PushData::klinedata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.klineData)
  return has_klinedata()
      ? *body_.klinedata_
      : ::tigeropen::push::pb::KlineData::default_instance();
}
::tigeropen::push::pb::KlineData* PushData::mutable_klinedata() {
  if (!has_klinedata()) {
    clear_body();
    set_has_klinedata();
    body_.klinedata_ = new ::tigeropen::push::pb::KlineData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.klineData)
  return body_.klinedata_;
}
::tigeropen::push::pb::KlineData* PushData::release_klinedata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.klineData)
  if (has_klinedata()) {
    clear_has_body();
    ::tigeropen::push::pb::KlineData* temp = body_.klinedata_;
    body_.klinedata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PushData::set_allocated_klinedata(::tigeropen::push::pb::KlineData* klinedata) {
  clear_body();
  if (klinedata) {
    set_has_klinedata();
    body_.klinedata_ = klinedata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.klineData)
}

// optional .tigeropen.push.pb.TickData tickData = 12;
bool PushData::has_tickdata() const {
  return body_case() == kTickData;
}
void PushData::set_has_tickdata() {
  _oneof_case_[0] = kTickData;
}
void PushData::clear_tickdata() {
  if (has_tickdata()) {
    delete body_.tickdata_;
    clear_has_body();
  }
}
 const ::tigeropen::push::pb::TickData& PushData::tickdata() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.PushData.tickData)
  return has_tickdata()
      ? *body_.tickdata_
      : ::tigeropen::push::pb::TickData::default_instance();
}
::tigeropen::push::pb::TickData* PushData::mutable_tickdata() {
  if (!has_tickdata()) {
    clear_body();
    set_has_tickdata();
    body_.tickdata_ = new ::tigeropen::push::pb::TickData;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.PushData.tickData)
  return body_.tickdata_;
}
::tigeropen::push::pb::TickData* PushData::release_tickdata() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.PushData.tickData)
  if (has_tickdata()) {
    clear_has_body();
    ::tigeropen::push::pb::TickData* temp = body_.tickdata_;
    body_.tickdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PushData::set_allocated_tickdata(::tigeropen::push::pb::TickData* tickdata) {
  clear_body();
  if (tickdata) {
    set_has_tickdata();
    body_.tickdata_ = tickdata;
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.PushData.tickData)
}

bool PushData::has_body() const {
  return body_case() != BODY_NOT_SET;
}
void PushData::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
PushData::BodyCase PushData::body_case() const {
  return PushData::BodyCase(_oneof_case_[0]);
}
inline const PushData* PushData::internal_default_instance() {
  return &PushData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace push
}  // namespace tigeropen

// @@protoc_insertion_point(global_scope)
