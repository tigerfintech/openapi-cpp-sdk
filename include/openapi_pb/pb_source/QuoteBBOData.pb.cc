// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QuoteBBOData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "QuoteBBOData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tigeropen {
namespace push {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* QuoteBBOData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuoteBBOData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_QuoteBBOData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_QuoteBBOData_2eproto() {
  protobuf_AddDesc_QuoteBBOData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "QuoteBBOData.proto");
  GOOGLE_CHECK(file != NULL);
  QuoteBBOData_descriptor_ = file->message_type(0);
  static const int QuoteBBOData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBBOData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBBOData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBBOData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBBOData, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBBOData, asksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBBOData, asktimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBBOData, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBBOData, bidsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBBOData, bidtimestamp_),
  };
  QuoteBBOData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuoteBBOData_descriptor_,
      QuoteBBOData::internal_default_instance(),
      QuoteBBOData_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuoteBBOData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBBOData, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_QuoteBBOData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuoteBBOData_descriptor_, QuoteBBOData::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_QuoteBBOData_2eproto() {
  QuoteBBOData_default_instance_.Shutdown();
  delete QuoteBBOData_reflection_;
}

void protobuf_InitDefaults_QuoteBBOData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tigeropen::push::pb::protobuf_InitDefaults_SocketCommon_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  QuoteBBOData_default_instance_.DefaultConstruct();
  QuoteBBOData_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_QuoteBBOData_2eproto_once_);
void protobuf_InitDefaults_QuoteBBOData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_QuoteBBOData_2eproto_once_,
                 &protobuf_InitDefaults_QuoteBBOData_2eproto_impl);
}
void protobuf_AddDesc_QuoteBBOData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_QuoteBBOData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022QuoteBBOData.proto\022\021tigeropen.push.pb\032"
    "\022SocketCommon.proto\"\334\001\n\014QuoteBBOData\022\016\n\006"
    "symbol\030\001 \001(\t\0227\n\004type\030\002 \001(\0162).tigeropen.p"
    "ush.pb.SocketCommon.QuoteType\022\021\n\ttimesta"
    "mp\030\003 \001(\004\022\020\n\010askPrice\030\021 \001(\001\022\017\n\007askSize\030\022 "
    "\001(\022\022\024\n\014askTimestamp\030\023 \001(\004\022\020\n\010bidPrice\030\024 "
    "\001(\001\022\017\n\007bidSize\030\025 \001(\022\022\024\n\014bidTimestamp\030\026 \001"
    "(\004P\000b\006proto3", 292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "QuoteBBOData.proto", &protobuf_RegisterTypes);
  ::tigeropen::push::pb::protobuf_AddDesc_SocketCommon_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_QuoteBBOData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_QuoteBBOData_2eproto_once_);
void protobuf_AddDesc_QuoteBBOData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_QuoteBBOData_2eproto_once_,
                 &protobuf_AddDesc_QuoteBBOData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_QuoteBBOData_2eproto {
  StaticDescriptorInitializer_QuoteBBOData_2eproto() {
    protobuf_AddDesc_QuoteBBOData_2eproto();
  }
} static_descriptor_initializer_QuoteBBOData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuoteBBOData::kSymbolFieldNumber;
const int QuoteBBOData::kTypeFieldNumber;
const int QuoteBBOData::kTimestampFieldNumber;
const int QuoteBBOData::kAskPriceFieldNumber;
const int QuoteBBOData::kAskSizeFieldNumber;
const int QuoteBBOData::kAskTimestampFieldNumber;
const int QuoteBBOData::kBidPriceFieldNumber;
const int QuoteBBOData::kBidSizeFieldNumber;
const int QuoteBBOData::kBidTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuoteBBOData::QuoteBBOData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_QuoteBBOData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.QuoteBBOData)
}

void QuoteBBOData::InitAsDefaultInstance() {
}

QuoteBBOData::QuoteBBOData(const QuoteBBOData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.QuoteBBOData)
}

void QuoteBBOData::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(type_));
  _cached_size_ = 0;
}

QuoteBBOData::~QuoteBBOData() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.QuoteBBOData)
  SharedDtor();
}

void QuoteBBOData::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QuoteBBOData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuoteBBOData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuoteBBOData_descriptor_;
}

const QuoteBBOData& QuoteBBOData::default_instance() {
  protobuf_InitDefaults_QuoteBBOData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QuoteBBOData> QuoteBBOData_default_instance_;

QuoteBBOData* QuoteBBOData::New(::google::protobuf::Arena* arena) const {
  QuoteBBOData* n = new QuoteBBOData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuoteBBOData::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.QuoteBBOData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QuoteBBOData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QuoteBBOData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_, bidsize_);
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  bidtimestamp_ = GOOGLE_ULONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

}

bool QuoteBBOData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.QuoteBBOData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.QuoteBBOData.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::tigeropen::push::pb::SocketCommon_QuoteType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_askPrice;
        break;
      }

      // optional double askPrice = 17;
      case 17: {
        if (tag == 137) {
         parse_askPrice:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_askSize;
        break;
      }

      // optional sint64 askSize = 18;
      case 18: {
        if (tag == 144) {
         parse_askSize:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &asksize_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_askTimestamp;
        break;
      }

      // optional uint64 askTimestamp = 19;
      case 19: {
        if (tag == 152) {
         parse_askTimestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &asktimestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_bidPrice;
        break;
      }

      // optional double bidPrice = 20;
      case 20: {
        if (tag == 161) {
         parse_bidPrice:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_bidSize;
        break;
      }

      // optional sint64 bidSize = 21;
      case 21: {
        if (tag == 168) {
         parse_bidSize:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &bidsize_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_bidTimestamp;
        break;
      }

      // optional uint64 bidTimestamp = 22;
      case 22: {
        if (tag == 176) {
         parse_bidTimestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bidtimestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.QuoteBBOData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.QuoteBBOData)
  return false;
#undef DO_
}

void QuoteBBOData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.QuoteBBOData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteBBOData.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // optional double askPrice = 17;
  if (this->askprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->askprice(), output);
  }

  // optional sint64 askSize = 18;
  if (this->asksize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(18, this->asksize(), output);
  }

  // optional uint64 askTimestamp = 19;
  if (this->asktimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->asktimestamp(), output);
  }

  // optional double bidPrice = 20;
  if (this->bidprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->bidprice(), output);
  }

  // optional sint64 bidSize = 21;
  if (this->bidsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(21, this->bidsize(), output);
  }

  // optional uint64 bidTimestamp = 22;
  if (this->bidtimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->bidtimestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.QuoteBBOData)
}

::google::protobuf::uint8* QuoteBBOData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.QuoteBBOData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteBBOData.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // optional double askPrice = 17;
  if (this->askprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->askprice(), target);
  }

  // optional sint64 askSize = 18;
  if (this->asksize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(18, this->asksize(), target);
  }

  // optional uint64 askTimestamp = 19;
  if (this->asktimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->asktimestamp(), target);
  }

  // optional double bidPrice = 20;
  if (this->bidprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->bidprice(), target);
  }

  // optional sint64 bidSize = 21;
  if (this->bidsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(21, this->bidsize(), target);
  }

  // optional uint64 bidTimestamp = 22;
  if (this->bidtimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->bidtimestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.QuoteBBOData)
  return target;
}

size_t QuoteBBOData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.QuoteBBOData)
  size_t total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // optional double askPrice = 17;
  if (this->askprice() != 0) {
    total_size += 2 + 8;
  }

  // optional sint64 askSize = 18;
  if (this->asksize() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->asksize());
  }

  // optional uint64 askTimestamp = 19;
  if (this->asktimestamp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->asktimestamp());
  }

  // optional double bidPrice = 20;
  if (this->bidprice() != 0) {
    total_size += 2 + 8;
  }

  // optional sint64 bidSize = 21;
  if (this->bidsize() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->bidsize());
  }

  // optional uint64 bidTimestamp = 22;
  if (this->bidtimestamp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bidtimestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuoteBBOData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.QuoteBBOData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuoteBBOData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuoteBBOData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.QuoteBBOData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.QuoteBBOData)
    UnsafeMergeFrom(*source);
  }
}

void QuoteBBOData::MergeFrom(const QuoteBBOData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.QuoteBBOData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QuoteBBOData::UnsafeMergeFrom(const QuoteBBOData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.askprice() != 0) {
    set_askprice(from.askprice());
  }
  if (from.asksize() != 0) {
    set_asksize(from.asksize());
  }
  if (from.asktimestamp() != 0) {
    set_asktimestamp(from.asktimestamp());
  }
  if (from.bidprice() != 0) {
    set_bidprice(from.bidprice());
  }
  if (from.bidsize() != 0) {
    set_bidsize(from.bidsize());
  }
  if (from.bidtimestamp() != 0) {
    set_bidtimestamp(from.bidtimestamp());
  }
}

void QuoteBBOData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.QuoteBBOData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuoteBBOData::CopyFrom(const QuoteBBOData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.QuoteBBOData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QuoteBBOData::IsInitialized() const {

  return true;
}

void QuoteBBOData::Swap(QuoteBBOData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuoteBBOData::InternalSwap(QuoteBBOData* other) {
  symbol_.Swap(&other->symbol_);
  std::swap(type_, other->type_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(askprice_, other->askprice_);
  std::swap(asksize_, other->asksize_);
  std::swap(asktimestamp_, other->asktimestamp_);
  std::swap(bidprice_, other->bidprice_);
  std::swap(bidsize_, other->bidsize_);
  std::swap(bidtimestamp_, other->bidtimestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuoteBBOData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuoteBBOData_descriptor_;
  metadata.reflection = QuoteBBOData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuoteBBOData

// optional string symbol = 1;
void QuoteBBOData::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuoteBBOData::symbol() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBBOData.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteBBOData::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBBOData.symbol)
}
void QuoteBBOData::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteBBOData.symbol)
}
void QuoteBBOData::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteBBOData.symbol)
}
::std::string* QuoteBBOData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteBBOData.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuoteBBOData::release_symbol() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteBBOData.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteBBOData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteBBOData.symbol)
}

// optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
void QuoteBBOData::clear_type() {
  type_ = 0;
}
::tigeropen::push::pb::SocketCommon_QuoteType QuoteBBOData::type() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBBOData.type)
  return static_cast< ::tigeropen::push::pb::SocketCommon_QuoteType >(type_);
}
void QuoteBBOData::set_type(::tigeropen::push::pb::SocketCommon_QuoteType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBBOData.type)
}

// optional uint64 timestamp = 3;
void QuoteBBOData::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 QuoteBBOData::timestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBBOData.timestamp)
  return timestamp_;
}
void QuoteBBOData::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBBOData.timestamp)
}

// optional double askPrice = 17;
void QuoteBBOData::clear_askprice() {
  askprice_ = 0;
}
double QuoteBBOData::askprice() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBBOData.askPrice)
  return askprice_;
}
void QuoteBBOData::set_askprice(double value) {
  
  askprice_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBBOData.askPrice)
}

// optional sint64 askSize = 18;
void QuoteBBOData::clear_asksize() {
  asksize_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QuoteBBOData::asksize() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBBOData.askSize)
  return asksize_;
}
void QuoteBBOData::set_asksize(::google::protobuf::int64 value) {
  
  asksize_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBBOData.askSize)
}

// optional uint64 askTimestamp = 19;
void QuoteBBOData::clear_asktimestamp() {
  asktimestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 QuoteBBOData::asktimestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBBOData.askTimestamp)
  return asktimestamp_;
}
void QuoteBBOData::set_asktimestamp(::google::protobuf::uint64 value) {
  
  asktimestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBBOData.askTimestamp)
}

// optional double bidPrice = 20;
void QuoteBBOData::clear_bidprice() {
  bidprice_ = 0;
}
double QuoteBBOData::bidprice() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBBOData.bidPrice)
  return bidprice_;
}
void QuoteBBOData::set_bidprice(double value) {
  
  bidprice_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBBOData.bidPrice)
}

// optional sint64 bidSize = 21;
void QuoteBBOData::clear_bidsize() {
  bidsize_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QuoteBBOData::bidsize() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBBOData.bidSize)
  return bidsize_;
}
void QuoteBBOData::set_bidsize(::google::protobuf::int64 value) {
  
  bidsize_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBBOData.bidSize)
}

// optional uint64 bidTimestamp = 22;
void QuoteBBOData::clear_bidtimestamp() {
  bidtimestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 QuoteBBOData::bidtimestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBBOData.bidTimestamp)
  return bidtimestamp_;
}
void QuoteBBOData::set_bidtimestamp(::google::protobuf::uint64 value) {
  
  bidtimestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBBOData.bidTimestamp)
}

inline const QuoteBBOData* QuoteBBOData::internal_default_instance() {
  return &QuoteBBOData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace push
}  // namespace tigeropen

// @@protoc_insertion_point(global_scope)
