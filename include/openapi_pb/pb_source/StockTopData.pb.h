// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StockTopData.proto

#ifndef PROTOBUF_StockTopData_2eproto__INCLUDED
#define PROTOBUF_StockTopData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tigeropen {
namespace push {
namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_StockTopData_2eproto();
void protobuf_InitDefaults_StockTopData_2eproto();
void protobuf_AssignDesc_StockTopData_2eproto();
void protobuf_ShutdownFile_StockTopData_2eproto();

class StockTopData;
class StockTopData_StockItem;
class StockTopData_TopData;

// ===================================================================

class StockTopData_TopData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tigeropen.push.pb.StockTopData.TopData) */ {
 public:
  StockTopData_TopData();
  virtual ~StockTopData_TopData();

  StockTopData_TopData(const StockTopData_TopData& from);

  inline StockTopData_TopData& operator=(const StockTopData_TopData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockTopData_TopData& default_instance();

  static const StockTopData_TopData* internal_default_instance();

  void Swap(StockTopData_TopData* other);

  // implements Message ----------------------------------------------

  inline StockTopData_TopData* New() const { return New(NULL); }

  StockTopData_TopData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockTopData_TopData& from);
  void MergeFrom(const StockTopData_TopData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockTopData_TopData* other);
  void UnsafeMergeFrom(const StockTopData_TopData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string targetName = 1;
  void clear_targetname();
  static const int kTargetNameFieldNumber = 1;
  const ::std::string& targetname() const;
  void set_targetname(const ::std::string& value);
  void set_targetname(const char* value);
  void set_targetname(const char* value, size_t size);
  ::std::string* mutable_targetname();
  ::std::string* release_targetname();
  void set_allocated_targetname(::std::string* targetname);

  // repeated .tigeropen.push.pb.StockTopData.StockItem item = 2;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 2;
  const ::tigeropen::push::pb::StockTopData_StockItem& item(int index) const;
  ::tigeropen::push::pb::StockTopData_StockItem* mutable_item(int index);
  ::tigeropen::push::pb::StockTopData_StockItem* add_item();
  ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::StockTopData_StockItem >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::StockTopData_StockItem >&
      item() const;

  // @@protoc_insertion_point(class_scope:tigeropen.push.pb.StockTopData.TopData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::StockTopData_StockItem > item_;
  ::google::protobuf::internal::ArenaStringPtr targetname_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_StockTopData_2eproto_impl();
  friend void  protobuf_AddDesc_StockTopData_2eproto_impl();
  friend void protobuf_AssignDesc_StockTopData_2eproto();
  friend void protobuf_ShutdownFile_StockTopData_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<StockTopData_TopData> StockTopData_TopData_default_instance_;

// -------------------------------------------------------------------

class StockTopData_StockItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tigeropen.push.pb.StockTopData.StockItem) */ {
 public:
  StockTopData_StockItem();
  virtual ~StockTopData_StockItem();

  StockTopData_StockItem(const StockTopData_StockItem& from);

  inline StockTopData_StockItem& operator=(const StockTopData_StockItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockTopData_StockItem& default_instance();

  static const StockTopData_StockItem* internal_default_instance();

  void Swap(StockTopData_StockItem* other);

  // implements Message ----------------------------------------------

  inline StockTopData_StockItem* New() const { return New(NULL); }

  StockTopData_StockItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockTopData_StockItem& from);
  void MergeFrom(const StockTopData_StockItem& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockTopData_StockItem* other);
  void UnsafeMergeFrom(const StockTopData_StockItem& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional double latestPrice = 2;
  void clear_latestprice();
  static const int kLatestPriceFieldNumber = 2;
  double latestprice() const;
  void set_latestprice(double value);

  // optional double targetValue = 3;
  void clear_targetvalue();
  static const int kTargetValueFieldNumber = 3;
  double targetvalue() const;
  void set_targetvalue(double value);

  // @@protoc_insertion_point(class_scope:tigeropen.push.pb.StockTopData.StockItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  double latestprice_;
  double targetvalue_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_StockTopData_2eproto_impl();
  friend void  protobuf_AddDesc_StockTopData_2eproto_impl();
  friend void protobuf_AssignDesc_StockTopData_2eproto();
  friend void protobuf_ShutdownFile_StockTopData_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<StockTopData_StockItem> StockTopData_StockItem_default_instance_;

// -------------------------------------------------------------------

class StockTopData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tigeropen.push.pb.StockTopData) */ {
 public:
  StockTopData();
  virtual ~StockTopData();

  StockTopData(const StockTopData& from);

  inline StockTopData& operator=(const StockTopData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockTopData& default_instance();

  static const StockTopData* internal_default_instance();

  void Swap(StockTopData* other);

  // implements Message ----------------------------------------------

  inline StockTopData* New() const { return New(NULL); }

  StockTopData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockTopData& from);
  void MergeFrom(const StockTopData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockTopData* other);
  void UnsafeMergeFrom(const StockTopData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StockTopData_TopData TopData;
  typedef StockTopData_StockItem StockItem;

  // accessors -------------------------------------------------------

  // optional string market = 1;
  void clear_market();
  static const int kMarketFieldNumber = 1;
  const ::std::string& market() const;
  void set_market(const ::std::string& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  ::std::string* mutable_market();
  ::std::string* release_market();
  void set_allocated_market(::std::string* market);

  // optional int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // repeated .tigeropen.push.pb.StockTopData.TopData topData = 3;
  int topdata_size() const;
  void clear_topdata();
  static const int kTopDataFieldNumber = 3;
  const ::tigeropen::push::pb::StockTopData_TopData& topdata(int index) const;
  ::tigeropen::push::pb::StockTopData_TopData* mutable_topdata(int index);
  ::tigeropen::push::pb::StockTopData_TopData* add_topdata();
  ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::StockTopData_TopData >*
      mutable_topdata();
  const ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::StockTopData_TopData >&
      topdata() const;

  // @@protoc_insertion_point(class_scope:tigeropen.push.pb.StockTopData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::StockTopData_TopData > topdata_;
  ::google::protobuf::internal::ArenaStringPtr market_;
  ::google::protobuf::int64 timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_StockTopData_2eproto_impl();
  friend void  protobuf_AddDesc_StockTopData_2eproto_impl();
  friend void protobuf_AssignDesc_StockTopData_2eproto();
  friend void protobuf_ShutdownFile_StockTopData_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<StockTopData> StockTopData_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// StockTopData_TopData

// optional string targetName = 1;
inline void StockTopData_TopData::clear_targetname() {
  targetname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StockTopData_TopData::targetname() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.StockTopData.TopData.targetName)
  return targetname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockTopData_TopData::set_targetname(const ::std::string& value) {
  
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.StockTopData.TopData.targetName)
}
inline void StockTopData_TopData::set_targetname(const char* value) {
  
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.StockTopData.TopData.targetName)
}
inline void StockTopData_TopData::set_targetname(const char* value, size_t size) {
  
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.StockTopData.TopData.targetName)
}
inline ::std::string* StockTopData_TopData::mutable_targetname() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.StockTopData.TopData.targetName)
  return targetname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockTopData_TopData::release_targetname() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.StockTopData.TopData.targetName)
  
  return targetname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockTopData_TopData::set_allocated_targetname(::std::string* targetname) {
  if (targetname != NULL) {
    
  } else {
    
  }
  targetname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetname);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.StockTopData.TopData.targetName)
}

// repeated .tigeropen.push.pb.StockTopData.StockItem item = 2;
inline int StockTopData_TopData::item_size() const {
  return item_.size();
}
inline void StockTopData_TopData::clear_item() {
  item_.Clear();
}
inline const ::tigeropen::push::pb::StockTopData_StockItem& StockTopData_TopData::item(int index) const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.StockTopData.TopData.item)
  return item_.Get(index);
}
inline ::tigeropen::push::pb::StockTopData_StockItem* StockTopData_TopData::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.StockTopData.TopData.item)
  return item_.Mutable(index);
}
inline ::tigeropen::push::pb::StockTopData_StockItem* StockTopData_TopData::add_item() {
  // @@protoc_insertion_point(field_add:tigeropen.push.pb.StockTopData.TopData.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::StockTopData_StockItem >*
StockTopData_TopData::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:tigeropen.push.pb.StockTopData.TopData.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::StockTopData_StockItem >&
StockTopData_TopData::item() const {
  // @@protoc_insertion_point(field_list:tigeropen.push.pb.StockTopData.TopData.item)
  return item_;
}

inline const StockTopData_TopData* StockTopData_TopData::internal_default_instance() {
  return &StockTopData_TopData_default_instance_.get();
}
// -------------------------------------------------------------------

// StockTopData_StockItem

// optional string symbol = 1;
inline void StockTopData_StockItem::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StockTopData_StockItem::symbol() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.StockTopData.StockItem.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockTopData_StockItem::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.StockTopData.StockItem.symbol)
}
inline void StockTopData_StockItem::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.StockTopData.StockItem.symbol)
}
inline void StockTopData_StockItem::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.StockTopData.StockItem.symbol)
}
inline ::std::string* StockTopData_StockItem::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.StockTopData.StockItem.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockTopData_StockItem::release_symbol() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.StockTopData.StockItem.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockTopData_StockItem::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.StockTopData.StockItem.symbol)
}

// optional double latestPrice = 2;
inline void StockTopData_StockItem::clear_latestprice() {
  latestprice_ = 0;
}
inline double StockTopData_StockItem::latestprice() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.StockTopData.StockItem.latestPrice)
  return latestprice_;
}
inline void StockTopData_StockItem::set_latestprice(double value) {
  
  latestprice_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.StockTopData.StockItem.latestPrice)
}

// optional double targetValue = 3;
inline void StockTopData_StockItem::clear_targetvalue() {
  targetvalue_ = 0;
}
inline double StockTopData_StockItem::targetvalue() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.StockTopData.StockItem.targetValue)
  return targetvalue_;
}
inline void StockTopData_StockItem::set_targetvalue(double value) {
  
  targetvalue_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.StockTopData.StockItem.targetValue)
}

inline const StockTopData_StockItem* StockTopData_StockItem::internal_default_instance() {
  return &StockTopData_StockItem_default_instance_.get();
}
// -------------------------------------------------------------------

// StockTopData

// optional string market = 1;
inline void StockTopData::clear_market() {
  market_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StockTopData::market() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.StockTopData.market)
  return market_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockTopData::set_market(const ::std::string& value) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.StockTopData.market)
}
inline void StockTopData::set_market(const char* value) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.StockTopData.market)
}
inline void StockTopData::set_market(const char* value, size_t size) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.StockTopData.market)
}
inline ::std::string* StockTopData::mutable_market() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.StockTopData.market)
  return market_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockTopData::release_market() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.StockTopData.market)
  
  return market_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockTopData::set_allocated_market(::std::string* market) {
  if (market != NULL) {
    
  } else {
    
  }
  market_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.StockTopData.market)
}

// optional int64 timestamp = 2;
inline void StockTopData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 StockTopData::timestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.StockTopData.timestamp)
  return timestamp_;
}
inline void StockTopData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.StockTopData.timestamp)
}

// repeated .tigeropen.push.pb.StockTopData.TopData topData = 3;
inline int StockTopData::topdata_size() const {
  return topdata_.size();
}
inline void StockTopData::clear_topdata() {
  topdata_.Clear();
}
inline const ::tigeropen::push::pb::StockTopData_TopData& StockTopData::topdata(int index) const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.StockTopData.topData)
  return topdata_.Get(index);
}
inline ::tigeropen::push::pb::StockTopData_TopData* StockTopData::mutable_topdata(int index) {
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.StockTopData.topData)
  return topdata_.Mutable(index);
}
inline ::tigeropen::push::pb::StockTopData_TopData* StockTopData::add_topdata() {
  // @@protoc_insertion_point(field_add:tigeropen.push.pb.StockTopData.topData)
  return topdata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::StockTopData_TopData >*
StockTopData::mutable_topdata() {
  // @@protoc_insertion_point(field_mutable_list:tigeropen.push.pb.StockTopData.topData)
  return &topdata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tigeropen::push::pb::StockTopData_TopData >&
StockTopData::topdata() const {
  // @@protoc_insertion_point(field_list:tigeropen.push.pb.StockTopData.topData)
  return topdata_;
}

inline const StockTopData* StockTopData::internal_default_instance() {
  return &StockTopData_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace push
}  // namespace tigeropen

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_StockTopData_2eproto__INCLUDED
