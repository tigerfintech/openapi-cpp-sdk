// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QuoteBasicData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "QuoteBasicData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tigeropen {
namespace push {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* QuoteBasicData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuoteBasicData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_QuoteBasicData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_QuoteBasicData_2eproto() {
  protobuf_AddDesc_QuoteBasicData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "QuoteBasicData.proto");
  GOOGLE_CHECK(file != NULL);
  QuoteBasicData_descriptor_ = file->message_type(0);
  static const int QuoteBasicData_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, servertimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, avgprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, latestprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, latestpricetimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, latesttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, preclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, hourtradingtag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, marketstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, openint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, tradetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, presettlement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, mintick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, mi_),
  };
  QuoteBasicData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuoteBasicData_descriptor_,
      QuoteBasicData::internal_default_instance(),
      QuoteBasicData_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuoteBasicData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBasicData, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_QuoteBasicData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuoteBasicData_descriptor_, QuoteBasicData::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_QuoteBasicData_2eproto() {
  QuoteBasicData_default_instance_.Shutdown();
  delete QuoteBasicData_reflection_;
}

void protobuf_InitDefaults_QuoteBasicData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tigeropen::push::pb::protobuf_InitDefaults_SocketCommon_2eproto();
  ::tigeropen::push::pb::protobuf_InitDefaults_QuoteData_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  QuoteBasicData_default_instance_.DefaultConstruct();
  QuoteBasicData_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_QuoteBasicData_2eproto_once_);
void protobuf_InitDefaults_QuoteBasicData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_QuoteBasicData_2eproto_once_,
                 &protobuf_InitDefaults_QuoteBasicData_2eproto_impl);
}
void protobuf_AddDesc_QuoteBasicData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_QuoteBasicData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024QuoteBasicData.proto\022\021tigeropen.push.p"
    "b\032\022SocketCommon.proto\032\017QuoteData.proto\"\370"
    "\003\n\016QuoteBasicData\022\016\n\006symbol\030\001 \001(\t\0227\n\004typ"
    "e\030\002 \001(\0162).tigeropen.push.pb.SocketCommon"
    ".QuoteType\022\021\n\ttimestamp\030\003 \001(\004\022\027\n\017serverT"
    "imestamp\030\004 \001(\004\022\020\n\010avgPrice\030\005 \001(\001\022\023\n\013late"
    "stPrice\030\006 \001(\001\022\034\n\024latestPriceTimestamp\030\007 "
    "\001(\004\022\022\n\nlatestTime\030\010 \001(\t\022\020\n\010preClose\030\t \001("
    "\001\022\016\n\006volume\030\n \001(\022\022\016\n\006amount\030\013 \001(\001\022\014\n\004ope"
    "n\030\014 \001(\001\022\014\n\004high\030\r \001(\001\022\013\n\003low\030\016 \001(\001\022\026\n\016ho"
    "urTradingTag\030\017 \001(\t\022\024\n\014marketStatus\030\020 \001(\t"
    "\022\022\n\nidentifier\030\027 \001(\t\022\017\n\007openInt\030\030 \001(\022\022\021\n"
    "\ttradeTime\030\031 \001(\004\022\025\n\rpreSettlement\030\032 \001(\001\022"
    "\017\n\007minTick\030\033 \001(\002\022/\n\002mi\030\034 \001(\0132#.tigeropen"
    ".push.pb.QuoteData.MinuteP\000P\001b\006proto3", 597);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "QuoteBasicData.proto", &protobuf_RegisterTypes);
  ::tigeropen::push::pb::protobuf_AddDesc_SocketCommon_2eproto();
  ::tigeropen::push::pb::protobuf_AddDesc_QuoteData_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_QuoteBasicData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_QuoteBasicData_2eproto_once_);
void protobuf_AddDesc_QuoteBasicData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_QuoteBasicData_2eproto_once_,
                 &protobuf_AddDesc_QuoteBasicData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_QuoteBasicData_2eproto {
  StaticDescriptorInitializer_QuoteBasicData_2eproto() {
    protobuf_AddDesc_QuoteBasicData_2eproto();
  }
} static_descriptor_initializer_QuoteBasicData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuoteBasicData::kSymbolFieldNumber;
const int QuoteBasicData::kTypeFieldNumber;
const int QuoteBasicData::kTimestampFieldNumber;
const int QuoteBasicData::kServerTimestampFieldNumber;
const int QuoteBasicData::kAvgPriceFieldNumber;
const int QuoteBasicData::kLatestPriceFieldNumber;
const int QuoteBasicData::kLatestPriceTimestampFieldNumber;
const int QuoteBasicData::kLatestTimeFieldNumber;
const int QuoteBasicData::kPreCloseFieldNumber;
const int QuoteBasicData::kVolumeFieldNumber;
const int QuoteBasicData::kAmountFieldNumber;
const int QuoteBasicData::kOpenFieldNumber;
const int QuoteBasicData::kHighFieldNumber;
const int QuoteBasicData::kLowFieldNumber;
const int QuoteBasicData::kHourTradingTagFieldNumber;
const int QuoteBasicData::kMarketStatusFieldNumber;
const int QuoteBasicData::kIdentifierFieldNumber;
const int QuoteBasicData::kOpenIntFieldNumber;
const int QuoteBasicData::kTradeTimeFieldNumber;
const int QuoteBasicData::kPreSettlementFieldNumber;
const int QuoteBasicData::kMinTickFieldNumber;
const int QuoteBasicData::kMiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuoteBasicData::QuoteBasicData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_QuoteBasicData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tigeropen.push.pb.QuoteBasicData)
}

void QuoteBasicData::InitAsDefaultInstance() {
  mi_ = const_cast< ::tigeropen::push::pb::QuoteData_Minute*>(
      ::tigeropen::push::pb::QuoteData_Minute::internal_default_instance());
}

QuoteBasicData::QuoteBasicData(const QuoteBasicData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tigeropen.push.pb.QuoteBasicData)
}

void QuoteBasicData::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latesttime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hourtradingtag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketstatus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mi_ = NULL;
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&presettlement_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(presettlement_));
  _cached_size_ = 0;
}

QuoteBasicData::~QuoteBasicData() {
  // @@protoc_insertion_point(destructor:tigeropen.push.pb.QuoteBasicData)
  SharedDtor();
}

void QuoteBasicData::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latesttime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hourtradingtag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketstatus_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &QuoteBasicData_default_instance_.get()) {
    delete mi_;
  }
}

void QuoteBasicData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuoteBasicData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuoteBasicData_descriptor_;
}

const QuoteBasicData& QuoteBasicData::default_instance() {
  protobuf_InitDefaults_QuoteBasicData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QuoteBasicData> QuoteBasicData_default_instance_;

QuoteBasicData* QuoteBasicData::New(::google::protobuf::Arena* arena) const {
  QuoteBasicData* n = new QuoteBasicData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuoteBasicData::Clear() {
// @@protoc_insertion_point(message_clear_start:tigeropen.push.pb.QuoteBasicData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QuoteBasicData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QuoteBasicData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_, latestpricetimestamp_);
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  latesttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(preclose_, amount_);
  ZR_(open_, low_);
  hourtradingtag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(openint_, presettlement_);
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mintick_ = 0;
  if (GetArenaNoVirtual() == NULL && mi_ != NULL) delete mi_;
  mi_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool QuoteBasicData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tigeropen.push.pb.QuoteBasicData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.QuoteBasicData.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::tigeropen::push::pb::SocketCommon_QuoteType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_serverTimestamp;
        break;
      }

      // optional uint64 serverTimestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_serverTimestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &servertimestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_avgPrice;
        break;
      }

      // optional double avgPrice = 5;
      case 5: {
        if (tag == 41) {
         parse_avgPrice:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avgprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_latestPrice;
        break;
      }

      // optional double latestPrice = 6;
      case 6: {
        if (tag == 49) {
         parse_latestPrice:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latestprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_latestPriceTimestamp;
        break;
      }

      // optional uint64 latestPriceTimestamp = 7;
      case 7: {
        if (tag == 56) {
         parse_latestPriceTimestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &latestpricetimestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_latestTime;
        break;
      }

      // optional string latestTime = 8;
      case 8: {
        if (tag == 66) {
         parse_latestTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latesttime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->latesttime().data(), this->latesttime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.QuoteBasicData.latestTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_preClose;
        break;
      }

      // optional double preClose = 9;
      case 9: {
        if (tag == 73) {
         parse_preClose:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preclose_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_volume;
        break;
      }

      // optional sint64 volume = 10;
      case 10: {
        if (tag == 80) {
         parse_volume:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_amount;
        break;
      }

      // optional double amount = 11;
      case 11: {
        if (tag == 89) {
         parse_amount:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_open;
        break;
      }

      // optional double open = 12;
      case 12: {
        if (tag == 97) {
         parse_open:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_high;
        break;
      }

      // optional double high = 13;
      case 13: {
        if (tag == 105) {
         parse_high:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_low;
        break;
      }

      // optional double low = 14;
      case 14: {
        if (tag == 113) {
         parse_low:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_hourTradingTag;
        break;
      }

      // optional string hourTradingTag = 15;
      case 15: {
        if (tag == 122) {
         parse_hourTradingTag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hourtradingtag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hourtradingtag().data(), this->hourtradingtag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.QuoteBasicData.hourTradingTag"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_marketStatus;
        break;
      }

      // optional string marketStatus = 16;
      case 16: {
        if (tag == 130) {
         parse_marketStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketstatus()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketstatus().data(), this->marketstatus().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.QuoteBasicData.marketStatus"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_identifier;
        break;
      }

      // optional string identifier = 23;
      case 23: {
        if (tag == 186) {
         parse_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tigeropen.push.pb.QuoteBasicData.identifier"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_openInt;
        break;
      }

      // optional sint64 openInt = 24;
      case 24: {
        if (tag == 192) {
         parse_openInt:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &openint_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_tradeTime;
        break;
      }

      // optional uint64 tradeTime = 25;
      case 25: {
        if (tag == 200) {
         parse_tradeTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tradetime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_preSettlement;
        break;
      }

      // optional double preSettlement = 26;
      case 26: {
        if (tag == 209) {
         parse_preSettlement:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &presettlement_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_minTick;
        break;
      }

      // optional float minTick = 27;
      case 27: {
        if (tag == 221) {
         parse_minTick:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mintick_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_mi;
        break;
      }

      // optional .tigeropen.push.pb.QuoteData.Minute mi = 28;
      case 28: {
        if (tag == 226) {
         parse_mi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tigeropen.push.pb.QuoteBasicData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tigeropen.push.pb.QuoteBasicData)
  return false;
#undef DO_
}

void QuoteBasicData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tigeropen.push.pb.QuoteBasicData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteBasicData.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // optional uint64 serverTimestamp = 4;
  if (this->servertimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->servertimestamp(), output);
  }

  // optional double avgPrice = 5;
  if (this->avgprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->avgprice(), output);
  }

  // optional double latestPrice = 6;
  if (this->latestprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->latestprice(), output);
  }

  // optional uint64 latestPriceTimestamp = 7;
  if (this->latestpricetimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->latestpricetimestamp(), output);
  }

  // optional string latestTime = 8;
  if (this->latesttime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->latesttime().data(), this->latesttime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteBasicData.latestTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->latesttime(), output);
  }

  // optional double preClose = 9;
  if (this->preclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->preclose(), output);
  }

  // optional sint64 volume = 10;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(10, this->volume(), output);
  }

  // optional double amount = 11;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->amount(), output);
  }

  // optional double open = 12;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->open(), output);
  }

  // optional double high = 13;
  if (this->high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->high(), output);
  }

  // optional double low = 14;
  if (this->low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->low(), output);
  }

  // optional string hourTradingTag = 15;
  if (this->hourtradingtag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hourtradingtag().data(), this->hourtradingtag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteBasicData.hourTradingTag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->hourtradingtag(), output);
  }

  // optional string marketStatus = 16;
  if (this->marketstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketstatus().data(), this->marketstatus().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteBasicData.marketStatus");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->marketstatus(), output);
  }

  // optional string identifier = 23;
  if (this->identifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteBasicData.identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->identifier(), output);
  }

  // optional sint64 openInt = 24;
  if (this->openint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(24, this->openint(), output);
  }

  // optional uint64 tradeTime = 25;
  if (this->tradetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->tradetime(), output);
  }

  // optional double preSettlement = 26;
  if (this->presettlement() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->presettlement(), output);
  }

  // optional float minTick = 27;
  if (this->mintick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->mintick(), output);
  }

  // optional .tigeropen.push.pb.QuoteData.Minute mi = 28;
  if (this->has_mi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->mi_, output);
  }

  // @@protoc_insertion_point(serialize_end:tigeropen.push.pb.QuoteBasicData)
}

::google::protobuf::uint8* QuoteBasicData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tigeropen.push.pb.QuoteBasicData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteBasicData.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // optional uint64 serverTimestamp = 4;
  if (this->servertimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->servertimestamp(), target);
  }

  // optional double avgPrice = 5;
  if (this->avgprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->avgprice(), target);
  }

  // optional double latestPrice = 6;
  if (this->latestprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->latestprice(), target);
  }

  // optional uint64 latestPriceTimestamp = 7;
  if (this->latestpricetimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->latestpricetimestamp(), target);
  }

  // optional string latestTime = 8;
  if (this->latesttime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->latesttime().data(), this->latesttime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteBasicData.latestTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->latesttime(), target);
  }

  // optional double preClose = 9;
  if (this->preclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->preclose(), target);
  }

  // optional sint64 volume = 10;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(10, this->volume(), target);
  }

  // optional double amount = 11;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->amount(), target);
  }

  // optional double open = 12;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->open(), target);
  }

  // optional double high = 13;
  if (this->high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->high(), target);
  }

  // optional double low = 14;
  if (this->low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->low(), target);
  }

  // optional string hourTradingTag = 15;
  if (this->hourtradingtag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hourtradingtag().data(), this->hourtradingtag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteBasicData.hourTradingTag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->hourtradingtag(), target);
  }

  // optional string marketStatus = 16;
  if (this->marketstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketstatus().data(), this->marketstatus().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteBasicData.marketStatus");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->marketstatus(), target);
  }

  // optional string identifier = 23;
  if (this->identifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tigeropen.push.pb.QuoteBasicData.identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->identifier(), target);
  }

  // optional sint64 openInt = 24;
  if (this->openint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(24, this->openint(), target);
  }

  // optional uint64 tradeTime = 25;
  if (this->tradetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->tradetime(), target);
  }

  // optional double preSettlement = 26;
  if (this->presettlement() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->presettlement(), target);
  }

  // optional float minTick = 27;
  if (this->mintick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->mintick(), target);
  }

  // optional .tigeropen.push.pb.QuoteData.Minute mi = 28;
  if (this->has_mi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->mi_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tigeropen.push.pb.QuoteBasicData)
  return target;
}

size_t QuoteBasicData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tigeropen.push.pb.QuoteBasicData)
  size_t total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // optional uint64 serverTimestamp = 4;
  if (this->servertimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->servertimestamp());
  }

  // optional double avgPrice = 5;
  if (this->avgprice() != 0) {
    total_size += 1 + 8;
  }

  // optional double latestPrice = 6;
  if (this->latestprice() != 0) {
    total_size += 1 + 8;
  }

  // optional uint64 latestPriceTimestamp = 7;
  if (this->latestpricetimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->latestpricetimestamp());
  }

  // optional string latestTime = 8;
  if (this->latesttime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->latesttime());
  }

  // optional double preClose = 9;
  if (this->preclose() != 0) {
    total_size += 1 + 8;
  }

  // optional sint64 volume = 10;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->volume());
  }

  // optional double amount = 11;
  if (this->amount() != 0) {
    total_size += 1 + 8;
  }

  // optional double open = 12;
  if (this->open() != 0) {
    total_size += 1 + 8;
  }

  // optional double high = 13;
  if (this->high() != 0) {
    total_size += 1 + 8;
  }

  // optional double low = 14;
  if (this->low() != 0) {
    total_size += 1 + 8;
  }

  // optional string hourTradingTag = 15;
  if (this->hourtradingtag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hourtradingtag());
  }

  // optional string marketStatus = 16;
  if (this->marketstatus().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketstatus());
  }

  // optional string identifier = 23;
  if (this->identifier().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identifier());
  }

  // optional sint64 openInt = 24;
  if (this->openint() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->openint());
  }

  // optional uint64 tradeTime = 25;
  if (this->tradetime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tradetime());
  }

  // optional double preSettlement = 26;
  if (this->presettlement() != 0) {
    total_size += 2 + 8;
  }

  // optional float minTick = 27;
  if (this->mintick() != 0) {
    total_size += 2 + 4;
  }

  // optional .tigeropen.push.pb.QuoteData.Minute mi = 28;
  if (this->has_mi()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mi_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuoteBasicData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tigeropen.push.pb.QuoteBasicData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuoteBasicData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuoteBasicData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tigeropen.push.pb.QuoteBasicData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tigeropen.push.pb.QuoteBasicData)
    UnsafeMergeFrom(*source);
  }
}

void QuoteBasicData::MergeFrom(const QuoteBasicData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tigeropen.push.pb.QuoteBasicData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QuoteBasicData::UnsafeMergeFrom(const QuoteBasicData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.servertimestamp() != 0) {
    set_servertimestamp(from.servertimestamp());
  }
  if (from.avgprice() != 0) {
    set_avgprice(from.avgprice());
  }
  if (from.latestprice() != 0) {
    set_latestprice(from.latestprice());
  }
  if (from.latestpricetimestamp() != 0) {
    set_latestpricetimestamp(from.latestpricetimestamp());
  }
  if (from.latesttime().size() > 0) {

    latesttime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latesttime_);
  }
  if (from.preclose() != 0) {
    set_preclose(from.preclose());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.open() != 0) {
    set_open(from.open());
  }
  if (from.high() != 0) {
    set_high(from.high());
  }
  if (from.low() != 0) {
    set_low(from.low());
  }
  if (from.hourtradingtag().size() > 0) {

    hourtradingtag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hourtradingtag_);
  }
  if (from.marketstatus().size() > 0) {

    marketstatus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketstatus_);
  }
  if (from.identifier().size() > 0) {

    identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifier_);
  }
  if (from.openint() != 0) {
    set_openint(from.openint());
  }
  if (from.tradetime() != 0) {
    set_tradetime(from.tradetime());
  }
  if (from.presettlement() != 0) {
    set_presettlement(from.presettlement());
  }
  if (from.mintick() != 0) {
    set_mintick(from.mintick());
  }
  if (from.has_mi()) {
    mutable_mi()->::tigeropen::push::pb::QuoteData_Minute::MergeFrom(from.mi());
  }
}

void QuoteBasicData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tigeropen.push.pb.QuoteBasicData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuoteBasicData::CopyFrom(const QuoteBasicData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tigeropen.push.pb.QuoteBasicData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QuoteBasicData::IsInitialized() const {

  return true;
}

void QuoteBasicData::Swap(QuoteBasicData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuoteBasicData::InternalSwap(QuoteBasicData* other) {
  symbol_.Swap(&other->symbol_);
  std::swap(type_, other->type_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(servertimestamp_, other->servertimestamp_);
  std::swap(avgprice_, other->avgprice_);
  std::swap(latestprice_, other->latestprice_);
  std::swap(latestpricetimestamp_, other->latestpricetimestamp_);
  latesttime_.Swap(&other->latesttime_);
  std::swap(preclose_, other->preclose_);
  std::swap(volume_, other->volume_);
  std::swap(amount_, other->amount_);
  std::swap(open_, other->open_);
  std::swap(high_, other->high_);
  std::swap(low_, other->low_);
  hourtradingtag_.Swap(&other->hourtradingtag_);
  marketstatus_.Swap(&other->marketstatus_);
  identifier_.Swap(&other->identifier_);
  std::swap(openint_, other->openint_);
  std::swap(tradetime_, other->tradetime_);
  std::swap(presettlement_, other->presettlement_);
  std::swap(mintick_, other->mintick_);
  std::swap(mi_, other->mi_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuoteBasicData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuoteBasicData_descriptor_;
  metadata.reflection = QuoteBasicData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuoteBasicData

// optional string symbol = 1;
void QuoteBasicData::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuoteBasicData::symbol() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteBasicData::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.symbol)
}
void QuoteBasicData::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteBasicData.symbol)
}
void QuoteBasicData::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteBasicData.symbol)
}
::std::string* QuoteBasicData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteBasicData.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuoteBasicData::release_symbol() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteBasicData.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteBasicData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteBasicData.symbol)
}

// optional .tigeropen.push.pb.SocketCommon.QuoteType type = 2;
void QuoteBasicData::clear_type() {
  type_ = 0;
}
::tigeropen::push::pb::SocketCommon_QuoteType QuoteBasicData::type() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.type)
  return static_cast< ::tigeropen::push::pb::SocketCommon_QuoteType >(type_);
}
void QuoteBasicData::set_type(::tigeropen::push::pb::SocketCommon_QuoteType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.type)
}

// optional uint64 timestamp = 3;
void QuoteBasicData::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 QuoteBasicData::timestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.timestamp)
  return timestamp_;
}
void QuoteBasicData::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.timestamp)
}

// optional uint64 serverTimestamp = 4;
void QuoteBasicData::clear_servertimestamp() {
  servertimestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 QuoteBasicData::servertimestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.serverTimestamp)
  return servertimestamp_;
}
void QuoteBasicData::set_servertimestamp(::google::protobuf::uint64 value) {
  
  servertimestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.serverTimestamp)
}

// optional double avgPrice = 5;
void QuoteBasicData::clear_avgprice() {
  avgprice_ = 0;
}
double QuoteBasicData::avgprice() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.avgPrice)
  return avgprice_;
}
void QuoteBasicData::set_avgprice(double value) {
  
  avgprice_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.avgPrice)
}

// optional double latestPrice = 6;
void QuoteBasicData::clear_latestprice() {
  latestprice_ = 0;
}
double QuoteBasicData::latestprice() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.latestPrice)
  return latestprice_;
}
void QuoteBasicData::set_latestprice(double value) {
  
  latestprice_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.latestPrice)
}

// optional uint64 latestPriceTimestamp = 7;
void QuoteBasicData::clear_latestpricetimestamp() {
  latestpricetimestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 QuoteBasicData::latestpricetimestamp() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.latestPriceTimestamp)
  return latestpricetimestamp_;
}
void QuoteBasicData::set_latestpricetimestamp(::google::protobuf::uint64 value) {
  
  latestpricetimestamp_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.latestPriceTimestamp)
}

// optional string latestTime = 8;
void QuoteBasicData::clear_latesttime() {
  latesttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuoteBasicData::latesttime() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.latestTime)
  return latesttime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteBasicData::set_latesttime(const ::std::string& value) {
  
  latesttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.latestTime)
}
void QuoteBasicData::set_latesttime(const char* value) {
  
  latesttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteBasicData.latestTime)
}
void QuoteBasicData::set_latesttime(const char* value, size_t size) {
  
  latesttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteBasicData.latestTime)
}
::std::string* QuoteBasicData::mutable_latesttime() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteBasicData.latestTime)
  return latesttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuoteBasicData::release_latesttime() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteBasicData.latestTime)
  
  return latesttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteBasicData::set_allocated_latesttime(::std::string* latesttime) {
  if (latesttime != NULL) {
    
  } else {
    
  }
  latesttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latesttime);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteBasicData.latestTime)
}

// optional double preClose = 9;
void QuoteBasicData::clear_preclose() {
  preclose_ = 0;
}
double QuoteBasicData::preclose() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.preClose)
  return preclose_;
}
void QuoteBasicData::set_preclose(double value) {
  
  preclose_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.preClose)
}

// optional sint64 volume = 10;
void QuoteBasicData::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QuoteBasicData::volume() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.volume)
  return volume_;
}
void QuoteBasicData::set_volume(::google::protobuf::int64 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.volume)
}

// optional double amount = 11;
void QuoteBasicData::clear_amount() {
  amount_ = 0;
}
double QuoteBasicData::amount() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.amount)
  return amount_;
}
void QuoteBasicData::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.amount)
}

// optional double open = 12;
void QuoteBasicData::clear_open() {
  open_ = 0;
}
double QuoteBasicData::open() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.open)
  return open_;
}
void QuoteBasicData::set_open(double value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.open)
}

// optional double high = 13;
void QuoteBasicData::clear_high() {
  high_ = 0;
}
double QuoteBasicData::high() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.high)
  return high_;
}
void QuoteBasicData::set_high(double value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.high)
}

// optional double low = 14;
void QuoteBasicData::clear_low() {
  low_ = 0;
}
double QuoteBasicData::low() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.low)
  return low_;
}
void QuoteBasicData::set_low(double value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.low)
}

// optional string hourTradingTag = 15;
void QuoteBasicData::clear_hourtradingtag() {
  hourtradingtag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuoteBasicData::hourtradingtag() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.hourTradingTag)
  return hourtradingtag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteBasicData::set_hourtradingtag(const ::std::string& value) {
  
  hourtradingtag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.hourTradingTag)
}
void QuoteBasicData::set_hourtradingtag(const char* value) {
  
  hourtradingtag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteBasicData.hourTradingTag)
}
void QuoteBasicData::set_hourtradingtag(const char* value, size_t size) {
  
  hourtradingtag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteBasicData.hourTradingTag)
}
::std::string* QuoteBasicData::mutable_hourtradingtag() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteBasicData.hourTradingTag)
  return hourtradingtag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuoteBasicData::release_hourtradingtag() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteBasicData.hourTradingTag)
  
  return hourtradingtag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteBasicData::set_allocated_hourtradingtag(::std::string* hourtradingtag) {
  if (hourtradingtag != NULL) {
    
  } else {
    
  }
  hourtradingtag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hourtradingtag);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteBasicData.hourTradingTag)
}

// optional string marketStatus = 16;
void QuoteBasicData::clear_marketstatus() {
  marketstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuoteBasicData::marketstatus() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.marketStatus)
  return marketstatus_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteBasicData::set_marketstatus(const ::std::string& value) {
  
  marketstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.marketStatus)
}
void QuoteBasicData::set_marketstatus(const char* value) {
  
  marketstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteBasicData.marketStatus)
}
void QuoteBasicData::set_marketstatus(const char* value, size_t size) {
  
  marketstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteBasicData.marketStatus)
}
::std::string* QuoteBasicData::mutable_marketstatus() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteBasicData.marketStatus)
  return marketstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuoteBasicData::release_marketstatus() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteBasicData.marketStatus)
  
  return marketstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteBasicData::set_allocated_marketstatus(::std::string* marketstatus) {
  if (marketstatus != NULL) {
    
  } else {
    
  }
  marketstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketstatus);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteBasicData.marketStatus)
}

// optional string identifier = 23;
void QuoteBasicData::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuoteBasicData::identifier() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.identifier)
  return identifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteBasicData::set_identifier(const ::std::string& value) {
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.identifier)
}
void QuoteBasicData::set_identifier(const char* value) {
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tigeropen.push.pb.QuoteBasicData.identifier)
}
void QuoteBasicData::set_identifier(const char* value, size_t size) {
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tigeropen.push.pb.QuoteBasicData.identifier)
}
::std::string* QuoteBasicData::mutable_identifier() {
  
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteBasicData.identifier)
  return identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuoteBasicData::release_identifier() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteBasicData.identifier)
  
  return identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuoteBasicData::set_allocated_identifier(::std::string* identifier) {
  if (identifier != NULL) {
    
  } else {
    
  }
  identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteBasicData.identifier)
}

// optional sint64 openInt = 24;
void QuoteBasicData::clear_openint() {
  openint_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QuoteBasicData::openint() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.openInt)
  return openint_;
}
void QuoteBasicData::set_openint(::google::protobuf::int64 value) {
  
  openint_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.openInt)
}

// optional uint64 tradeTime = 25;
void QuoteBasicData::clear_tradetime() {
  tradetime_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 QuoteBasicData::tradetime() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.tradeTime)
  return tradetime_;
}
void QuoteBasicData::set_tradetime(::google::protobuf::uint64 value) {
  
  tradetime_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.tradeTime)
}

// optional double preSettlement = 26;
void QuoteBasicData::clear_presettlement() {
  presettlement_ = 0;
}
double QuoteBasicData::presettlement() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.preSettlement)
  return presettlement_;
}
void QuoteBasicData::set_presettlement(double value) {
  
  presettlement_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.preSettlement)
}

// optional float minTick = 27;
void QuoteBasicData::clear_mintick() {
  mintick_ = 0;
}
float QuoteBasicData::mintick() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.minTick)
  return mintick_;
}
void QuoteBasicData::set_mintick(float value) {
  
  mintick_ = value;
  // @@protoc_insertion_point(field_set:tigeropen.push.pb.QuoteBasicData.minTick)
}

// optional .tigeropen.push.pb.QuoteData.Minute mi = 28;
bool QuoteBasicData::has_mi() const {
  return this != internal_default_instance() && mi_ != NULL;
}
void QuoteBasicData::clear_mi() {
  if (GetArenaNoVirtual() == NULL && mi_ != NULL) delete mi_;
  mi_ = NULL;
}
const ::tigeropen::push::pb::QuoteData_Minute& QuoteBasicData::mi() const {
  // @@protoc_insertion_point(field_get:tigeropen.push.pb.QuoteBasicData.mi)
  return mi_ != NULL ? *mi_
                         : *::tigeropen::push::pb::QuoteData_Minute::internal_default_instance();
}
::tigeropen::push::pb::QuoteData_Minute* QuoteBasicData::mutable_mi() {
  
  if (mi_ == NULL) {
    mi_ = new ::tigeropen::push::pb::QuoteData_Minute;
  }
  // @@protoc_insertion_point(field_mutable:tigeropen.push.pb.QuoteBasicData.mi)
  return mi_;
}
::tigeropen::push::pb::QuoteData_Minute* QuoteBasicData::release_mi() {
  // @@protoc_insertion_point(field_release:tigeropen.push.pb.QuoteBasicData.mi)
  
  ::tigeropen::push::pb::QuoteData_Minute* temp = mi_;
  mi_ = NULL;
  return temp;
}
void QuoteBasicData::set_allocated_mi(::tigeropen::push::pb::QuoteData_Minute* mi) {
  delete mi_;
  mi_ = mi;
  if (mi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tigeropen.push.pb.QuoteBasicData.mi)
}

inline const QuoteBasicData* QuoteBasicData::internal_default_instance() {
  return &QuoteBasicData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace push
}  // namespace tigeropen

// @@protoc_insertion_point(global_scope)
